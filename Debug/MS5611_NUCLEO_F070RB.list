
MS5611_NUCLEO_F070RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004770  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08004830  08004830  00014830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048e0  080048e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080048e0  080048e0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048e0  080048e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048e0  080048e0  000148e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048e4  080048e4  000148e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080048e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000010  080048f4  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  080048f4  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000754a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001742  00000000  00000000  0002757e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006e0  00000000  00000000  00028cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005f8  00000000  00000000  000293a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000fddc  00000000  00000000  00029998  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007b9d  00000000  00000000  00039774  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005ce37  00000000  00000000  00041311  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009e148  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019b4  00000000  00000000  0009e1c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004818 	.word	0x08004818

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08004818 	.word	0x08004818

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_lmul>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	46ce      	mov	lr, r9
 8000224:	4647      	mov	r7, r8
 8000226:	0415      	lsls	r5, r2, #16
 8000228:	0c2d      	lsrs	r5, r5, #16
 800022a:	002e      	movs	r6, r5
 800022c:	b580      	push	{r7, lr}
 800022e:	0407      	lsls	r7, r0, #16
 8000230:	0c14      	lsrs	r4, r2, #16
 8000232:	0c3f      	lsrs	r7, r7, #16
 8000234:	4699      	mov	r9, r3
 8000236:	0c03      	lsrs	r3, r0, #16
 8000238:	437e      	muls	r6, r7
 800023a:	435d      	muls	r5, r3
 800023c:	4367      	muls	r7, r4
 800023e:	4363      	muls	r3, r4
 8000240:	197f      	adds	r7, r7, r5
 8000242:	0c34      	lsrs	r4, r6, #16
 8000244:	19e4      	adds	r4, r4, r7
 8000246:	469c      	mov	ip, r3
 8000248:	42a5      	cmp	r5, r4
 800024a:	d903      	bls.n	8000254 <__aeabi_lmul+0x34>
 800024c:	2380      	movs	r3, #128	; 0x80
 800024e:	025b      	lsls	r3, r3, #9
 8000250:	4698      	mov	r8, r3
 8000252:	44c4      	add	ip, r8
 8000254:	464b      	mov	r3, r9
 8000256:	4343      	muls	r3, r0
 8000258:	4351      	muls	r1, r2
 800025a:	0c25      	lsrs	r5, r4, #16
 800025c:	0436      	lsls	r6, r6, #16
 800025e:	4465      	add	r5, ip
 8000260:	0c36      	lsrs	r6, r6, #16
 8000262:	0424      	lsls	r4, r4, #16
 8000264:	19a4      	adds	r4, r4, r6
 8000266:	195b      	adds	r3, r3, r5
 8000268:	1859      	adds	r1, r3, r1
 800026a:	0020      	movs	r0, r4
 800026c:	bc0c      	pop	{r2, r3}
 800026e:	4690      	mov	r8, r2
 8000270:	4699      	mov	r9, r3
 8000272:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000274 <__aeabi_d2lz>:
 8000274:	b570      	push	{r4, r5, r6, lr}
 8000276:	0005      	movs	r5, r0
 8000278:	000c      	movs	r4, r1
 800027a:	2200      	movs	r2, #0
 800027c:	2300      	movs	r3, #0
 800027e:	0028      	movs	r0, r5
 8000280:	0021      	movs	r1, r4
 8000282:	f001 fd5b 	bl	8001d3c <__aeabi_dcmplt>
 8000286:	2800      	cmp	r0, #0
 8000288:	d104      	bne.n	8000294 <__aeabi_d2lz+0x20>
 800028a:	0028      	movs	r0, r5
 800028c:	0021      	movs	r1, r4
 800028e:	f000 f80d 	bl	80002ac <__aeabi_d2ulz>
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	061b      	lsls	r3, r3, #24
 8000298:	18e1      	adds	r1, r4, r3
 800029a:	0028      	movs	r0, r5
 800029c:	f000 f806 	bl	80002ac <__aeabi_d2ulz>
 80002a0:	0002      	movs	r2, r0
 80002a2:	000b      	movs	r3, r1
 80002a4:	2100      	movs	r1, #0
 80002a6:	4250      	negs	r0, r2
 80002a8:	4199      	sbcs	r1, r3
 80002aa:	e7f2      	b.n	8000292 <__aeabi_d2lz+0x1e>

080002ac <__aeabi_d2ulz>:
 80002ac:	b570      	push	{r4, r5, r6, lr}
 80002ae:	2200      	movs	r2, #0
 80002b0:	4b0b      	ldr	r3, [pc, #44]	; (80002e0 <__aeabi_d2ulz+0x34>)
 80002b2:	000d      	movs	r5, r1
 80002b4:	0004      	movs	r4, r0
 80002b6:	f000 fe4b 	bl	8000f50 <__aeabi_dmul>
 80002ba:	f001 fd85 	bl	8001dc8 <__aeabi_d2uiz>
 80002be:	0006      	movs	r6, r0
 80002c0:	f001 fc70 	bl	8001ba4 <__aeabi_ui2d>
 80002c4:	2200      	movs	r2, #0
 80002c6:	4b07      	ldr	r3, [pc, #28]	; (80002e4 <__aeabi_d2ulz+0x38>)
 80002c8:	f000 fe42 	bl	8000f50 <__aeabi_dmul>
 80002cc:	0002      	movs	r2, r0
 80002ce:	000b      	movs	r3, r1
 80002d0:	0020      	movs	r0, r4
 80002d2:	0029      	movs	r1, r5
 80002d4:	f001 f8ae 	bl	8001434 <__aeabi_dsub>
 80002d8:	f001 fd76 	bl	8001dc8 <__aeabi_d2uiz>
 80002dc:	0031      	movs	r1, r6
 80002de:	bd70      	pop	{r4, r5, r6, pc}
 80002e0:	3df00000 	.word	0x3df00000
 80002e4:	41f00000 	.word	0x41f00000

080002e8 <__aeabi_l2d>:
 80002e8:	b570      	push	{r4, r5, r6, lr}
 80002ea:	0006      	movs	r6, r0
 80002ec:	0008      	movs	r0, r1
 80002ee:	f001 fc1f 	bl	8001b30 <__aeabi_i2d>
 80002f2:	2200      	movs	r2, #0
 80002f4:	4b06      	ldr	r3, [pc, #24]	; (8000310 <__aeabi_l2d+0x28>)
 80002f6:	f000 fe2b 	bl	8000f50 <__aeabi_dmul>
 80002fa:	000d      	movs	r5, r1
 80002fc:	0004      	movs	r4, r0
 80002fe:	0030      	movs	r0, r6
 8000300:	f001 fc50 	bl	8001ba4 <__aeabi_ui2d>
 8000304:	002b      	movs	r3, r5
 8000306:	0022      	movs	r2, r4
 8000308:	f000 f804 	bl	8000314 <__aeabi_dadd>
 800030c:	bd70      	pop	{r4, r5, r6, pc}
 800030e:	46c0      	nop			; (mov r8, r8)
 8000310:	41f00000 	.word	0x41f00000

08000314 <__aeabi_dadd>:
 8000314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000316:	464f      	mov	r7, r9
 8000318:	4646      	mov	r6, r8
 800031a:	46d6      	mov	lr, sl
 800031c:	000c      	movs	r4, r1
 800031e:	0309      	lsls	r1, r1, #12
 8000320:	b5c0      	push	{r6, r7, lr}
 8000322:	0a49      	lsrs	r1, r1, #9
 8000324:	0f47      	lsrs	r7, r0, #29
 8000326:	005e      	lsls	r6, r3, #1
 8000328:	4339      	orrs	r1, r7
 800032a:	031f      	lsls	r7, r3, #12
 800032c:	0fdb      	lsrs	r3, r3, #31
 800032e:	469c      	mov	ip, r3
 8000330:	0065      	lsls	r5, r4, #1
 8000332:	0a7b      	lsrs	r3, r7, #9
 8000334:	0f57      	lsrs	r7, r2, #29
 8000336:	431f      	orrs	r7, r3
 8000338:	0d6d      	lsrs	r5, r5, #21
 800033a:	0fe4      	lsrs	r4, r4, #31
 800033c:	0d76      	lsrs	r6, r6, #21
 800033e:	46a1      	mov	r9, r4
 8000340:	00c0      	lsls	r0, r0, #3
 8000342:	46b8      	mov	r8, r7
 8000344:	00d2      	lsls	r2, r2, #3
 8000346:	1bab      	subs	r3, r5, r6
 8000348:	4564      	cmp	r4, ip
 800034a:	d07b      	beq.n	8000444 <__aeabi_dadd+0x130>
 800034c:	2b00      	cmp	r3, #0
 800034e:	dd5f      	ble.n	8000410 <__aeabi_dadd+0xfc>
 8000350:	2e00      	cmp	r6, #0
 8000352:	d000      	beq.n	8000356 <__aeabi_dadd+0x42>
 8000354:	e0a4      	b.n	80004a0 <__aeabi_dadd+0x18c>
 8000356:	003e      	movs	r6, r7
 8000358:	4316      	orrs	r6, r2
 800035a:	d100      	bne.n	800035e <__aeabi_dadd+0x4a>
 800035c:	e112      	b.n	8000584 <__aeabi_dadd+0x270>
 800035e:	1e5e      	subs	r6, r3, #1
 8000360:	2e00      	cmp	r6, #0
 8000362:	d000      	beq.n	8000366 <__aeabi_dadd+0x52>
 8000364:	e19e      	b.n	80006a4 <__aeabi_dadd+0x390>
 8000366:	1a87      	subs	r7, r0, r2
 8000368:	4643      	mov	r3, r8
 800036a:	42b8      	cmp	r0, r7
 800036c:	4180      	sbcs	r0, r0
 800036e:	2501      	movs	r5, #1
 8000370:	1ac9      	subs	r1, r1, r3
 8000372:	4240      	negs	r0, r0
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	020b      	lsls	r3, r1, #8
 8000378:	d400      	bmi.n	800037c <__aeabi_dadd+0x68>
 800037a:	e131      	b.n	80005e0 <__aeabi_dadd+0x2cc>
 800037c:	0249      	lsls	r1, r1, #9
 800037e:	0a4e      	lsrs	r6, r1, #9
 8000380:	2e00      	cmp	r6, #0
 8000382:	d100      	bne.n	8000386 <__aeabi_dadd+0x72>
 8000384:	e16e      	b.n	8000664 <__aeabi_dadd+0x350>
 8000386:	0030      	movs	r0, r6
 8000388:	f001 fd00 	bl	8001d8c <__clzsi2>
 800038c:	0003      	movs	r3, r0
 800038e:	3b08      	subs	r3, #8
 8000390:	2b1f      	cmp	r3, #31
 8000392:	dd00      	ble.n	8000396 <__aeabi_dadd+0x82>
 8000394:	e161      	b.n	800065a <__aeabi_dadd+0x346>
 8000396:	2220      	movs	r2, #32
 8000398:	0039      	movs	r1, r7
 800039a:	1ad2      	subs	r2, r2, r3
 800039c:	409e      	lsls	r6, r3
 800039e:	40d1      	lsrs	r1, r2
 80003a0:	409f      	lsls	r7, r3
 80003a2:	430e      	orrs	r6, r1
 80003a4:	429d      	cmp	r5, r3
 80003a6:	dd00      	ble.n	80003aa <__aeabi_dadd+0x96>
 80003a8:	e151      	b.n	800064e <__aeabi_dadd+0x33a>
 80003aa:	1b5d      	subs	r5, r3, r5
 80003ac:	1c6b      	adds	r3, r5, #1
 80003ae:	2b1f      	cmp	r3, #31
 80003b0:	dd00      	ble.n	80003b4 <__aeabi_dadd+0xa0>
 80003b2:	e17c      	b.n	80006ae <__aeabi_dadd+0x39a>
 80003b4:	2120      	movs	r1, #32
 80003b6:	1ac9      	subs	r1, r1, r3
 80003b8:	003d      	movs	r5, r7
 80003ba:	0030      	movs	r0, r6
 80003bc:	408f      	lsls	r7, r1
 80003be:	4088      	lsls	r0, r1
 80003c0:	40dd      	lsrs	r5, r3
 80003c2:	1e79      	subs	r1, r7, #1
 80003c4:	418f      	sbcs	r7, r1
 80003c6:	0031      	movs	r1, r6
 80003c8:	2207      	movs	r2, #7
 80003ca:	4328      	orrs	r0, r5
 80003cc:	40d9      	lsrs	r1, r3
 80003ce:	2500      	movs	r5, #0
 80003d0:	4307      	orrs	r7, r0
 80003d2:	403a      	ands	r2, r7
 80003d4:	2a00      	cmp	r2, #0
 80003d6:	d009      	beq.n	80003ec <__aeabi_dadd+0xd8>
 80003d8:	230f      	movs	r3, #15
 80003da:	403b      	ands	r3, r7
 80003dc:	2b04      	cmp	r3, #4
 80003de:	d005      	beq.n	80003ec <__aeabi_dadd+0xd8>
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	42bb      	cmp	r3, r7
 80003e4:	41bf      	sbcs	r7, r7
 80003e6:	427f      	negs	r7, r7
 80003e8:	19c9      	adds	r1, r1, r7
 80003ea:	001f      	movs	r7, r3
 80003ec:	020b      	lsls	r3, r1, #8
 80003ee:	d400      	bmi.n	80003f2 <__aeabi_dadd+0xde>
 80003f0:	e226      	b.n	8000840 <__aeabi_dadd+0x52c>
 80003f2:	1c6a      	adds	r2, r5, #1
 80003f4:	4bc6      	ldr	r3, [pc, #792]	; (8000710 <__aeabi_dadd+0x3fc>)
 80003f6:	0555      	lsls	r5, r2, #21
 80003f8:	0d6d      	lsrs	r5, r5, #21
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d100      	bne.n	8000400 <__aeabi_dadd+0xec>
 80003fe:	e106      	b.n	800060e <__aeabi_dadd+0x2fa>
 8000400:	4ac4      	ldr	r2, [pc, #784]	; (8000714 <__aeabi_dadd+0x400>)
 8000402:	08ff      	lsrs	r7, r7, #3
 8000404:	400a      	ands	r2, r1
 8000406:	0753      	lsls	r3, r2, #29
 8000408:	0252      	lsls	r2, r2, #9
 800040a:	433b      	orrs	r3, r7
 800040c:	0b12      	lsrs	r2, r2, #12
 800040e:	e08e      	b.n	800052e <__aeabi_dadd+0x21a>
 8000410:	2b00      	cmp	r3, #0
 8000412:	d000      	beq.n	8000416 <__aeabi_dadd+0x102>
 8000414:	e0b8      	b.n	8000588 <__aeabi_dadd+0x274>
 8000416:	1c6b      	adds	r3, r5, #1
 8000418:	055b      	lsls	r3, r3, #21
 800041a:	0d5b      	lsrs	r3, r3, #21
 800041c:	2b01      	cmp	r3, #1
 800041e:	dc00      	bgt.n	8000422 <__aeabi_dadd+0x10e>
 8000420:	e130      	b.n	8000684 <__aeabi_dadd+0x370>
 8000422:	1a87      	subs	r7, r0, r2
 8000424:	4643      	mov	r3, r8
 8000426:	42b8      	cmp	r0, r7
 8000428:	41b6      	sbcs	r6, r6
 800042a:	1acb      	subs	r3, r1, r3
 800042c:	4276      	negs	r6, r6
 800042e:	1b9e      	subs	r6, r3, r6
 8000430:	0233      	lsls	r3, r6, #8
 8000432:	d500      	bpl.n	8000436 <__aeabi_dadd+0x122>
 8000434:	e14c      	b.n	80006d0 <__aeabi_dadd+0x3bc>
 8000436:	003b      	movs	r3, r7
 8000438:	4333      	orrs	r3, r6
 800043a:	d1a1      	bne.n	8000380 <__aeabi_dadd+0x6c>
 800043c:	2200      	movs	r2, #0
 800043e:	2400      	movs	r4, #0
 8000440:	2500      	movs	r5, #0
 8000442:	e070      	b.n	8000526 <__aeabi_dadd+0x212>
 8000444:	2b00      	cmp	r3, #0
 8000446:	dc00      	bgt.n	800044a <__aeabi_dadd+0x136>
 8000448:	e0e5      	b.n	8000616 <__aeabi_dadd+0x302>
 800044a:	2e00      	cmp	r6, #0
 800044c:	d100      	bne.n	8000450 <__aeabi_dadd+0x13c>
 800044e:	e083      	b.n	8000558 <__aeabi_dadd+0x244>
 8000450:	4eaf      	ldr	r6, [pc, #700]	; (8000710 <__aeabi_dadd+0x3fc>)
 8000452:	42b5      	cmp	r5, r6
 8000454:	d060      	beq.n	8000518 <__aeabi_dadd+0x204>
 8000456:	2680      	movs	r6, #128	; 0x80
 8000458:	0436      	lsls	r6, r6, #16
 800045a:	4337      	orrs	r7, r6
 800045c:	46b8      	mov	r8, r7
 800045e:	2b38      	cmp	r3, #56	; 0x38
 8000460:	dc00      	bgt.n	8000464 <__aeabi_dadd+0x150>
 8000462:	e13e      	b.n	80006e2 <__aeabi_dadd+0x3ce>
 8000464:	4643      	mov	r3, r8
 8000466:	4313      	orrs	r3, r2
 8000468:	001f      	movs	r7, r3
 800046a:	1e7a      	subs	r2, r7, #1
 800046c:	4197      	sbcs	r7, r2
 800046e:	183f      	adds	r7, r7, r0
 8000470:	4287      	cmp	r7, r0
 8000472:	4180      	sbcs	r0, r0
 8000474:	4240      	negs	r0, r0
 8000476:	1809      	adds	r1, r1, r0
 8000478:	020b      	lsls	r3, r1, #8
 800047a:	d400      	bmi.n	800047e <__aeabi_dadd+0x16a>
 800047c:	e0b0      	b.n	80005e0 <__aeabi_dadd+0x2cc>
 800047e:	4ba4      	ldr	r3, [pc, #656]	; (8000710 <__aeabi_dadd+0x3fc>)
 8000480:	3501      	adds	r5, #1
 8000482:	429d      	cmp	r5, r3
 8000484:	d100      	bne.n	8000488 <__aeabi_dadd+0x174>
 8000486:	e0c3      	b.n	8000610 <__aeabi_dadd+0x2fc>
 8000488:	4aa2      	ldr	r2, [pc, #648]	; (8000714 <__aeabi_dadd+0x400>)
 800048a:	087b      	lsrs	r3, r7, #1
 800048c:	400a      	ands	r2, r1
 800048e:	2101      	movs	r1, #1
 8000490:	400f      	ands	r7, r1
 8000492:	431f      	orrs	r7, r3
 8000494:	0851      	lsrs	r1, r2, #1
 8000496:	07d3      	lsls	r3, r2, #31
 8000498:	2207      	movs	r2, #7
 800049a:	431f      	orrs	r7, r3
 800049c:	403a      	ands	r2, r7
 800049e:	e799      	b.n	80003d4 <__aeabi_dadd+0xc0>
 80004a0:	4e9b      	ldr	r6, [pc, #620]	; (8000710 <__aeabi_dadd+0x3fc>)
 80004a2:	42b5      	cmp	r5, r6
 80004a4:	d038      	beq.n	8000518 <__aeabi_dadd+0x204>
 80004a6:	2680      	movs	r6, #128	; 0x80
 80004a8:	0436      	lsls	r6, r6, #16
 80004aa:	4337      	orrs	r7, r6
 80004ac:	46b8      	mov	r8, r7
 80004ae:	2b38      	cmp	r3, #56	; 0x38
 80004b0:	dd00      	ble.n	80004b4 <__aeabi_dadd+0x1a0>
 80004b2:	e0dc      	b.n	800066e <__aeabi_dadd+0x35a>
 80004b4:	2b1f      	cmp	r3, #31
 80004b6:	dc00      	bgt.n	80004ba <__aeabi_dadd+0x1a6>
 80004b8:	e130      	b.n	800071c <__aeabi_dadd+0x408>
 80004ba:	001e      	movs	r6, r3
 80004bc:	4647      	mov	r7, r8
 80004be:	3e20      	subs	r6, #32
 80004c0:	40f7      	lsrs	r7, r6
 80004c2:	46bc      	mov	ip, r7
 80004c4:	2b20      	cmp	r3, #32
 80004c6:	d004      	beq.n	80004d2 <__aeabi_dadd+0x1be>
 80004c8:	2640      	movs	r6, #64	; 0x40
 80004ca:	1af3      	subs	r3, r6, r3
 80004cc:	4646      	mov	r6, r8
 80004ce:	409e      	lsls	r6, r3
 80004d0:	4332      	orrs	r2, r6
 80004d2:	0017      	movs	r7, r2
 80004d4:	4663      	mov	r3, ip
 80004d6:	1e7a      	subs	r2, r7, #1
 80004d8:	4197      	sbcs	r7, r2
 80004da:	431f      	orrs	r7, r3
 80004dc:	e0cc      	b.n	8000678 <__aeabi_dadd+0x364>
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d100      	bne.n	80004e4 <__aeabi_dadd+0x1d0>
 80004e2:	e204      	b.n	80008ee <__aeabi_dadd+0x5da>
 80004e4:	4643      	mov	r3, r8
 80004e6:	4313      	orrs	r3, r2
 80004e8:	d100      	bne.n	80004ec <__aeabi_dadd+0x1d8>
 80004ea:	e159      	b.n	80007a0 <__aeabi_dadd+0x48c>
 80004ec:	074b      	lsls	r3, r1, #29
 80004ee:	08c0      	lsrs	r0, r0, #3
 80004f0:	4318      	orrs	r0, r3
 80004f2:	2380      	movs	r3, #128	; 0x80
 80004f4:	08c9      	lsrs	r1, r1, #3
 80004f6:	031b      	lsls	r3, r3, #12
 80004f8:	4219      	tst	r1, r3
 80004fa:	d008      	beq.n	800050e <__aeabi_dadd+0x1fa>
 80004fc:	4645      	mov	r5, r8
 80004fe:	08ed      	lsrs	r5, r5, #3
 8000500:	421d      	tst	r5, r3
 8000502:	d104      	bne.n	800050e <__aeabi_dadd+0x1fa>
 8000504:	4643      	mov	r3, r8
 8000506:	08d0      	lsrs	r0, r2, #3
 8000508:	0759      	lsls	r1, r3, #29
 800050a:	4308      	orrs	r0, r1
 800050c:	0029      	movs	r1, r5
 800050e:	0f42      	lsrs	r2, r0, #29
 8000510:	00c9      	lsls	r1, r1, #3
 8000512:	4d7f      	ldr	r5, [pc, #508]	; (8000710 <__aeabi_dadd+0x3fc>)
 8000514:	4311      	orrs	r1, r2
 8000516:	00c0      	lsls	r0, r0, #3
 8000518:	074b      	lsls	r3, r1, #29
 800051a:	08ca      	lsrs	r2, r1, #3
 800051c:	497c      	ldr	r1, [pc, #496]	; (8000710 <__aeabi_dadd+0x3fc>)
 800051e:	08c0      	lsrs	r0, r0, #3
 8000520:	4303      	orrs	r3, r0
 8000522:	428d      	cmp	r5, r1
 8000524:	d068      	beq.n	80005f8 <__aeabi_dadd+0x2e4>
 8000526:	0312      	lsls	r2, r2, #12
 8000528:	056d      	lsls	r5, r5, #21
 800052a:	0b12      	lsrs	r2, r2, #12
 800052c:	0d6d      	lsrs	r5, r5, #21
 800052e:	2100      	movs	r1, #0
 8000530:	0312      	lsls	r2, r2, #12
 8000532:	0018      	movs	r0, r3
 8000534:	0b13      	lsrs	r3, r2, #12
 8000536:	0d0a      	lsrs	r2, r1, #20
 8000538:	0512      	lsls	r2, r2, #20
 800053a:	431a      	orrs	r2, r3
 800053c:	4b76      	ldr	r3, [pc, #472]	; (8000718 <__aeabi_dadd+0x404>)
 800053e:	052d      	lsls	r5, r5, #20
 8000540:	4013      	ands	r3, r2
 8000542:	432b      	orrs	r3, r5
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	07e4      	lsls	r4, r4, #31
 8000548:	085b      	lsrs	r3, r3, #1
 800054a:	4323      	orrs	r3, r4
 800054c:	0019      	movs	r1, r3
 800054e:	bc1c      	pop	{r2, r3, r4}
 8000550:	4690      	mov	r8, r2
 8000552:	4699      	mov	r9, r3
 8000554:	46a2      	mov	sl, r4
 8000556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000558:	003e      	movs	r6, r7
 800055a:	4316      	orrs	r6, r2
 800055c:	d012      	beq.n	8000584 <__aeabi_dadd+0x270>
 800055e:	1e5e      	subs	r6, r3, #1
 8000560:	2e00      	cmp	r6, #0
 8000562:	d000      	beq.n	8000566 <__aeabi_dadd+0x252>
 8000564:	e100      	b.n	8000768 <__aeabi_dadd+0x454>
 8000566:	1887      	adds	r7, r0, r2
 8000568:	4287      	cmp	r7, r0
 800056a:	4180      	sbcs	r0, r0
 800056c:	4441      	add	r1, r8
 800056e:	4240      	negs	r0, r0
 8000570:	1809      	adds	r1, r1, r0
 8000572:	2501      	movs	r5, #1
 8000574:	020b      	lsls	r3, r1, #8
 8000576:	d533      	bpl.n	80005e0 <__aeabi_dadd+0x2cc>
 8000578:	2502      	movs	r5, #2
 800057a:	e785      	b.n	8000488 <__aeabi_dadd+0x174>
 800057c:	4664      	mov	r4, ip
 800057e:	0033      	movs	r3, r6
 8000580:	4641      	mov	r1, r8
 8000582:	0010      	movs	r0, r2
 8000584:	001d      	movs	r5, r3
 8000586:	e7c7      	b.n	8000518 <__aeabi_dadd+0x204>
 8000588:	2d00      	cmp	r5, #0
 800058a:	d000      	beq.n	800058e <__aeabi_dadd+0x27a>
 800058c:	e0da      	b.n	8000744 <__aeabi_dadd+0x430>
 800058e:	000c      	movs	r4, r1
 8000590:	4304      	orrs	r4, r0
 8000592:	d0f3      	beq.n	800057c <__aeabi_dadd+0x268>
 8000594:	1c5c      	adds	r4, r3, #1
 8000596:	d100      	bne.n	800059a <__aeabi_dadd+0x286>
 8000598:	e19f      	b.n	80008da <__aeabi_dadd+0x5c6>
 800059a:	4c5d      	ldr	r4, [pc, #372]	; (8000710 <__aeabi_dadd+0x3fc>)
 800059c:	42a6      	cmp	r6, r4
 800059e:	d100      	bne.n	80005a2 <__aeabi_dadd+0x28e>
 80005a0:	e12f      	b.n	8000802 <__aeabi_dadd+0x4ee>
 80005a2:	43db      	mvns	r3, r3
 80005a4:	2b38      	cmp	r3, #56	; 0x38
 80005a6:	dd00      	ble.n	80005aa <__aeabi_dadd+0x296>
 80005a8:	e166      	b.n	8000878 <__aeabi_dadd+0x564>
 80005aa:	2b1f      	cmp	r3, #31
 80005ac:	dd00      	ble.n	80005b0 <__aeabi_dadd+0x29c>
 80005ae:	e183      	b.n	80008b8 <__aeabi_dadd+0x5a4>
 80005b0:	2420      	movs	r4, #32
 80005b2:	0005      	movs	r5, r0
 80005b4:	1ae4      	subs	r4, r4, r3
 80005b6:	000f      	movs	r7, r1
 80005b8:	40dd      	lsrs	r5, r3
 80005ba:	40d9      	lsrs	r1, r3
 80005bc:	40a0      	lsls	r0, r4
 80005be:	4643      	mov	r3, r8
 80005c0:	40a7      	lsls	r7, r4
 80005c2:	1a5b      	subs	r3, r3, r1
 80005c4:	1e44      	subs	r4, r0, #1
 80005c6:	41a0      	sbcs	r0, r4
 80005c8:	4698      	mov	r8, r3
 80005ca:	432f      	orrs	r7, r5
 80005cc:	4338      	orrs	r0, r7
 80005ce:	1a17      	subs	r7, r2, r0
 80005d0:	42ba      	cmp	r2, r7
 80005d2:	4192      	sbcs	r2, r2
 80005d4:	4643      	mov	r3, r8
 80005d6:	4252      	negs	r2, r2
 80005d8:	1a99      	subs	r1, r3, r2
 80005da:	4664      	mov	r4, ip
 80005dc:	0035      	movs	r5, r6
 80005de:	e6ca      	b.n	8000376 <__aeabi_dadd+0x62>
 80005e0:	2207      	movs	r2, #7
 80005e2:	403a      	ands	r2, r7
 80005e4:	2a00      	cmp	r2, #0
 80005e6:	d000      	beq.n	80005ea <__aeabi_dadd+0x2d6>
 80005e8:	e6f6      	b.n	80003d8 <__aeabi_dadd+0xc4>
 80005ea:	074b      	lsls	r3, r1, #29
 80005ec:	08ca      	lsrs	r2, r1, #3
 80005ee:	4948      	ldr	r1, [pc, #288]	; (8000710 <__aeabi_dadd+0x3fc>)
 80005f0:	08ff      	lsrs	r7, r7, #3
 80005f2:	433b      	orrs	r3, r7
 80005f4:	428d      	cmp	r5, r1
 80005f6:	d196      	bne.n	8000526 <__aeabi_dadd+0x212>
 80005f8:	0019      	movs	r1, r3
 80005fa:	4311      	orrs	r1, r2
 80005fc:	d100      	bne.n	8000600 <__aeabi_dadd+0x2ec>
 80005fe:	e19e      	b.n	800093e <__aeabi_dadd+0x62a>
 8000600:	2180      	movs	r1, #128	; 0x80
 8000602:	0309      	lsls	r1, r1, #12
 8000604:	430a      	orrs	r2, r1
 8000606:	0312      	lsls	r2, r2, #12
 8000608:	0b12      	lsrs	r2, r2, #12
 800060a:	4d41      	ldr	r5, [pc, #260]	; (8000710 <__aeabi_dadd+0x3fc>)
 800060c:	e78f      	b.n	800052e <__aeabi_dadd+0x21a>
 800060e:	0015      	movs	r5, r2
 8000610:	2200      	movs	r2, #0
 8000612:	2300      	movs	r3, #0
 8000614:	e78b      	b.n	800052e <__aeabi_dadd+0x21a>
 8000616:	2b00      	cmp	r3, #0
 8000618:	d000      	beq.n	800061c <__aeabi_dadd+0x308>
 800061a:	e0c7      	b.n	80007ac <__aeabi_dadd+0x498>
 800061c:	1c6b      	adds	r3, r5, #1
 800061e:	055f      	lsls	r7, r3, #21
 8000620:	0d7f      	lsrs	r7, r7, #21
 8000622:	2f01      	cmp	r7, #1
 8000624:	dc00      	bgt.n	8000628 <__aeabi_dadd+0x314>
 8000626:	e0f1      	b.n	800080c <__aeabi_dadd+0x4f8>
 8000628:	4d39      	ldr	r5, [pc, #228]	; (8000710 <__aeabi_dadd+0x3fc>)
 800062a:	42ab      	cmp	r3, r5
 800062c:	d100      	bne.n	8000630 <__aeabi_dadd+0x31c>
 800062e:	e0b9      	b.n	80007a4 <__aeabi_dadd+0x490>
 8000630:	1885      	adds	r5, r0, r2
 8000632:	000a      	movs	r2, r1
 8000634:	4285      	cmp	r5, r0
 8000636:	4189      	sbcs	r1, r1
 8000638:	4442      	add	r2, r8
 800063a:	4249      	negs	r1, r1
 800063c:	1851      	adds	r1, r2, r1
 800063e:	2207      	movs	r2, #7
 8000640:	07cf      	lsls	r7, r1, #31
 8000642:	086d      	lsrs	r5, r5, #1
 8000644:	432f      	orrs	r7, r5
 8000646:	0849      	lsrs	r1, r1, #1
 8000648:	403a      	ands	r2, r7
 800064a:	001d      	movs	r5, r3
 800064c:	e6c2      	b.n	80003d4 <__aeabi_dadd+0xc0>
 800064e:	2207      	movs	r2, #7
 8000650:	4930      	ldr	r1, [pc, #192]	; (8000714 <__aeabi_dadd+0x400>)
 8000652:	1aed      	subs	r5, r5, r3
 8000654:	4031      	ands	r1, r6
 8000656:	403a      	ands	r2, r7
 8000658:	e6bc      	b.n	80003d4 <__aeabi_dadd+0xc0>
 800065a:	003e      	movs	r6, r7
 800065c:	3828      	subs	r0, #40	; 0x28
 800065e:	4086      	lsls	r6, r0
 8000660:	2700      	movs	r7, #0
 8000662:	e69f      	b.n	80003a4 <__aeabi_dadd+0x90>
 8000664:	0038      	movs	r0, r7
 8000666:	f001 fb91 	bl	8001d8c <__clzsi2>
 800066a:	3020      	adds	r0, #32
 800066c:	e68e      	b.n	800038c <__aeabi_dadd+0x78>
 800066e:	4643      	mov	r3, r8
 8000670:	4313      	orrs	r3, r2
 8000672:	001f      	movs	r7, r3
 8000674:	1e7a      	subs	r2, r7, #1
 8000676:	4197      	sbcs	r7, r2
 8000678:	1bc7      	subs	r7, r0, r7
 800067a:	42b8      	cmp	r0, r7
 800067c:	4180      	sbcs	r0, r0
 800067e:	4240      	negs	r0, r0
 8000680:	1a09      	subs	r1, r1, r0
 8000682:	e678      	b.n	8000376 <__aeabi_dadd+0x62>
 8000684:	000e      	movs	r6, r1
 8000686:	003b      	movs	r3, r7
 8000688:	4306      	orrs	r6, r0
 800068a:	4313      	orrs	r3, r2
 800068c:	2d00      	cmp	r5, #0
 800068e:	d161      	bne.n	8000754 <__aeabi_dadd+0x440>
 8000690:	2e00      	cmp	r6, #0
 8000692:	d000      	beq.n	8000696 <__aeabi_dadd+0x382>
 8000694:	e0f4      	b.n	8000880 <__aeabi_dadd+0x56c>
 8000696:	2b00      	cmp	r3, #0
 8000698:	d100      	bne.n	800069c <__aeabi_dadd+0x388>
 800069a:	e11b      	b.n	80008d4 <__aeabi_dadd+0x5c0>
 800069c:	4664      	mov	r4, ip
 800069e:	0039      	movs	r1, r7
 80006a0:	0010      	movs	r0, r2
 80006a2:	e739      	b.n	8000518 <__aeabi_dadd+0x204>
 80006a4:	4f1a      	ldr	r7, [pc, #104]	; (8000710 <__aeabi_dadd+0x3fc>)
 80006a6:	42bb      	cmp	r3, r7
 80006a8:	d07a      	beq.n	80007a0 <__aeabi_dadd+0x48c>
 80006aa:	0033      	movs	r3, r6
 80006ac:	e6ff      	b.n	80004ae <__aeabi_dadd+0x19a>
 80006ae:	0030      	movs	r0, r6
 80006b0:	3d1f      	subs	r5, #31
 80006b2:	40e8      	lsrs	r0, r5
 80006b4:	2b20      	cmp	r3, #32
 80006b6:	d003      	beq.n	80006c0 <__aeabi_dadd+0x3ac>
 80006b8:	2140      	movs	r1, #64	; 0x40
 80006ba:	1acb      	subs	r3, r1, r3
 80006bc:	409e      	lsls	r6, r3
 80006be:	4337      	orrs	r7, r6
 80006c0:	1e7b      	subs	r3, r7, #1
 80006c2:	419f      	sbcs	r7, r3
 80006c4:	2207      	movs	r2, #7
 80006c6:	4307      	orrs	r7, r0
 80006c8:	403a      	ands	r2, r7
 80006ca:	2100      	movs	r1, #0
 80006cc:	2500      	movs	r5, #0
 80006ce:	e789      	b.n	80005e4 <__aeabi_dadd+0x2d0>
 80006d0:	1a17      	subs	r7, r2, r0
 80006d2:	4643      	mov	r3, r8
 80006d4:	42ba      	cmp	r2, r7
 80006d6:	41b6      	sbcs	r6, r6
 80006d8:	1a59      	subs	r1, r3, r1
 80006da:	4276      	negs	r6, r6
 80006dc:	1b8e      	subs	r6, r1, r6
 80006de:	4664      	mov	r4, ip
 80006e0:	e64e      	b.n	8000380 <__aeabi_dadd+0x6c>
 80006e2:	2b1f      	cmp	r3, #31
 80006e4:	dd00      	ble.n	80006e8 <__aeabi_dadd+0x3d4>
 80006e6:	e0ad      	b.n	8000844 <__aeabi_dadd+0x530>
 80006e8:	2620      	movs	r6, #32
 80006ea:	4647      	mov	r7, r8
 80006ec:	1af6      	subs	r6, r6, r3
 80006ee:	40b7      	lsls	r7, r6
 80006f0:	46b9      	mov	r9, r7
 80006f2:	0017      	movs	r7, r2
 80006f4:	46b2      	mov	sl, r6
 80006f6:	40df      	lsrs	r7, r3
 80006f8:	464e      	mov	r6, r9
 80006fa:	433e      	orrs	r6, r7
 80006fc:	0037      	movs	r7, r6
 80006fe:	4656      	mov	r6, sl
 8000700:	40b2      	lsls	r2, r6
 8000702:	1e56      	subs	r6, r2, #1
 8000704:	41b2      	sbcs	r2, r6
 8000706:	4317      	orrs	r7, r2
 8000708:	4642      	mov	r2, r8
 800070a:	40da      	lsrs	r2, r3
 800070c:	1889      	adds	r1, r1, r2
 800070e:	e6ae      	b.n	800046e <__aeabi_dadd+0x15a>
 8000710:	000007ff 	.word	0x000007ff
 8000714:	ff7fffff 	.word	0xff7fffff
 8000718:	800fffff 	.word	0x800fffff
 800071c:	2620      	movs	r6, #32
 800071e:	4647      	mov	r7, r8
 8000720:	1af6      	subs	r6, r6, r3
 8000722:	40b7      	lsls	r7, r6
 8000724:	46b9      	mov	r9, r7
 8000726:	0017      	movs	r7, r2
 8000728:	46b2      	mov	sl, r6
 800072a:	40df      	lsrs	r7, r3
 800072c:	464e      	mov	r6, r9
 800072e:	433e      	orrs	r6, r7
 8000730:	0037      	movs	r7, r6
 8000732:	4656      	mov	r6, sl
 8000734:	40b2      	lsls	r2, r6
 8000736:	1e56      	subs	r6, r2, #1
 8000738:	41b2      	sbcs	r2, r6
 800073a:	4317      	orrs	r7, r2
 800073c:	4642      	mov	r2, r8
 800073e:	40da      	lsrs	r2, r3
 8000740:	1a89      	subs	r1, r1, r2
 8000742:	e799      	b.n	8000678 <__aeabi_dadd+0x364>
 8000744:	4c7f      	ldr	r4, [pc, #508]	; (8000944 <__aeabi_dadd+0x630>)
 8000746:	42a6      	cmp	r6, r4
 8000748:	d05b      	beq.n	8000802 <__aeabi_dadd+0x4ee>
 800074a:	2480      	movs	r4, #128	; 0x80
 800074c:	0424      	lsls	r4, r4, #16
 800074e:	425b      	negs	r3, r3
 8000750:	4321      	orrs	r1, r4
 8000752:	e727      	b.n	80005a4 <__aeabi_dadd+0x290>
 8000754:	2e00      	cmp	r6, #0
 8000756:	d10c      	bne.n	8000772 <__aeabi_dadd+0x45e>
 8000758:	2b00      	cmp	r3, #0
 800075a:	d100      	bne.n	800075e <__aeabi_dadd+0x44a>
 800075c:	e0cb      	b.n	80008f6 <__aeabi_dadd+0x5e2>
 800075e:	4664      	mov	r4, ip
 8000760:	0039      	movs	r1, r7
 8000762:	0010      	movs	r0, r2
 8000764:	4d77      	ldr	r5, [pc, #476]	; (8000944 <__aeabi_dadd+0x630>)
 8000766:	e6d7      	b.n	8000518 <__aeabi_dadd+0x204>
 8000768:	4f76      	ldr	r7, [pc, #472]	; (8000944 <__aeabi_dadd+0x630>)
 800076a:	42bb      	cmp	r3, r7
 800076c:	d018      	beq.n	80007a0 <__aeabi_dadd+0x48c>
 800076e:	0033      	movs	r3, r6
 8000770:	e675      	b.n	800045e <__aeabi_dadd+0x14a>
 8000772:	2b00      	cmp	r3, #0
 8000774:	d014      	beq.n	80007a0 <__aeabi_dadd+0x48c>
 8000776:	074b      	lsls	r3, r1, #29
 8000778:	08c0      	lsrs	r0, r0, #3
 800077a:	4318      	orrs	r0, r3
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	08c9      	lsrs	r1, r1, #3
 8000780:	031b      	lsls	r3, r3, #12
 8000782:	4219      	tst	r1, r3
 8000784:	d007      	beq.n	8000796 <__aeabi_dadd+0x482>
 8000786:	08fc      	lsrs	r4, r7, #3
 8000788:	421c      	tst	r4, r3
 800078a:	d104      	bne.n	8000796 <__aeabi_dadd+0x482>
 800078c:	0779      	lsls	r1, r7, #29
 800078e:	08d0      	lsrs	r0, r2, #3
 8000790:	4308      	orrs	r0, r1
 8000792:	46e1      	mov	r9, ip
 8000794:	0021      	movs	r1, r4
 8000796:	464c      	mov	r4, r9
 8000798:	0f42      	lsrs	r2, r0, #29
 800079a:	00c9      	lsls	r1, r1, #3
 800079c:	4311      	orrs	r1, r2
 800079e:	00c0      	lsls	r0, r0, #3
 80007a0:	4d68      	ldr	r5, [pc, #416]	; (8000944 <__aeabi_dadd+0x630>)
 80007a2:	e6b9      	b.n	8000518 <__aeabi_dadd+0x204>
 80007a4:	001d      	movs	r5, r3
 80007a6:	2200      	movs	r2, #0
 80007a8:	2300      	movs	r3, #0
 80007aa:	e6c0      	b.n	800052e <__aeabi_dadd+0x21a>
 80007ac:	2d00      	cmp	r5, #0
 80007ae:	d15b      	bne.n	8000868 <__aeabi_dadd+0x554>
 80007b0:	000d      	movs	r5, r1
 80007b2:	4305      	orrs	r5, r0
 80007b4:	d100      	bne.n	80007b8 <__aeabi_dadd+0x4a4>
 80007b6:	e6e2      	b.n	800057e <__aeabi_dadd+0x26a>
 80007b8:	1c5d      	adds	r5, r3, #1
 80007ba:	d100      	bne.n	80007be <__aeabi_dadd+0x4aa>
 80007bc:	e0b0      	b.n	8000920 <__aeabi_dadd+0x60c>
 80007be:	4d61      	ldr	r5, [pc, #388]	; (8000944 <__aeabi_dadd+0x630>)
 80007c0:	42ae      	cmp	r6, r5
 80007c2:	d01f      	beq.n	8000804 <__aeabi_dadd+0x4f0>
 80007c4:	43db      	mvns	r3, r3
 80007c6:	2b38      	cmp	r3, #56	; 0x38
 80007c8:	dc71      	bgt.n	80008ae <__aeabi_dadd+0x59a>
 80007ca:	2b1f      	cmp	r3, #31
 80007cc:	dd00      	ble.n	80007d0 <__aeabi_dadd+0x4bc>
 80007ce:	e096      	b.n	80008fe <__aeabi_dadd+0x5ea>
 80007d0:	2520      	movs	r5, #32
 80007d2:	000f      	movs	r7, r1
 80007d4:	1aed      	subs	r5, r5, r3
 80007d6:	40af      	lsls	r7, r5
 80007d8:	46b9      	mov	r9, r7
 80007da:	0007      	movs	r7, r0
 80007dc:	46aa      	mov	sl, r5
 80007de:	40df      	lsrs	r7, r3
 80007e0:	464d      	mov	r5, r9
 80007e2:	433d      	orrs	r5, r7
 80007e4:	002f      	movs	r7, r5
 80007e6:	4655      	mov	r5, sl
 80007e8:	40a8      	lsls	r0, r5
 80007ea:	40d9      	lsrs	r1, r3
 80007ec:	1e45      	subs	r5, r0, #1
 80007ee:	41a8      	sbcs	r0, r5
 80007f0:	4488      	add	r8, r1
 80007f2:	4307      	orrs	r7, r0
 80007f4:	18bf      	adds	r7, r7, r2
 80007f6:	4297      	cmp	r7, r2
 80007f8:	4192      	sbcs	r2, r2
 80007fa:	4251      	negs	r1, r2
 80007fc:	4441      	add	r1, r8
 80007fe:	0035      	movs	r5, r6
 8000800:	e63a      	b.n	8000478 <__aeabi_dadd+0x164>
 8000802:	4664      	mov	r4, ip
 8000804:	0035      	movs	r5, r6
 8000806:	4641      	mov	r1, r8
 8000808:	0010      	movs	r0, r2
 800080a:	e685      	b.n	8000518 <__aeabi_dadd+0x204>
 800080c:	000b      	movs	r3, r1
 800080e:	4303      	orrs	r3, r0
 8000810:	2d00      	cmp	r5, #0
 8000812:	d000      	beq.n	8000816 <__aeabi_dadd+0x502>
 8000814:	e663      	b.n	80004de <__aeabi_dadd+0x1ca>
 8000816:	2b00      	cmp	r3, #0
 8000818:	d0f5      	beq.n	8000806 <__aeabi_dadd+0x4f2>
 800081a:	4643      	mov	r3, r8
 800081c:	4313      	orrs	r3, r2
 800081e:	d100      	bne.n	8000822 <__aeabi_dadd+0x50e>
 8000820:	e67a      	b.n	8000518 <__aeabi_dadd+0x204>
 8000822:	1887      	adds	r7, r0, r2
 8000824:	4287      	cmp	r7, r0
 8000826:	4180      	sbcs	r0, r0
 8000828:	2207      	movs	r2, #7
 800082a:	4441      	add	r1, r8
 800082c:	4240      	negs	r0, r0
 800082e:	1809      	adds	r1, r1, r0
 8000830:	403a      	ands	r2, r7
 8000832:	020b      	lsls	r3, r1, #8
 8000834:	d400      	bmi.n	8000838 <__aeabi_dadd+0x524>
 8000836:	e6d5      	b.n	80005e4 <__aeabi_dadd+0x2d0>
 8000838:	4b43      	ldr	r3, [pc, #268]	; (8000948 <__aeabi_dadd+0x634>)
 800083a:	3501      	adds	r5, #1
 800083c:	4019      	ands	r1, r3
 800083e:	e5c9      	b.n	80003d4 <__aeabi_dadd+0xc0>
 8000840:	0038      	movs	r0, r7
 8000842:	e669      	b.n	8000518 <__aeabi_dadd+0x204>
 8000844:	001e      	movs	r6, r3
 8000846:	4647      	mov	r7, r8
 8000848:	3e20      	subs	r6, #32
 800084a:	40f7      	lsrs	r7, r6
 800084c:	46bc      	mov	ip, r7
 800084e:	2b20      	cmp	r3, #32
 8000850:	d004      	beq.n	800085c <__aeabi_dadd+0x548>
 8000852:	2640      	movs	r6, #64	; 0x40
 8000854:	1af3      	subs	r3, r6, r3
 8000856:	4646      	mov	r6, r8
 8000858:	409e      	lsls	r6, r3
 800085a:	4332      	orrs	r2, r6
 800085c:	0017      	movs	r7, r2
 800085e:	4663      	mov	r3, ip
 8000860:	1e7a      	subs	r2, r7, #1
 8000862:	4197      	sbcs	r7, r2
 8000864:	431f      	orrs	r7, r3
 8000866:	e602      	b.n	800046e <__aeabi_dadd+0x15a>
 8000868:	4d36      	ldr	r5, [pc, #216]	; (8000944 <__aeabi_dadd+0x630>)
 800086a:	42ae      	cmp	r6, r5
 800086c:	d0ca      	beq.n	8000804 <__aeabi_dadd+0x4f0>
 800086e:	2580      	movs	r5, #128	; 0x80
 8000870:	042d      	lsls	r5, r5, #16
 8000872:	425b      	negs	r3, r3
 8000874:	4329      	orrs	r1, r5
 8000876:	e7a6      	b.n	80007c6 <__aeabi_dadd+0x4b2>
 8000878:	4308      	orrs	r0, r1
 800087a:	1e41      	subs	r1, r0, #1
 800087c:	4188      	sbcs	r0, r1
 800087e:	e6a6      	b.n	80005ce <__aeabi_dadd+0x2ba>
 8000880:	2b00      	cmp	r3, #0
 8000882:	d100      	bne.n	8000886 <__aeabi_dadd+0x572>
 8000884:	e648      	b.n	8000518 <__aeabi_dadd+0x204>
 8000886:	1a87      	subs	r7, r0, r2
 8000888:	4643      	mov	r3, r8
 800088a:	42b8      	cmp	r0, r7
 800088c:	41b6      	sbcs	r6, r6
 800088e:	1acb      	subs	r3, r1, r3
 8000890:	4276      	negs	r6, r6
 8000892:	1b9e      	subs	r6, r3, r6
 8000894:	0233      	lsls	r3, r6, #8
 8000896:	d54b      	bpl.n	8000930 <__aeabi_dadd+0x61c>
 8000898:	1a17      	subs	r7, r2, r0
 800089a:	4643      	mov	r3, r8
 800089c:	42ba      	cmp	r2, r7
 800089e:	4192      	sbcs	r2, r2
 80008a0:	1a59      	subs	r1, r3, r1
 80008a2:	4252      	negs	r2, r2
 80008a4:	1a89      	subs	r1, r1, r2
 80008a6:	2207      	movs	r2, #7
 80008a8:	4664      	mov	r4, ip
 80008aa:	403a      	ands	r2, r7
 80008ac:	e592      	b.n	80003d4 <__aeabi_dadd+0xc0>
 80008ae:	4301      	orrs	r1, r0
 80008b0:	000f      	movs	r7, r1
 80008b2:	1e79      	subs	r1, r7, #1
 80008b4:	418f      	sbcs	r7, r1
 80008b6:	e79d      	b.n	80007f4 <__aeabi_dadd+0x4e0>
 80008b8:	001c      	movs	r4, r3
 80008ba:	000f      	movs	r7, r1
 80008bc:	3c20      	subs	r4, #32
 80008be:	40e7      	lsrs	r7, r4
 80008c0:	2b20      	cmp	r3, #32
 80008c2:	d003      	beq.n	80008cc <__aeabi_dadd+0x5b8>
 80008c4:	2440      	movs	r4, #64	; 0x40
 80008c6:	1ae3      	subs	r3, r4, r3
 80008c8:	4099      	lsls	r1, r3
 80008ca:	4308      	orrs	r0, r1
 80008cc:	1e41      	subs	r1, r0, #1
 80008ce:	4188      	sbcs	r0, r1
 80008d0:	4338      	orrs	r0, r7
 80008d2:	e67c      	b.n	80005ce <__aeabi_dadd+0x2ba>
 80008d4:	2200      	movs	r2, #0
 80008d6:	2400      	movs	r4, #0
 80008d8:	e625      	b.n	8000526 <__aeabi_dadd+0x212>
 80008da:	1a17      	subs	r7, r2, r0
 80008dc:	4643      	mov	r3, r8
 80008de:	42ba      	cmp	r2, r7
 80008e0:	4192      	sbcs	r2, r2
 80008e2:	1a59      	subs	r1, r3, r1
 80008e4:	4252      	negs	r2, r2
 80008e6:	1a89      	subs	r1, r1, r2
 80008e8:	4664      	mov	r4, ip
 80008ea:	0035      	movs	r5, r6
 80008ec:	e543      	b.n	8000376 <__aeabi_dadd+0x62>
 80008ee:	4641      	mov	r1, r8
 80008f0:	0010      	movs	r0, r2
 80008f2:	4d14      	ldr	r5, [pc, #80]	; (8000944 <__aeabi_dadd+0x630>)
 80008f4:	e610      	b.n	8000518 <__aeabi_dadd+0x204>
 80008f6:	2280      	movs	r2, #128	; 0x80
 80008f8:	2400      	movs	r4, #0
 80008fa:	0312      	lsls	r2, r2, #12
 80008fc:	e680      	b.n	8000600 <__aeabi_dadd+0x2ec>
 80008fe:	001d      	movs	r5, r3
 8000900:	000f      	movs	r7, r1
 8000902:	3d20      	subs	r5, #32
 8000904:	40ef      	lsrs	r7, r5
 8000906:	46bc      	mov	ip, r7
 8000908:	2b20      	cmp	r3, #32
 800090a:	d003      	beq.n	8000914 <__aeabi_dadd+0x600>
 800090c:	2540      	movs	r5, #64	; 0x40
 800090e:	1aeb      	subs	r3, r5, r3
 8000910:	4099      	lsls	r1, r3
 8000912:	4308      	orrs	r0, r1
 8000914:	0007      	movs	r7, r0
 8000916:	4663      	mov	r3, ip
 8000918:	1e78      	subs	r0, r7, #1
 800091a:	4187      	sbcs	r7, r0
 800091c:	431f      	orrs	r7, r3
 800091e:	e769      	b.n	80007f4 <__aeabi_dadd+0x4e0>
 8000920:	1887      	adds	r7, r0, r2
 8000922:	4297      	cmp	r7, r2
 8000924:	419b      	sbcs	r3, r3
 8000926:	4441      	add	r1, r8
 8000928:	425b      	negs	r3, r3
 800092a:	18c9      	adds	r1, r1, r3
 800092c:	0035      	movs	r5, r6
 800092e:	e5a3      	b.n	8000478 <__aeabi_dadd+0x164>
 8000930:	003b      	movs	r3, r7
 8000932:	4333      	orrs	r3, r6
 8000934:	d0ce      	beq.n	80008d4 <__aeabi_dadd+0x5c0>
 8000936:	2207      	movs	r2, #7
 8000938:	0031      	movs	r1, r6
 800093a:	403a      	ands	r2, r7
 800093c:	e652      	b.n	80005e4 <__aeabi_dadd+0x2d0>
 800093e:	2300      	movs	r3, #0
 8000940:	001a      	movs	r2, r3
 8000942:	e5f4      	b.n	800052e <__aeabi_dadd+0x21a>
 8000944:	000007ff 	.word	0x000007ff
 8000948:	ff7fffff 	.word	0xff7fffff

0800094c <__aeabi_ddiv>:
 800094c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800094e:	4657      	mov	r7, sl
 8000950:	46de      	mov	lr, fp
 8000952:	464e      	mov	r6, r9
 8000954:	4645      	mov	r5, r8
 8000956:	b5e0      	push	{r5, r6, r7, lr}
 8000958:	4683      	mov	fp, r0
 800095a:	0007      	movs	r7, r0
 800095c:	030e      	lsls	r6, r1, #12
 800095e:	0048      	lsls	r0, r1, #1
 8000960:	b085      	sub	sp, #20
 8000962:	4692      	mov	sl, r2
 8000964:	001c      	movs	r4, r3
 8000966:	0b36      	lsrs	r6, r6, #12
 8000968:	0d40      	lsrs	r0, r0, #21
 800096a:	0fcd      	lsrs	r5, r1, #31
 800096c:	2800      	cmp	r0, #0
 800096e:	d100      	bne.n	8000972 <__aeabi_ddiv+0x26>
 8000970:	e09d      	b.n	8000aae <__aeabi_ddiv+0x162>
 8000972:	4b95      	ldr	r3, [pc, #596]	; (8000bc8 <__aeabi_ddiv+0x27c>)
 8000974:	4298      	cmp	r0, r3
 8000976:	d039      	beq.n	80009ec <__aeabi_ddiv+0xa0>
 8000978:	2380      	movs	r3, #128	; 0x80
 800097a:	00f6      	lsls	r6, r6, #3
 800097c:	041b      	lsls	r3, r3, #16
 800097e:	431e      	orrs	r6, r3
 8000980:	4a92      	ldr	r2, [pc, #584]	; (8000bcc <__aeabi_ddiv+0x280>)
 8000982:	0f7b      	lsrs	r3, r7, #29
 8000984:	4333      	orrs	r3, r6
 8000986:	4699      	mov	r9, r3
 8000988:	4694      	mov	ip, r2
 800098a:	0003      	movs	r3, r0
 800098c:	4463      	add	r3, ip
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	2300      	movs	r3, #0
 8000992:	2600      	movs	r6, #0
 8000994:	00ff      	lsls	r7, r7, #3
 8000996:	9302      	str	r3, [sp, #8]
 8000998:	0323      	lsls	r3, r4, #12
 800099a:	0b1b      	lsrs	r3, r3, #12
 800099c:	4698      	mov	r8, r3
 800099e:	0063      	lsls	r3, r4, #1
 80009a0:	0fe4      	lsrs	r4, r4, #31
 80009a2:	4652      	mov	r2, sl
 80009a4:	0d5b      	lsrs	r3, r3, #21
 80009a6:	9401      	str	r4, [sp, #4]
 80009a8:	d100      	bne.n	80009ac <__aeabi_ddiv+0x60>
 80009aa:	e0b3      	b.n	8000b14 <__aeabi_ddiv+0x1c8>
 80009ac:	4986      	ldr	r1, [pc, #536]	; (8000bc8 <__aeabi_ddiv+0x27c>)
 80009ae:	428b      	cmp	r3, r1
 80009b0:	d100      	bne.n	80009b4 <__aeabi_ddiv+0x68>
 80009b2:	e09e      	b.n	8000af2 <__aeabi_ddiv+0x1a6>
 80009b4:	4642      	mov	r2, r8
 80009b6:	00d1      	lsls	r1, r2, #3
 80009b8:	2280      	movs	r2, #128	; 0x80
 80009ba:	0412      	lsls	r2, r2, #16
 80009bc:	430a      	orrs	r2, r1
 80009be:	4651      	mov	r1, sl
 80009c0:	0f49      	lsrs	r1, r1, #29
 80009c2:	4311      	orrs	r1, r2
 80009c4:	468b      	mov	fp, r1
 80009c6:	4981      	ldr	r1, [pc, #516]	; (8000bcc <__aeabi_ddiv+0x280>)
 80009c8:	4652      	mov	r2, sl
 80009ca:	468c      	mov	ip, r1
 80009cc:	9900      	ldr	r1, [sp, #0]
 80009ce:	4463      	add	r3, ip
 80009d0:	1acb      	subs	r3, r1, r3
 80009d2:	2100      	movs	r1, #0
 80009d4:	00d2      	lsls	r2, r2, #3
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	002b      	movs	r3, r5
 80009da:	4063      	eors	r3, r4
 80009dc:	469a      	mov	sl, r3
 80009de:	2e0f      	cmp	r6, #15
 80009e0:	d900      	bls.n	80009e4 <__aeabi_ddiv+0x98>
 80009e2:	e105      	b.n	8000bf0 <__aeabi_ddiv+0x2a4>
 80009e4:	4b7a      	ldr	r3, [pc, #488]	; (8000bd0 <__aeabi_ddiv+0x284>)
 80009e6:	00b6      	lsls	r6, r6, #2
 80009e8:	599b      	ldr	r3, [r3, r6]
 80009ea:	469f      	mov	pc, r3
 80009ec:	465b      	mov	r3, fp
 80009ee:	4333      	orrs	r3, r6
 80009f0:	4699      	mov	r9, r3
 80009f2:	d000      	beq.n	80009f6 <__aeabi_ddiv+0xaa>
 80009f4:	e0b8      	b.n	8000b68 <__aeabi_ddiv+0x21c>
 80009f6:	2302      	movs	r3, #2
 80009f8:	2608      	movs	r6, #8
 80009fa:	2700      	movs	r7, #0
 80009fc:	9000      	str	r0, [sp, #0]
 80009fe:	9302      	str	r3, [sp, #8]
 8000a00:	e7ca      	b.n	8000998 <__aeabi_ddiv+0x4c>
 8000a02:	46cb      	mov	fp, r9
 8000a04:	003a      	movs	r2, r7
 8000a06:	9902      	ldr	r1, [sp, #8]
 8000a08:	9501      	str	r5, [sp, #4]
 8000a0a:	9b01      	ldr	r3, [sp, #4]
 8000a0c:	469a      	mov	sl, r3
 8000a0e:	2902      	cmp	r1, #2
 8000a10:	d027      	beq.n	8000a62 <__aeabi_ddiv+0x116>
 8000a12:	2903      	cmp	r1, #3
 8000a14:	d100      	bne.n	8000a18 <__aeabi_ddiv+0xcc>
 8000a16:	e280      	b.n	8000f1a <__aeabi_ddiv+0x5ce>
 8000a18:	2901      	cmp	r1, #1
 8000a1a:	d044      	beq.n	8000aa6 <__aeabi_ddiv+0x15a>
 8000a1c:	496d      	ldr	r1, [pc, #436]	; (8000bd4 <__aeabi_ddiv+0x288>)
 8000a1e:	9b00      	ldr	r3, [sp, #0]
 8000a20:	468c      	mov	ip, r1
 8000a22:	4463      	add	r3, ip
 8000a24:	001c      	movs	r4, r3
 8000a26:	2c00      	cmp	r4, #0
 8000a28:	dd38      	ble.n	8000a9c <__aeabi_ddiv+0x150>
 8000a2a:	0753      	lsls	r3, r2, #29
 8000a2c:	d000      	beq.n	8000a30 <__aeabi_ddiv+0xe4>
 8000a2e:	e213      	b.n	8000e58 <__aeabi_ddiv+0x50c>
 8000a30:	08d2      	lsrs	r2, r2, #3
 8000a32:	465b      	mov	r3, fp
 8000a34:	01db      	lsls	r3, r3, #7
 8000a36:	d509      	bpl.n	8000a4c <__aeabi_ddiv+0x100>
 8000a38:	4659      	mov	r1, fp
 8000a3a:	4b67      	ldr	r3, [pc, #412]	; (8000bd8 <__aeabi_ddiv+0x28c>)
 8000a3c:	4019      	ands	r1, r3
 8000a3e:	468b      	mov	fp, r1
 8000a40:	2180      	movs	r1, #128	; 0x80
 8000a42:	00c9      	lsls	r1, r1, #3
 8000a44:	468c      	mov	ip, r1
 8000a46:	9b00      	ldr	r3, [sp, #0]
 8000a48:	4463      	add	r3, ip
 8000a4a:	001c      	movs	r4, r3
 8000a4c:	4b63      	ldr	r3, [pc, #396]	; (8000bdc <__aeabi_ddiv+0x290>)
 8000a4e:	429c      	cmp	r4, r3
 8000a50:	dc07      	bgt.n	8000a62 <__aeabi_ddiv+0x116>
 8000a52:	465b      	mov	r3, fp
 8000a54:	0564      	lsls	r4, r4, #21
 8000a56:	075f      	lsls	r7, r3, #29
 8000a58:	025b      	lsls	r3, r3, #9
 8000a5a:	4317      	orrs	r7, r2
 8000a5c:	0b1b      	lsrs	r3, r3, #12
 8000a5e:	0d62      	lsrs	r2, r4, #21
 8000a60:	e002      	b.n	8000a68 <__aeabi_ddiv+0x11c>
 8000a62:	2300      	movs	r3, #0
 8000a64:	2700      	movs	r7, #0
 8000a66:	4a58      	ldr	r2, [pc, #352]	; (8000bc8 <__aeabi_ddiv+0x27c>)
 8000a68:	2100      	movs	r1, #0
 8000a6a:	031b      	lsls	r3, r3, #12
 8000a6c:	0b1c      	lsrs	r4, r3, #12
 8000a6e:	0d0b      	lsrs	r3, r1, #20
 8000a70:	051b      	lsls	r3, r3, #20
 8000a72:	4323      	orrs	r3, r4
 8000a74:	0514      	lsls	r4, r2, #20
 8000a76:	4a5a      	ldr	r2, [pc, #360]	; (8000be0 <__aeabi_ddiv+0x294>)
 8000a78:	0038      	movs	r0, r7
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	431c      	orrs	r4, r3
 8000a7e:	4653      	mov	r3, sl
 8000a80:	0064      	lsls	r4, r4, #1
 8000a82:	07db      	lsls	r3, r3, #31
 8000a84:	0864      	lsrs	r4, r4, #1
 8000a86:	431c      	orrs	r4, r3
 8000a88:	0021      	movs	r1, r4
 8000a8a:	b005      	add	sp, #20
 8000a8c:	bc3c      	pop	{r2, r3, r4, r5}
 8000a8e:	4690      	mov	r8, r2
 8000a90:	4699      	mov	r9, r3
 8000a92:	46a2      	mov	sl, r4
 8000a94:	46ab      	mov	fp, r5
 8000a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a98:	2201      	movs	r2, #1
 8000a9a:	4252      	negs	r2, r2
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	1b1b      	subs	r3, r3, r4
 8000aa0:	2b38      	cmp	r3, #56	; 0x38
 8000aa2:	dc00      	bgt.n	8000aa6 <__aeabi_ddiv+0x15a>
 8000aa4:	e1ad      	b.n	8000e02 <__aeabi_ddiv+0x4b6>
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	2700      	movs	r7, #0
 8000aac:	e7dc      	b.n	8000a68 <__aeabi_ddiv+0x11c>
 8000aae:	465b      	mov	r3, fp
 8000ab0:	4333      	orrs	r3, r6
 8000ab2:	4699      	mov	r9, r3
 8000ab4:	d05e      	beq.n	8000b74 <__aeabi_ddiv+0x228>
 8000ab6:	2e00      	cmp	r6, #0
 8000ab8:	d100      	bne.n	8000abc <__aeabi_ddiv+0x170>
 8000aba:	e18a      	b.n	8000dd2 <__aeabi_ddiv+0x486>
 8000abc:	0030      	movs	r0, r6
 8000abe:	f001 f965 	bl	8001d8c <__clzsi2>
 8000ac2:	0003      	movs	r3, r0
 8000ac4:	3b0b      	subs	r3, #11
 8000ac6:	2b1c      	cmp	r3, #28
 8000ac8:	dd00      	ble.n	8000acc <__aeabi_ddiv+0x180>
 8000aca:	e17b      	b.n	8000dc4 <__aeabi_ddiv+0x478>
 8000acc:	221d      	movs	r2, #29
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	465a      	mov	r2, fp
 8000ad2:	0001      	movs	r1, r0
 8000ad4:	40da      	lsrs	r2, r3
 8000ad6:	3908      	subs	r1, #8
 8000ad8:	408e      	lsls	r6, r1
 8000ada:	0013      	movs	r3, r2
 8000adc:	465f      	mov	r7, fp
 8000ade:	4333      	orrs	r3, r6
 8000ae0:	4699      	mov	r9, r3
 8000ae2:	408f      	lsls	r7, r1
 8000ae4:	4b3f      	ldr	r3, [pc, #252]	; (8000be4 <__aeabi_ddiv+0x298>)
 8000ae6:	2600      	movs	r6, #0
 8000ae8:	1a1b      	subs	r3, r3, r0
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	2300      	movs	r3, #0
 8000aee:	9302      	str	r3, [sp, #8]
 8000af0:	e752      	b.n	8000998 <__aeabi_ddiv+0x4c>
 8000af2:	4641      	mov	r1, r8
 8000af4:	4653      	mov	r3, sl
 8000af6:	430b      	orrs	r3, r1
 8000af8:	493b      	ldr	r1, [pc, #236]	; (8000be8 <__aeabi_ddiv+0x29c>)
 8000afa:	469b      	mov	fp, r3
 8000afc:	468c      	mov	ip, r1
 8000afe:	9b00      	ldr	r3, [sp, #0]
 8000b00:	4463      	add	r3, ip
 8000b02:	9300      	str	r3, [sp, #0]
 8000b04:	465b      	mov	r3, fp
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d13b      	bne.n	8000b82 <__aeabi_ddiv+0x236>
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	431e      	orrs	r6, r3
 8000b10:	2102      	movs	r1, #2
 8000b12:	e761      	b.n	80009d8 <__aeabi_ddiv+0x8c>
 8000b14:	4643      	mov	r3, r8
 8000b16:	4313      	orrs	r3, r2
 8000b18:	469b      	mov	fp, r3
 8000b1a:	d037      	beq.n	8000b8c <__aeabi_ddiv+0x240>
 8000b1c:	4643      	mov	r3, r8
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d100      	bne.n	8000b24 <__aeabi_ddiv+0x1d8>
 8000b22:	e162      	b.n	8000dea <__aeabi_ddiv+0x49e>
 8000b24:	4640      	mov	r0, r8
 8000b26:	f001 f931 	bl	8001d8c <__clzsi2>
 8000b2a:	0003      	movs	r3, r0
 8000b2c:	3b0b      	subs	r3, #11
 8000b2e:	2b1c      	cmp	r3, #28
 8000b30:	dd00      	ble.n	8000b34 <__aeabi_ddiv+0x1e8>
 8000b32:	e153      	b.n	8000ddc <__aeabi_ddiv+0x490>
 8000b34:	0002      	movs	r2, r0
 8000b36:	4641      	mov	r1, r8
 8000b38:	3a08      	subs	r2, #8
 8000b3a:	4091      	lsls	r1, r2
 8000b3c:	4688      	mov	r8, r1
 8000b3e:	211d      	movs	r1, #29
 8000b40:	1acb      	subs	r3, r1, r3
 8000b42:	4651      	mov	r1, sl
 8000b44:	40d9      	lsrs	r1, r3
 8000b46:	000b      	movs	r3, r1
 8000b48:	4641      	mov	r1, r8
 8000b4a:	430b      	orrs	r3, r1
 8000b4c:	469b      	mov	fp, r3
 8000b4e:	4653      	mov	r3, sl
 8000b50:	4093      	lsls	r3, r2
 8000b52:	001a      	movs	r2, r3
 8000b54:	9b00      	ldr	r3, [sp, #0]
 8000b56:	4925      	ldr	r1, [pc, #148]	; (8000bec <__aeabi_ddiv+0x2a0>)
 8000b58:	469c      	mov	ip, r3
 8000b5a:	4460      	add	r0, ip
 8000b5c:	0003      	movs	r3, r0
 8000b5e:	468c      	mov	ip, r1
 8000b60:	4463      	add	r3, ip
 8000b62:	9300      	str	r3, [sp, #0]
 8000b64:	2100      	movs	r1, #0
 8000b66:	e737      	b.n	80009d8 <__aeabi_ddiv+0x8c>
 8000b68:	2303      	movs	r3, #3
 8000b6a:	46b1      	mov	r9, r6
 8000b6c:	9000      	str	r0, [sp, #0]
 8000b6e:	260c      	movs	r6, #12
 8000b70:	9302      	str	r3, [sp, #8]
 8000b72:	e711      	b.n	8000998 <__aeabi_ddiv+0x4c>
 8000b74:	2300      	movs	r3, #0
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	2604      	movs	r6, #4
 8000b7c:	2700      	movs	r7, #0
 8000b7e:	9302      	str	r3, [sp, #8]
 8000b80:	e70a      	b.n	8000998 <__aeabi_ddiv+0x4c>
 8000b82:	2303      	movs	r3, #3
 8000b84:	46c3      	mov	fp, r8
 8000b86:	431e      	orrs	r6, r3
 8000b88:	2103      	movs	r1, #3
 8000b8a:	e725      	b.n	80009d8 <__aeabi_ddiv+0x8c>
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	431e      	orrs	r6, r3
 8000b90:	2200      	movs	r2, #0
 8000b92:	2101      	movs	r1, #1
 8000b94:	e720      	b.n	80009d8 <__aeabi_ddiv+0x8c>
 8000b96:	2300      	movs	r3, #0
 8000b98:	469a      	mov	sl, r3
 8000b9a:	2380      	movs	r3, #128	; 0x80
 8000b9c:	2700      	movs	r7, #0
 8000b9e:	031b      	lsls	r3, r3, #12
 8000ba0:	4a09      	ldr	r2, [pc, #36]	; (8000bc8 <__aeabi_ddiv+0x27c>)
 8000ba2:	e761      	b.n	8000a68 <__aeabi_ddiv+0x11c>
 8000ba4:	2380      	movs	r3, #128	; 0x80
 8000ba6:	4649      	mov	r1, r9
 8000ba8:	031b      	lsls	r3, r3, #12
 8000baa:	4219      	tst	r1, r3
 8000bac:	d100      	bne.n	8000bb0 <__aeabi_ddiv+0x264>
 8000bae:	e0e2      	b.n	8000d76 <__aeabi_ddiv+0x42a>
 8000bb0:	4659      	mov	r1, fp
 8000bb2:	4219      	tst	r1, r3
 8000bb4:	d000      	beq.n	8000bb8 <__aeabi_ddiv+0x26c>
 8000bb6:	e0de      	b.n	8000d76 <__aeabi_ddiv+0x42a>
 8000bb8:	430b      	orrs	r3, r1
 8000bba:	031b      	lsls	r3, r3, #12
 8000bbc:	0017      	movs	r7, r2
 8000bbe:	0b1b      	lsrs	r3, r3, #12
 8000bc0:	46a2      	mov	sl, r4
 8000bc2:	4a01      	ldr	r2, [pc, #4]	; (8000bc8 <__aeabi_ddiv+0x27c>)
 8000bc4:	e750      	b.n	8000a68 <__aeabi_ddiv+0x11c>
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	000007ff 	.word	0x000007ff
 8000bcc:	fffffc01 	.word	0xfffffc01
 8000bd0:	08004850 	.word	0x08004850
 8000bd4:	000003ff 	.word	0x000003ff
 8000bd8:	feffffff 	.word	0xfeffffff
 8000bdc:	000007fe 	.word	0x000007fe
 8000be0:	800fffff 	.word	0x800fffff
 8000be4:	fffffc0d 	.word	0xfffffc0d
 8000be8:	fffff801 	.word	0xfffff801
 8000bec:	000003f3 	.word	0x000003f3
 8000bf0:	45d9      	cmp	r9, fp
 8000bf2:	d900      	bls.n	8000bf6 <__aeabi_ddiv+0x2aa>
 8000bf4:	e0cb      	b.n	8000d8e <__aeabi_ddiv+0x442>
 8000bf6:	d100      	bne.n	8000bfa <__aeabi_ddiv+0x2ae>
 8000bf8:	e0c6      	b.n	8000d88 <__aeabi_ddiv+0x43c>
 8000bfa:	003c      	movs	r4, r7
 8000bfc:	4648      	mov	r0, r9
 8000bfe:	2700      	movs	r7, #0
 8000c00:	9b00      	ldr	r3, [sp, #0]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	9300      	str	r3, [sp, #0]
 8000c06:	465b      	mov	r3, fp
 8000c08:	0e16      	lsrs	r6, r2, #24
 8000c0a:	021b      	lsls	r3, r3, #8
 8000c0c:	431e      	orrs	r6, r3
 8000c0e:	0213      	lsls	r3, r2, #8
 8000c10:	4698      	mov	r8, r3
 8000c12:	0433      	lsls	r3, r6, #16
 8000c14:	0c1b      	lsrs	r3, r3, #16
 8000c16:	4699      	mov	r9, r3
 8000c18:	0c31      	lsrs	r1, r6, #16
 8000c1a:	9101      	str	r1, [sp, #4]
 8000c1c:	f7ff fafa 	bl	8000214 <__aeabi_uidivmod>
 8000c20:	464a      	mov	r2, r9
 8000c22:	4342      	muls	r2, r0
 8000c24:	040b      	lsls	r3, r1, #16
 8000c26:	0c21      	lsrs	r1, r4, #16
 8000c28:	0005      	movs	r5, r0
 8000c2a:	4319      	orrs	r1, r3
 8000c2c:	428a      	cmp	r2, r1
 8000c2e:	d907      	bls.n	8000c40 <__aeabi_ddiv+0x2f4>
 8000c30:	1989      	adds	r1, r1, r6
 8000c32:	3d01      	subs	r5, #1
 8000c34:	428e      	cmp	r6, r1
 8000c36:	d803      	bhi.n	8000c40 <__aeabi_ddiv+0x2f4>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	d901      	bls.n	8000c40 <__aeabi_ddiv+0x2f4>
 8000c3c:	1e85      	subs	r5, r0, #2
 8000c3e:	1989      	adds	r1, r1, r6
 8000c40:	1a88      	subs	r0, r1, r2
 8000c42:	9901      	ldr	r1, [sp, #4]
 8000c44:	f7ff fae6 	bl	8000214 <__aeabi_uidivmod>
 8000c48:	0409      	lsls	r1, r1, #16
 8000c4a:	468c      	mov	ip, r1
 8000c4c:	464a      	mov	r2, r9
 8000c4e:	0421      	lsls	r1, r4, #16
 8000c50:	4664      	mov	r4, ip
 8000c52:	4342      	muls	r2, r0
 8000c54:	0c09      	lsrs	r1, r1, #16
 8000c56:	0003      	movs	r3, r0
 8000c58:	4321      	orrs	r1, r4
 8000c5a:	428a      	cmp	r2, r1
 8000c5c:	d904      	bls.n	8000c68 <__aeabi_ddiv+0x31c>
 8000c5e:	1989      	adds	r1, r1, r6
 8000c60:	3b01      	subs	r3, #1
 8000c62:	428e      	cmp	r6, r1
 8000c64:	d800      	bhi.n	8000c68 <__aeabi_ddiv+0x31c>
 8000c66:	e0f1      	b.n	8000e4c <__aeabi_ddiv+0x500>
 8000c68:	042d      	lsls	r5, r5, #16
 8000c6a:	431d      	orrs	r5, r3
 8000c6c:	46ab      	mov	fp, r5
 8000c6e:	4643      	mov	r3, r8
 8000c70:	1a89      	subs	r1, r1, r2
 8000c72:	4642      	mov	r2, r8
 8000c74:	0c28      	lsrs	r0, r5, #16
 8000c76:	0412      	lsls	r2, r2, #16
 8000c78:	0c1d      	lsrs	r5, r3, #16
 8000c7a:	465b      	mov	r3, fp
 8000c7c:	0c14      	lsrs	r4, r2, #16
 8000c7e:	0022      	movs	r2, r4
 8000c80:	041b      	lsls	r3, r3, #16
 8000c82:	0c1b      	lsrs	r3, r3, #16
 8000c84:	435a      	muls	r2, r3
 8000c86:	9403      	str	r4, [sp, #12]
 8000c88:	436b      	muls	r3, r5
 8000c8a:	4344      	muls	r4, r0
 8000c8c:	9502      	str	r5, [sp, #8]
 8000c8e:	4368      	muls	r0, r5
 8000c90:	191b      	adds	r3, r3, r4
 8000c92:	0c15      	lsrs	r5, r2, #16
 8000c94:	18eb      	adds	r3, r5, r3
 8000c96:	429c      	cmp	r4, r3
 8000c98:	d903      	bls.n	8000ca2 <__aeabi_ddiv+0x356>
 8000c9a:	2480      	movs	r4, #128	; 0x80
 8000c9c:	0264      	lsls	r4, r4, #9
 8000c9e:	46a4      	mov	ip, r4
 8000ca0:	4460      	add	r0, ip
 8000ca2:	0c1c      	lsrs	r4, r3, #16
 8000ca4:	0415      	lsls	r5, r2, #16
 8000ca6:	041b      	lsls	r3, r3, #16
 8000ca8:	0c2d      	lsrs	r5, r5, #16
 8000caa:	1820      	adds	r0, r4, r0
 8000cac:	195d      	adds	r5, r3, r5
 8000cae:	4281      	cmp	r1, r0
 8000cb0:	d377      	bcc.n	8000da2 <__aeabi_ddiv+0x456>
 8000cb2:	d073      	beq.n	8000d9c <__aeabi_ddiv+0x450>
 8000cb4:	1a0c      	subs	r4, r1, r0
 8000cb6:	4aa2      	ldr	r2, [pc, #648]	; (8000f40 <__aeabi_ddiv+0x5f4>)
 8000cb8:	1b7d      	subs	r5, r7, r5
 8000cba:	42af      	cmp	r7, r5
 8000cbc:	41bf      	sbcs	r7, r7
 8000cbe:	4694      	mov	ip, r2
 8000cc0:	9b00      	ldr	r3, [sp, #0]
 8000cc2:	427f      	negs	r7, r7
 8000cc4:	4463      	add	r3, ip
 8000cc6:	1be0      	subs	r0, r4, r7
 8000cc8:	001c      	movs	r4, r3
 8000cca:	4286      	cmp	r6, r0
 8000ccc:	d100      	bne.n	8000cd0 <__aeabi_ddiv+0x384>
 8000cce:	e0db      	b.n	8000e88 <__aeabi_ddiv+0x53c>
 8000cd0:	9901      	ldr	r1, [sp, #4]
 8000cd2:	f7ff fa9f 	bl	8000214 <__aeabi_uidivmod>
 8000cd6:	464a      	mov	r2, r9
 8000cd8:	4342      	muls	r2, r0
 8000cda:	040b      	lsls	r3, r1, #16
 8000cdc:	0c29      	lsrs	r1, r5, #16
 8000cde:	0007      	movs	r7, r0
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	428a      	cmp	r2, r1
 8000ce4:	d907      	bls.n	8000cf6 <__aeabi_ddiv+0x3aa>
 8000ce6:	1989      	adds	r1, r1, r6
 8000ce8:	3f01      	subs	r7, #1
 8000cea:	428e      	cmp	r6, r1
 8000cec:	d803      	bhi.n	8000cf6 <__aeabi_ddiv+0x3aa>
 8000cee:	428a      	cmp	r2, r1
 8000cf0:	d901      	bls.n	8000cf6 <__aeabi_ddiv+0x3aa>
 8000cf2:	1e87      	subs	r7, r0, #2
 8000cf4:	1989      	adds	r1, r1, r6
 8000cf6:	1a88      	subs	r0, r1, r2
 8000cf8:	9901      	ldr	r1, [sp, #4]
 8000cfa:	f7ff fa8b 	bl	8000214 <__aeabi_uidivmod>
 8000cfe:	0409      	lsls	r1, r1, #16
 8000d00:	464a      	mov	r2, r9
 8000d02:	4689      	mov	r9, r1
 8000d04:	0429      	lsls	r1, r5, #16
 8000d06:	464d      	mov	r5, r9
 8000d08:	4342      	muls	r2, r0
 8000d0a:	0c09      	lsrs	r1, r1, #16
 8000d0c:	0003      	movs	r3, r0
 8000d0e:	4329      	orrs	r1, r5
 8000d10:	428a      	cmp	r2, r1
 8000d12:	d907      	bls.n	8000d24 <__aeabi_ddiv+0x3d8>
 8000d14:	1989      	adds	r1, r1, r6
 8000d16:	3b01      	subs	r3, #1
 8000d18:	428e      	cmp	r6, r1
 8000d1a:	d803      	bhi.n	8000d24 <__aeabi_ddiv+0x3d8>
 8000d1c:	428a      	cmp	r2, r1
 8000d1e:	d901      	bls.n	8000d24 <__aeabi_ddiv+0x3d8>
 8000d20:	1e83      	subs	r3, r0, #2
 8000d22:	1989      	adds	r1, r1, r6
 8000d24:	043f      	lsls	r7, r7, #16
 8000d26:	1a89      	subs	r1, r1, r2
 8000d28:	003a      	movs	r2, r7
 8000d2a:	9f03      	ldr	r7, [sp, #12]
 8000d2c:	431a      	orrs	r2, r3
 8000d2e:	0038      	movs	r0, r7
 8000d30:	0413      	lsls	r3, r2, #16
 8000d32:	0c1b      	lsrs	r3, r3, #16
 8000d34:	4358      	muls	r0, r3
 8000d36:	4681      	mov	r9, r0
 8000d38:	9802      	ldr	r0, [sp, #8]
 8000d3a:	0c15      	lsrs	r5, r2, #16
 8000d3c:	436f      	muls	r7, r5
 8000d3e:	4343      	muls	r3, r0
 8000d40:	4345      	muls	r5, r0
 8000d42:	4648      	mov	r0, r9
 8000d44:	0c00      	lsrs	r0, r0, #16
 8000d46:	4684      	mov	ip, r0
 8000d48:	19db      	adds	r3, r3, r7
 8000d4a:	4463      	add	r3, ip
 8000d4c:	429f      	cmp	r7, r3
 8000d4e:	d903      	bls.n	8000d58 <__aeabi_ddiv+0x40c>
 8000d50:	2080      	movs	r0, #128	; 0x80
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	4684      	mov	ip, r0
 8000d56:	4465      	add	r5, ip
 8000d58:	4648      	mov	r0, r9
 8000d5a:	0c1f      	lsrs	r7, r3, #16
 8000d5c:	0400      	lsls	r0, r0, #16
 8000d5e:	041b      	lsls	r3, r3, #16
 8000d60:	0c00      	lsrs	r0, r0, #16
 8000d62:	197d      	adds	r5, r7, r5
 8000d64:	1818      	adds	r0, r3, r0
 8000d66:	42a9      	cmp	r1, r5
 8000d68:	d200      	bcs.n	8000d6c <__aeabi_ddiv+0x420>
 8000d6a:	e084      	b.n	8000e76 <__aeabi_ddiv+0x52a>
 8000d6c:	d100      	bne.n	8000d70 <__aeabi_ddiv+0x424>
 8000d6e:	e07f      	b.n	8000e70 <__aeabi_ddiv+0x524>
 8000d70:	2301      	movs	r3, #1
 8000d72:	431a      	orrs	r2, r3
 8000d74:	e657      	b.n	8000a26 <__aeabi_ddiv+0xda>
 8000d76:	2380      	movs	r3, #128	; 0x80
 8000d78:	464a      	mov	r2, r9
 8000d7a:	031b      	lsls	r3, r3, #12
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	031b      	lsls	r3, r3, #12
 8000d80:	0b1b      	lsrs	r3, r3, #12
 8000d82:	46aa      	mov	sl, r5
 8000d84:	4a6f      	ldr	r2, [pc, #444]	; (8000f44 <__aeabi_ddiv+0x5f8>)
 8000d86:	e66f      	b.n	8000a68 <__aeabi_ddiv+0x11c>
 8000d88:	42ba      	cmp	r2, r7
 8000d8a:	d900      	bls.n	8000d8e <__aeabi_ddiv+0x442>
 8000d8c:	e735      	b.n	8000bfa <__aeabi_ddiv+0x2ae>
 8000d8e:	464b      	mov	r3, r9
 8000d90:	07dc      	lsls	r4, r3, #31
 8000d92:	0858      	lsrs	r0, r3, #1
 8000d94:	087b      	lsrs	r3, r7, #1
 8000d96:	431c      	orrs	r4, r3
 8000d98:	07ff      	lsls	r7, r7, #31
 8000d9a:	e734      	b.n	8000c06 <__aeabi_ddiv+0x2ba>
 8000d9c:	2400      	movs	r4, #0
 8000d9e:	42af      	cmp	r7, r5
 8000da0:	d289      	bcs.n	8000cb6 <__aeabi_ddiv+0x36a>
 8000da2:	4447      	add	r7, r8
 8000da4:	4547      	cmp	r7, r8
 8000da6:	41a4      	sbcs	r4, r4
 8000da8:	465b      	mov	r3, fp
 8000daa:	4264      	negs	r4, r4
 8000dac:	19a4      	adds	r4, r4, r6
 8000dae:	1864      	adds	r4, r4, r1
 8000db0:	3b01      	subs	r3, #1
 8000db2:	42a6      	cmp	r6, r4
 8000db4:	d21e      	bcs.n	8000df4 <__aeabi_ddiv+0x4a8>
 8000db6:	42a0      	cmp	r0, r4
 8000db8:	d86d      	bhi.n	8000e96 <__aeabi_ddiv+0x54a>
 8000dba:	d100      	bne.n	8000dbe <__aeabi_ddiv+0x472>
 8000dbc:	e0b6      	b.n	8000f2c <__aeabi_ddiv+0x5e0>
 8000dbe:	1a24      	subs	r4, r4, r0
 8000dc0:	469b      	mov	fp, r3
 8000dc2:	e778      	b.n	8000cb6 <__aeabi_ddiv+0x36a>
 8000dc4:	0003      	movs	r3, r0
 8000dc6:	465a      	mov	r2, fp
 8000dc8:	3b28      	subs	r3, #40	; 0x28
 8000dca:	409a      	lsls	r2, r3
 8000dcc:	2700      	movs	r7, #0
 8000dce:	4691      	mov	r9, r2
 8000dd0:	e688      	b.n	8000ae4 <__aeabi_ddiv+0x198>
 8000dd2:	4658      	mov	r0, fp
 8000dd4:	f000 ffda 	bl	8001d8c <__clzsi2>
 8000dd8:	3020      	adds	r0, #32
 8000dda:	e672      	b.n	8000ac2 <__aeabi_ddiv+0x176>
 8000ddc:	0003      	movs	r3, r0
 8000dde:	4652      	mov	r2, sl
 8000de0:	3b28      	subs	r3, #40	; 0x28
 8000de2:	409a      	lsls	r2, r3
 8000de4:	4693      	mov	fp, r2
 8000de6:	2200      	movs	r2, #0
 8000de8:	e6b4      	b.n	8000b54 <__aeabi_ddiv+0x208>
 8000dea:	4650      	mov	r0, sl
 8000dec:	f000 ffce 	bl	8001d8c <__clzsi2>
 8000df0:	3020      	adds	r0, #32
 8000df2:	e69a      	b.n	8000b2a <__aeabi_ddiv+0x1de>
 8000df4:	42a6      	cmp	r6, r4
 8000df6:	d1e2      	bne.n	8000dbe <__aeabi_ddiv+0x472>
 8000df8:	45b8      	cmp	r8, r7
 8000dfa:	d9dc      	bls.n	8000db6 <__aeabi_ddiv+0x46a>
 8000dfc:	1a34      	subs	r4, r6, r0
 8000dfe:	469b      	mov	fp, r3
 8000e00:	e759      	b.n	8000cb6 <__aeabi_ddiv+0x36a>
 8000e02:	2b1f      	cmp	r3, #31
 8000e04:	dc65      	bgt.n	8000ed2 <__aeabi_ddiv+0x586>
 8000e06:	4c50      	ldr	r4, [pc, #320]	; (8000f48 <__aeabi_ddiv+0x5fc>)
 8000e08:	9900      	ldr	r1, [sp, #0]
 8000e0a:	46a4      	mov	ip, r4
 8000e0c:	465c      	mov	r4, fp
 8000e0e:	4461      	add	r1, ip
 8000e10:	0008      	movs	r0, r1
 8000e12:	408c      	lsls	r4, r1
 8000e14:	0011      	movs	r1, r2
 8000e16:	4082      	lsls	r2, r0
 8000e18:	40d9      	lsrs	r1, r3
 8000e1a:	1e50      	subs	r0, r2, #1
 8000e1c:	4182      	sbcs	r2, r0
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	4314      	orrs	r4, r2
 8000e22:	465a      	mov	r2, fp
 8000e24:	40da      	lsrs	r2, r3
 8000e26:	0013      	movs	r3, r2
 8000e28:	0762      	lsls	r2, r4, #29
 8000e2a:	d009      	beq.n	8000e40 <__aeabi_ddiv+0x4f4>
 8000e2c:	220f      	movs	r2, #15
 8000e2e:	4022      	ands	r2, r4
 8000e30:	2a04      	cmp	r2, #4
 8000e32:	d005      	beq.n	8000e40 <__aeabi_ddiv+0x4f4>
 8000e34:	0022      	movs	r2, r4
 8000e36:	1d14      	adds	r4, r2, #4
 8000e38:	4294      	cmp	r4, r2
 8000e3a:	4189      	sbcs	r1, r1
 8000e3c:	4249      	negs	r1, r1
 8000e3e:	185b      	adds	r3, r3, r1
 8000e40:	021a      	lsls	r2, r3, #8
 8000e42:	d562      	bpl.n	8000f0a <__aeabi_ddiv+0x5be>
 8000e44:	2201      	movs	r2, #1
 8000e46:	2300      	movs	r3, #0
 8000e48:	2700      	movs	r7, #0
 8000e4a:	e60d      	b.n	8000a68 <__aeabi_ddiv+0x11c>
 8000e4c:	428a      	cmp	r2, r1
 8000e4e:	d800      	bhi.n	8000e52 <__aeabi_ddiv+0x506>
 8000e50:	e70a      	b.n	8000c68 <__aeabi_ddiv+0x31c>
 8000e52:	1e83      	subs	r3, r0, #2
 8000e54:	1989      	adds	r1, r1, r6
 8000e56:	e707      	b.n	8000c68 <__aeabi_ddiv+0x31c>
 8000e58:	230f      	movs	r3, #15
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	2b04      	cmp	r3, #4
 8000e5e:	d100      	bne.n	8000e62 <__aeabi_ddiv+0x516>
 8000e60:	e5e6      	b.n	8000a30 <__aeabi_ddiv+0xe4>
 8000e62:	1d17      	adds	r7, r2, #4
 8000e64:	4297      	cmp	r7, r2
 8000e66:	4192      	sbcs	r2, r2
 8000e68:	4253      	negs	r3, r2
 8000e6a:	449b      	add	fp, r3
 8000e6c:	08fa      	lsrs	r2, r7, #3
 8000e6e:	e5e0      	b.n	8000a32 <__aeabi_ddiv+0xe6>
 8000e70:	2800      	cmp	r0, #0
 8000e72:	d100      	bne.n	8000e76 <__aeabi_ddiv+0x52a>
 8000e74:	e5d7      	b.n	8000a26 <__aeabi_ddiv+0xda>
 8000e76:	1871      	adds	r1, r6, r1
 8000e78:	1e53      	subs	r3, r2, #1
 8000e7a:	42b1      	cmp	r1, r6
 8000e7c:	d327      	bcc.n	8000ece <__aeabi_ddiv+0x582>
 8000e7e:	42a9      	cmp	r1, r5
 8000e80:	d315      	bcc.n	8000eae <__aeabi_ddiv+0x562>
 8000e82:	d058      	beq.n	8000f36 <__aeabi_ddiv+0x5ea>
 8000e84:	001a      	movs	r2, r3
 8000e86:	e773      	b.n	8000d70 <__aeabi_ddiv+0x424>
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	dc00      	bgt.n	8000e8e <__aeabi_ddiv+0x542>
 8000e8c:	e604      	b.n	8000a98 <__aeabi_ddiv+0x14c>
 8000e8e:	2301      	movs	r3, #1
 8000e90:	2200      	movs	r2, #0
 8000e92:	449b      	add	fp, r3
 8000e94:	e5cd      	b.n	8000a32 <__aeabi_ddiv+0xe6>
 8000e96:	2302      	movs	r3, #2
 8000e98:	4447      	add	r7, r8
 8000e9a:	4547      	cmp	r7, r8
 8000e9c:	4189      	sbcs	r1, r1
 8000e9e:	425b      	negs	r3, r3
 8000ea0:	469c      	mov	ip, r3
 8000ea2:	4249      	negs	r1, r1
 8000ea4:	1989      	adds	r1, r1, r6
 8000ea6:	190c      	adds	r4, r1, r4
 8000ea8:	44e3      	add	fp, ip
 8000eaa:	1a24      	subs	r4, r4, r0
 8000eac:	e703      	b.n	8000cb6 <__aeabi_ddiv+0x36a>
 8000eae:	4643      	mov	r3, r8
 8000eb0:	005f      	lsls	r7, r3, #1
 8000eb2:	4547      	cmp	r7, r8
 8000eb4:	419b      	sbcs	r3, r3
 8000eb6:	46b8      	mov	r8, r7
 8000eb8:	425b      	negs	r3, r3
 8000eba:	199e      	adds	r6, r3, r6
 8000ebc:	3a02      	subs	r2, #2
 8000ebe:	1989      	adds	r1, r1, r6
 8000ec0:	42a9      	cmp	r1, r5
 8000ec2:	d000      	beq.n	8000ec6 <__aeabi_ddiv+0x57a>
 8000ec4:	e754      	b.n	8000d70 <__aeabi_ddiv+0x424>
 8000ec6:	4540      	cmp	r0, r8
 8000ec8:	d000      	beq.n	8000ecc <__aeabi_ddiv+0x580>
 8000eca:	e751      	b.n	8000d70 <__aeabi_ddiv+0x424>
 8000ecc:	e5ab      	b.n	8000a26 <__aeabi_ddiv+0xda>
 8000ece:	001a      	movs	r2, r3
 8000ed0:	e7f6      	b.n	8000ec0 <__aeabi_ddiv+0x574>
 8000ed2:	211f      	movs	r1, #31
 8000ed4:	465f      	mov	r7, fp
 8000ed6:	4249      	negs	r1, r1
 8000ed8:	1b0c      	subs	r4, r1, r4
 8000eda:	40e7      	lsrs	r7, r4
 8000edc:	2b20      	cmp	r3, #32
 8000ede:	d007      	beq.n	8000ef0 <__aeabi_ddiv+0x5a4>
 8000ee0:	491a      	ldr	r1, [pc, #104]	; (8000f4c <__aeabi_ddiv+0x600>)
 8000ee2:	9b00      	ldr	r3, [sp, #0]
 8000ee4:	468c      	mov	ip, r1
 8000ee6:	4463      	add	r3, ip
 8000ee8:	0018      	movs	r0, r3
 8000eea:	465b      	mov	r3, fp
 8000eec:	4083      	lsls	r3, r0
 8000eee:	431a      	orrs	r2, r3
 8000ef0:	1e50      	subs	r0, r2, #1
 8000ef2:	4182      	sbcs	r2, r0
 8000ef4:	433a      	orrs	r2, r7
 8000ef6:	2707      	movs	r7, #7
 8000ef8:	2300      	movs	r3, #0
 8000efa:	4017      	ands	r7, r2
 8000efc:	d009      	beq.n	8000f12 <__aeabi_ddiv+0x5c6>
 8000efe:	210f      	movs	r1, #15
 8000f00:	2300      	movs	r3, #0
 8000f02:	4011      	ands	r1, r2
 8000f04:	0014      	movs	r4, r2
 8000f06:	2904      	cmp	r1, #4
 8000f08:	d195      	bne.n	8000e36 <__aeabi_ddiv+0x4ea>
 8000f0a:	0022      	movs	r2, r4
 8000f0c:	075f      	lsls	r7, r3, #29
 8000f0e:	025b      	lsls	r3, r3, #9
 8000f10:	0b1b      	lsrs	r3, r3, #12
 8000f12:	08d2      	lsrs	r2, r2, #3
 8000f14:	4317      	orrs	r7, r2
 8000f16:	2200      	movs	r2, #0
 8000f18:	e5a6      	b.n	8000a68 <__aeabi_ddiv+0x11c>
 8000f1a:	2380      	movs	r3, #128	; 0x80
 8000f1c:	4659      	mov	r1, fp
 8000f1e:	031b      	lsls	r3, r3, #12
 8000f20:	430b      	orrs	r3, r1
 8000f22:	031b      	lsls	r3, r3, #12
 8000f24:	0017      	movs	r7, r2
 8000f26:	0b1b      	lsrs	r3, r3, #12
 8000f28:	4a06      	ldr	r2, [pc, #24]	; (8000f44 <__aeabi_ddiv+0x5f8>)
 8000f2a:	e59d      	b.n	8000a68 <__aeabi_ddiv+0x11c>
 8000f2c:	42bd      	cmp	r5, r7
 8000f2e:	d8b2      	bhi.n	8000e96 <__aeabi_ddiv+0x54a>
 8000f30:	469b      	mov	fp, r3
 8000f32:	2400      	movs	r4, #0
 8000f34:	e6bf      	b.n	8000cb6 <__aeabi_ddiv+0x36a>
 8000f36:	4580      	cmp	r8, r0
 8000f38:	d3b9      	bcc.n	8000eae <__aeabi_ddiv+0x562>
 8000f3a:	001a      	movs	r2, r3
 8000f3c:	e7c3      	b.n	8000ec6 <__aeabi_ddiv+0x57a>
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	000003ff 	.word	0x000003ff
 8000f44:	000007ff 	.word	0x000007ff
 8000f48:	0000041e 	.word	0x0000041e
 8000f4c:	0000043e 	.word	0x0000043e

08000f50 <__aeabi_dmul>:
 8000f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f52:	4657      	mov	r7, sl
 8000f54:	46de      	mov	lr, fp
 8000f56:	464e      	mov	r6, r9
 8000f58:	4645      	mov	r5, r8
 8000f5a:	b5e0      	push	{r5, r6, r7, lr}
 8000f5c:	4683      	mov	fp, r0
 8000f5e:	0006      	movs	r6, r0
 8000f60:	030f      	lsls	r7, r1, #12
 8000f62:	0048      	lsls	r0, r1, #1
 8000f64:	b087      	sub	sp, #28
 8000f66:	4692      	mov	sl, r2
 8000f68:	001d      	movs	r5, r3
 8000f6a:	0b3f      	lsrs	r7, r7, #12
 8000f6c:	0d40      	lsrs	r0, r0, #21
 8000f6e:	0fcc      	lsrs	r4, r1, #31
 8000f70:	2800      	cmp	r0, #0
 8000f72:	d100      	bne.n	8000f76 <__aeabi_dmul+0x26>
 8000f74:	e06f      	b.n	8001056 <__aeabi_dmul+0x106>
 8000f76:	4bde      	ldr	r3, [pc, #888]	; (80012f0 <__aeabi_dmul+0x3a0>)
 8000f78:	4298      	cmp	r0, r3
 8000f7a:	d038      	beq.n	8000fee <__aeabi_dmul+0x9e>
 8000f7c:	2380      	movs	r3, #128	; 0x80
 8000f7e:	00ff      	lsls	r7, r7, #3
 8000f80:	041b      	lsls	r3, r3, #16
 8000f82:	431f      	orrs	r7, r3
 8000f84:	0f73      	lsrs	r3, r6, #29
 8000f86:	433b      	orrs	r3, r7
 8000f88:	9301      	str	r3, [sp, #4]
 8000f8a:	4bda      	ldr	r3, [pc, #872]	; (80012f4 <__aeabi_dmul+0x3a4>)
 8000f8c:	2700      	movs	r7, #0
 8000f8e:	4699      	mov	r9, r3
 8000f90:	2300      	movs	r3, #0
 8000f92:	469b      	mov	fp, r3
 8000f94:	00f6      	lsls	r6, r6, #3
 8000f96:	4481      	add	r9, r0
 8000f98:	032b      	lsls	r3, r5, #12
 8000f9a:	0069      	lsls	r1, r5, #1
 8000f9c:	0b1b      	lsrs	r3, r3, #12
 8000f9e:	4652      	mov	r2, sl
 8000fa0:	4698      	mov	r8, r3
 8000fa2:	0d49      	lsrs	r1, r1, #21
 8000fa4:	0fed      	lsrs	r5, r5, #31
 8000fa6:	2900      	cmp	r1, #0
 8000fa8:	d100      	bne.n	8000fac <__aeabi_dmul+0x5c>
 8000faa:	e085      	b.n	80010b8 <__aeabi_dmul+0x168>
 8000fac:	4bd0      	ldr	r3, [pc, #832]	; (80012f0 <__aeabi_dmul+0x3a0>)
 8000fae:	4299      	cmp	r1, r3
 8000fb0:	d100      	bne.n	8000fb4 <__aeabi_dmul+0x64>
 8000fb2:	e073      	b.n	800109c <__aeabi_dmul+0x14c>
 8000fb4:	4643      	mov	r3, r8
 8000fb6:	00da      	lsls	r2, r3, #3
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	041b      	lsls	r3, r3, #16
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	4652      	mov	r2, sl
 8000fc0:	48cc      	ldr	r0, [pc, #816]	; (80012f4 <__aeabi_dmul+0x3a4>)
 8000fc2:	0f52      	lsrs	r2, r2, #29
 8000fc4:	4684      	mov	ip, r0
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	4652      	mov	r2, sl
 8000fca:	2000      	movs	r0, #0
 8000fcc:	4461      	add	r1, ip
 8000fce:	00d2      	lsls	r2, r2, #3
 8000fd0:	4489      	add	r9, r1
 8000fd2:	0021      	movs	r1, r4
 8000fd4:	4069      	eors	r1, r5
 8000fd6:	9100      	str	r1, [sp, #0]
 8000fd8:	468c      	mov	ip, r1
 8000fda:	2101      	movs	r1, #1
 8000fdc:	4449      	add	r1, r9
 8000fde:	468a      	mov	sl, r1
 8000fe0:	2f0f      	cmp	r7, #15
 8000fe2:	d900      	bls.n	8000fe6 <__aeabi_dmul+0x96>
 8000fe4:	e090      	b.n	8001108 <__aeabi_dmul+0x1b8>
 8000fe6:	49c4      	ldr	r1, [pc, #784]	; (80012f8 <__aeabi_dmul+0x3a8>)
 8000fe8:	00bf      	lsls	r7, r7, #2
 8000fea:	59cf      	ldr	r7, [r1, r7]
 8000fec:	46bf      	mov	pc, r7
 8000fee:	465b      	mov	r3, fp
 8000ff0:	433b      	orrs	r3, r7
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	d000      	beq.n	8000ff8 <__aeabi_dmul+0xa8>
 8000ff6:	e16a      	b.n	80012ce <__aeabi_dmul+0x37e>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	2708      	movs	r7, #8
 8000ffc:	2600      	movs	r6, #0
 8000ffe:	4681      	mov	r9, r0
 8001000:	469b      	mov	fp, r3
 8001002:	e7c9      	b.n	8000f98 <__aeabi_dmul+0x48>
 8001004:	0032      	movs	r2, r6
 8001006:	4658      	mov	r0, fp
 8001008:	9b01      	ldr	r3, [sp, #4]
 800100a:	4661      	mov	r1, ip
 800100c:	9100      	str	r1, [sp, #0]
 800100e:	2802      	cmp	r0, #2
 8001010:	d100      	bne.n	8001014 <__aeabi_dmul+0xc4>
 8001012:	e075      	b.n	8001100 <__aeabi_dmul+0x1b0>
 8001014:	2803      	cmp	r0, #3
 8001016:	d100      	bne.n	800101a <__aeabi_dmul+0xca>
 8001018:	e1fe      	b.n	8001418 <__aeabi_dmul+0x4c8>
 800101a:	2801      	cmp	r0, #1
 800101c:	d000      	beq.n	8001020 <__aeabi_dmul+0xd0>
 800101e:	e12c      	b.n	800127a <__aeabi_dmul+0x32a>
 8001020:	2300      	movs	r3, #0
 8001022:	2700      	movs	r7, #0
 8001024:	2600      	movs	r6, #0
 8001026:	2500      	movs	r5, #0
 8001028:	033f      	lsls	r7, r7, #12
 800102a:	0d2a      	lsrs	r2, r5, #20
 800102c:	0b3f      	lsrs	r7, r7, #12
 800102e:	48b3      	ldr	r0, [pc, #716]	; (80012fc <__aeabi_dmul+0x3ac>)
 8001030:	0512      	lsls	r2, r2, #20
 8001032:	433a      	orrs	r2, r7
 8001034:	4002      	ands	r2, r0
 8001036:	051b      	lsls	r3, r3, #20
 8001038:	4313      	orrs	r3, r2
 800103a:	9a00      	ldr	r2, [sp, #0]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	07d1      	lsls	r1, r2, #31
 8001040:	085b      	lsrs	r3, r3, #1
 8001042:	430b      	orrs	r3, r1
 8001044:	0030      	movs	r0, r6
 8001046:	0019      	movs	r1, r3
 8001048:	b007      	add	sp, #28
 800104a:	bc3c      	pop	{r2, r3, r4, r5}
 800104c:	4690      	mov	r8, r2
 800104e:	4699      	mov	r9, r3
 8001050:	46a2      	mov	sl, r4
 8001052:	46ab      	mov	fp, r5
 8001054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001056:	465b      	mov	r3, fp
 8001058:	433b      	orrs	r3, r7
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	d100      	bne.n	8001060 <__aeabi_dmul+0x110>
 800105e:	e12f      	b.n	80012c0 <__aeabi_dmul+0x370>
 8001060:	2f00      	cmp	r7, #0
 8001062:	d100      	bne.n	8001066 <__aeabi_dmul+0x116>
 8001064:	e1a5      	b.n	80013b2 <__aeabi_dmul+0x462>
 8001066:	0038      	movs	r0, r7
 8001068:	f000 fe90 	bl	8001d8c <__clzsi2>
 800106c:	0003      	movs	r3, r0
 800106e:	3b0b      	subs	r3, #11
 8001070:	2b1c      	cmp	r3, #28
 8001072:	dd00      	ble.n	8001076 <__aeabi_dmul+0x126>
 8001074:	e196      	b.n	80013a4 <__aeabi_dmul+0x454>
 8001076:	221d      	movs	r2, #29
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	465a      	mov	r2, fp
 800107c:	0001      	movs	r1, r0
 800107e:	40da      	lsrs	r2, r3
 8001080:	465e      	mov	r6, fp
 8001082:	3908      	subs	r1, #8
 8001084:	408f      	lsls	r7, r1
 8001086:	0013      	movs	r3, r2
 8001088:	408e      	lsls	r6, r1
 800108a:	433b      	orrs	r3, r7
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	4b9c      	ldr	r3, [pc, #624]	; (8001300 <__aeabi_dmul+0x3b0>)
 8001090:	2700      	movs	r7, #0
 8001092:	1a1b      	subs	r3, r3, r0
 8001094:	4699      	mov	r9, r3
 8001096:	2300      	movs	r3, #0
 8001098:	469b      	mov	fp, r3
 800109a:	e77d      	b.n	8000f98 <__aeabi_dmul+0x48>
 800109c:	4641      	mov	r1, r8
 800109e:	4653      	mov	r3, sl
 80010a0:	430b      	orrs	r3, r1
 80010a2:	4993      	ldr	r1, [pc, #588]	; (80012f0 <__aeabi_dmul+0x3a0>)
 80010a4:	468c      	mov	ip, r1
 80010a6:	44e1      	add	r9, ip
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d000      	beq.n	80010ae <__aeabi_dmul+0x15e>
 80010ac:	e11a      	b.n	80012e4 <__aeabi_dmul+0x394>
 80010ae:	2202      	movs	r2, #2
 80010b0:	2002      	movs	r0, #2
 80010b2:	4317      	orrs	r7, r2
 80010b4:	2200      	movs	r2, #0
 80010b6:	e78c      	b.n	8000fd2 <__aeabi_dmul+0x82>
 80010b8:	4313      	orrs	r3, r2
 80010ba:	d100      	bne.n	80010be <__aeabi_dmul+0x16e>
 80010bc:	e10d      	b.n	80012da <__aeabi_dmul+0x38a>
 80010be:	4643      	mov	r3, r8
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d100      	bne.n	80010c6 <__aeabi_dmul+0x176>
 80010c4:	e181      	b.n	80013ca <__aeabi_dmul+0x47a>
 80010c6:	4640      	mov	r0, r8
 80010c8:	f000 fe60 	bl	8001d8c <__clzsi2>
 80010cc:	0002      	movs	r2, r0
 80010ce:	3a0b      	subs	r2, #11
 80010d0:	2a1c      	cmp	r2, #28
 80010d2:	dd00      	ble.n	80010d6 <__aeabi_dmul+0x186>
 80010d4:	e172      	b.n	80013bc <__aeabi_dmul+0x46c>
 80010d6:	0001      	movs	r1, r0
 80010d8:	4643      	mov	r3, r8
 80010da:	3908      	subs	r1, #8
 80010dc:	408b      	lsls	r3, r1
 80010de:	4698      	mov	r8, r3
 80010e0:	231d      	movs	r3, #29
 80010e2:	1a9a      	subs	r2, r3, r2
 80010e4:	4653      	mov	r3, sl
 80010e6:	40d3      	lsrs	r3, r2
 80010e8:	001a      	movs	r2, r3
 80010ea:	4643      	mov	r3, r8
 80010ec:	4313      	orrs	r3, r2
 80010ee:	4652      	mov	r2, sl
 80010f0:	408a      	lsls	r2, r1
 80010f2:	4649      	mov	r1, r9
 80010f4:	1a08      	subs	r0, r1, r0
 80010f6:	4982      	ldr	r1, [pc, #520]	; (8001300 <__aeabi_dmul+0x3b0>)
 80010f8:	4689      	mov	r9, r1
 80010fa:	4481      	add	r9, r0
 80010fc:	2000      	movs	r0, #0
 80010fe:	e768      	b.n	8000fd2 <__aeabi_dmul+0x82>
 8001100:	4b7b      	ldr	r3, [pc, #492]	; (80012f0 <__aeabi_dmul+0x3a0>)
 8001102:	2700      	movs	r7, #0
 8001104:	2600      	movs	r6, #0
 8001106:	e78e      	b.n	8001026 <__aeabi_dmul+0xd6>
 8001108:	0c14      	lsrs	r4, r2, #16
 800110a:	0412      	lsls	r2, r2, #16
 800110c:	0c12      	lsrs	r2, r2, #16
 800110e:	0011      	movs	r1, r2
 8001110:	0c37      	lsrs	r7, r6, #16
 8001112:	0436      	lsls	r6, r6, #16
 8001114:	0c35      	lsrs	r5, r6, #16
 8001116:	4379      	muls	r1, r7
 8001118:	0028      	movs	r0, r5
 800111a:	468c      	mov	ip, r1
 800111c:	002e      	movs	r6, r5
 800111e:	4360      	muls	r0, r4
 8001120:	4460      	add	r0, ip
 8001122:	4683      	mov	fp, r0
 8001124:	4356      	muls	r6, r2
 8001126:	0021      	movs	r1, r4
 8001128:	0c30      	lsrs	r0, r6, #16
 800112a:	4680      	mov	r8, r0
 800112c:	4658      	mov	r0, fp
 800112e:	4379      	muls	r1, r7
 8001130:	4440      	add	r0, r8
 8001132:	9102      	str	r1, [sp, #8]
 8001134:	4584      	cmp	ip, r0
 8001136:	d906      	bls.n	8001146 <__aeabi_dmul+0x1f6>
 8001138:	4688      	mov	r8, r1
 800113a:	2180      	movs	r1, #128	; 0x80
 800113c:	0249      	lsls	r1, r1, #9
 800113e:	468c      	mov	ip, r1
 8001140:	44e0      	add	r8, ip
 8001142:	4641      	mov	r1, r8
 8001144:	9102      	str	r1, [sp, #8]
 8001146:	0436      	lsls	r6, r6, #16
 8001148:	0c01      	lsrs	r1, r0, #16
 800114a:	0c36      	lsrs	r6, r6, #16
 800114c:	0400      	lsls	r0, r0, #16
 800114e:	468b      	mov	fp, r1
 8001150:	1981      	adds	r1, r0, r6
 8001152:	0c1e      	lsrs	r6, r3, #16
 8001154:	041b      	lsls	r3, r3, #16
 8001156:	0c1b      	lsrs	r3, r3, #16
 8001158:	9103      	str	r1, [sp, #12]
 800115a:	0019      	movs	r1, r3
 800115c:	4379      	muls	r1, r7
 800115e:	468c      	mov	ip, r1
 8001160:	0028      	movs	r0, r5
 8001162:	4375      	muls	r5, r6
 8001164:	4465      	add	r5, ip
 8001166:	46a8      	mov	r8, r5
 8001168:	4358      	muls	r0, r3
 800116a:	0c05      	lsrs	r5, r0, #16
 800116c:	4445      	add	r5, r8
 800116e:	4377      	muls	r7, r6
 8001170:	42a9      	cmp	r1, r5
 8001172:	d903      	bls.n	800117c <__aeabi_dmul+0x22c>
 8001174:	2180      	movs	r1, #128	; 0x80
 8001176:	0249      	lsls	r1, r1, #9
 8001178:	468c      	mov	ip, r1
 800117a:	4467      	add	r7, ip
 800117c:	0c29      	lsrs	r1, r5, #16
 800117e:	468c      	mov	ip, r1
 8001180:	0039      	movs	r1, r7
 8001182:	0400      	lsls	r0, r0, #16
 8001184:	0c00      	lsrs	r0, r0, #16
 8001186:	042d      	lsls	r5, r5, #16
 8001188:	182d      	adds	r5, r5, r0
 800118a:	4461      	add	r1, ip
 800118c:	44ab      	add	fp, r5
 800118e:	9105      	str	r1, [sp, #20]
 8001190:	4659      	mov	r1, fp
 8001192:	9104      	str	r1, [sp, #16]
 8001194:	9901      	ldr	r1, [sp, #4]
 8001196:	040f      	lsls	r7, r1, #16
 8001198:	0c3f      	lsrs	r7, r7, #16
 800119a:	0c08      	lsrs	r0, r1, #16
 800119c:	0039      	movs	r1, r7
 800119e:	4351      	muls	r1, r2
 80011a0:	4342      	muls	r2, r0
 80011a2:	4690      	mov	r8, r2
 80011a4:	0002      	movs	r2, r0
 80011a6:	468c      	mov	ip, r1
 80011a8:	0c09      	lsrs	r1, r1, #16
 80011aa:	468b      	mov	fp, r1
 80011ac:	4362      	muls	r2, r4
 80011ae:	437c      	muls	r4, r7
 80011b0:	4444      	add	r4, r8
 80011b2:	445c      	add	r4, fp
 80011b4:	45a0      	cmp	r8, r4
 80011b6:	d903      	bls.n	80011c0 <__aeabi_dmul+0x270>
 80011b8:	2180      	movs	r1, #128	; 0x80
 80011ba:	0249      	lsls	r1, r1, #9
 80011bc:	4688      	mov	r8, r1
 80011be:	4442      	add	r2, r8
 80011c0:	0c21      	lsrs	r1, r4, #16
 80011c2:	4688      	mov	r8, r1
 80011c4:	4661      	mov	r1, ip
 80011c6:	0409      	lsls	r1, r1, #16
 80011c8:	0c09      	lsrs	r1, r1, #16
 80011ca:	468c      	mov	ip, r1
 80011cc:	0039      	movs	r1, r7
 80011ce:	4359      	muls	r1, r3
 80011d0:	4343      	muls	r3, r0
 80011d2:	4370      	muls	r0, r6
 80011d4:	437e      	muls	r6, r7
 80011d6:	0c0f      	lsrs	r7, r1, #16
 80011d8:	18f6      	adds	r6, r6, r3
 80011da:	0424      	lsls	r4, r4, #16
 80011dc:	19be      	adds	r6, r7, r6
 80011de:	4464      	add	r4, ip
 80011e0:	4442      	add	r2, r8
 80011e2:	468c      	mov	ip, r1
 80011e4:	42b3      	cmp	r3, r6
 80011e6:	d903      	bls.n	80011f0 <__aeabi_dmul+0x2a0>
 80011e8:	2380      	movs	r3, #128	; 0x80
 80011ea:	025b      	lsls	r3, r3, #9
 80011ec:	4698      	mov	r8, r3
 80011ee:	4440      	add	r0, r8
 80011f0:	9b02      	ldr	r3, [sp, #8]
 80011f2:	4661      	mov	r1, ip
 80011f4:	4698      	mov	r8, r3
 80011f6:	9b04      	ldr	r3, [sp, #16]
 80011f8:	0437      	lsls	r7, r6, #16
 80011fa:	4443      	add	r3, r8
 80011fc:	469b      	mov	fp, r3
 80011fe:	45ab      	cmp	fp, r5
 8001200:	41ad      	sbcs	r5, r5
 8001202:	426b      	negs	r3, r5
 8001204:	040d      	lsls	r5, r1, #16
 8001206:	9905      	ldr	r1, [sp, #20]
 8001208:	0c2d      	lsrs	r5, r5, #16
 800120a:	468c      	mov	ip, r1
 800120c:	197f      	adds	r7, r7, r5
 800120e:	4467      	add	r7, ip
 8001210:	18fd      	adds	r5, r7, r3
 8001212:	46a8      	mov	r8, r5
 8001214:	465d      	mov	r5, fp
 8001216:	192d      	adds	r5, r5, r4
 8001218:	42a5      	cmp	r5, r4
 800121a:	41a4      	sbcs	r4, r4
 800121c:	4693      	mov	fp, r2
 800121e:	4264      	negs	r4, r4
 8001220:	46a4      	mov	ip, r4
 8001222:	44c3      	add	fp, r8
 8001224:	44dc      	add	ip, fp
 8001226:	428f      	cmp	r7, r1
 8001228:	41bf      	sbcs	r7, r7
 800122a:	4598      	cmp	r8, r3
 800122c:	419b      	sbcs	r3, r3
 800122e:	4593      	cmp	fp, r2
 8001230:	4192      	sbcs	r2, r2
 8001232:	45a4      	cmp	ip, r4
 8001234:	41a4      	sbcs	r4, r4
 8001236:	425b      	negs	r3, r3
 8001238:	427f      	negs	r7, r7
 800123a:	431f      	orrs	r7, r3
 800123c:	0c36      	lsrs	r6, r6, #16
 800123e:	4252      	negs	r2, r2
 8001240:	4264      	negs	r4, r4
 8001242:	19bf      	adds	r7, r7, r6
 8001244:	4322      	orrs	r2, r4
 8001246:	18bf      	adds	r7, r7, r2
 8001248:	4662      	mov	r2, ip
 800124a:	1838      	adds	r0, r7, r0
 800124c:	0243      	lsls	r3, r0, #9
 800124e:	0dd2      	lsrs	r2, r2, #23
 8001250:	9903      	ldr	r1, [sp, #12]
 8001252:	4313      	orrs	r3, r2
 8001254:	026a      	lsls	r2, r5, #9
 8001256:	430a      	orrs	r2, r1
 8001258:	1e50      	subs	r0, r2, #1
 800125a:	4182      	sbcs	r2, r0
 800125c:	4661      	mov	r1, ip
 800125e:	0ded      	lsrs	r5, r5, #23
 8001260:	432a      	orrs	r2, r5
 8001262:	024e      	lsls	r6, r1, #9
 8001264:	4332      	orrs	r2, r6
 8001266:	01d9      	lsls	r1, r3, #7
 8001268:	d400      	bmi.n	800126c <__aeabi_dmul+0x31c>
 800126a:	e0b3      	b.n	80013d4 <__aeabi_dmul+0x484>
 800126c:	2601      	movs	r6, #1
 800126e:	0850      	lsrs	r0, r2, #1
 8001270:	4032      	ands	r2, r6
 8001272:	4302      	orrs	r2, r0
 8001274:	07de      	lsls	r6, r3, #31
 8001276:	4332      	orrs	r2, r6
 8001278:	085b      	lsrs	r3, r3, #1
 800127a:	4c22      	ldr	r4, [pc, #136]	; (8001304 <__aeabi_dmul+0x3b4>)
 800127c:	4454      	add	r4, sl
 800127e:	2c00      	cmp	r4, #0
 8001280:	dd62      	ble.n	8001348 <__aeabi_dmul+0x3f8>
 8001282:	0751      	lsls	r1, r2, #29
 8001284:	d009      	beq.n	800129a <__aeabi_dmul+0x34a>
 8001286:	200f      	movs	r0, #15
 8001288:	4010      	ands	r0, r2
 800128a:	2804      	cmp	r0, #4
 800128c:	d005      	beq.n	800129a <__aeabi_dmul+0x34a>
 800128e:	1d10      	adds	r0, r2, #4
 8001290:	4290      	cmp	r0, r2
 8001292:	4192      	sbcs	r2, r2
 8001294:	4252      	negs	r2, r2
 8001296:	189b      	adds	r3, r3, r2
 8001298:	0002      	movs	r2, r0
 800129a:	01d9      	lsls	r1, r3, #7
 800129c:	d504      	bpl.n	80012a8 <__aeabi_dmul+0x358>
 800129e:	2480      	movs	r4, #128	; 0x80
 80012a0:	4819      	ldr	r0, [pc, #100]	; (8001308 <__aeabi_dmul+0x3b8>)
 80012a2:	00e4      	lsls	r4, r4, #3
 80012a4:	4003      	ands	r3, r0
 80012a6:	4454      	add	r4, sl
 80012a8:	4818      	ldr	r0, [pc, #96]	; (800130c <__aeabi_dmul+0x3bc>)
 80012aa:	4284      	cmp	r4, r0
 80012ac:	dd00      	ble.n	80012b0 <__aeabi_dmul+0x360>
 80012ae:	e727      	b.n	8001100 <__aeabi_dmul+0x1b0>
 80012b0:	075e      	lsls	r6, r3, #29
 80012b2:	025b      	lsls	r3, r3, #9
 80012b4:	08d2      	lsrs	r2, r2, #3
 80012b6:	0b1f      	lsrs	r7, r3, #12
 80012b8:	0563      	lsls	r3, r4, #21
 80012ba:	4316      	orrs	r6, r2
 80012bc:	0d5b      	lsrs	r3, r3, #21
 80012be:	e6b2      	b.n	8001026 <__aeabi_dmul+0xd6>
 80012c0:	2300      	movs	r3, #0
 80012c2:	4699      	mov	r9, r3
 80012c4:	3301      	adds	r3, #1
 80012c6:	2704      	movs	r7, #4
 80012c8:	2600      	movs	r6, #0
 80012ca:	469b      	mov	fp, r3
 80012cc:	e664      	b.n	8000f98 <__aeabi_dmul+0x48>
 80012ce:	2303      	movs	r3, #3
 80012d0:	9701      	str	r7, [sp, #4]
 80012d2:	4681      	mov	r9, r0
 80012d4:	270c      	movs	r7, #12
 80012d6:	469b      	mov	fp, r3
 80012d8:	e65e      	b.n	8000f98 <__aeabi_dmul+0x48>
 80012da:	2201      	movs	r2, #1
 80012dc:	2001      	movs	r0, #1
 80012de:	4317      	orrs	r7, r2
 80012e0:	2200      	movs	r2, #0
 80012e2:	e676      	b.n	8000fd2 <__aeabi_dmul+0x82>
 80012e4:	2303      	movs	r3, #3
 80012e6:	2003      	movs	r0, #3
 80012e8:	431f      	orrs	r7, r3
 80012ea:	4643      	mov	r3, r8
 80012ec:	e671      	b.n	8000fd2 <__aeabi_dmul+0x82>
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	000007ff 	.word	0x000007ff
 80012f4:	fffffc01 	.word	0xfffffc01
 80012f8:	08004890 	.word	0x08004890
 80012fc:	800fffff 	.word	0x800fffff
 8001300:	fffffc0d 	.word	0xfffffc0d
 8001304:	000003ff 	.word	0x000003ff
 8001308:	feffffff 	.word	0xfeffffff
 800130c:	000007fe 	.word	0x000007fe
 8001310:	2300      	movs	r3, #0
 8001312:	2780      	movs	r7, #128	; 0x80
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	033f      	lsls	r7, r7, #12
 8001318:	2600      	movs	r6, #0
 800131a:	4b43      	ldr	r3, [pc, #268]	; (8001428 <__aeabi_dmul+0x4d8>)
 800131c:	e683      	b.n	8001026 <__aeabi_dmul+0xd6>
 800131e:	9b01      	ldr	r3, [sp, #4]
 8001320:	0032      	movs	r2, r6
 8001322:	46a4      	mov	ip, r4
 8001324:	4658      	mov	r0, fp
 8001326:	e670      	b.n	800100a <__aeabi_dmul+0xba>
 8001328:	46ac      	mov	ip, r5
 800132a:	e66e      	b.n	800100a <__aeabi_dmul+0xba>
 800132c:	2780      	movs	r7, #128	; 0x80
 800132e:	9901      	ldr	r1, [sp, #4]
 8001330:	033f      	lsls	r7, r7, #12
 8001332:	4239      	tst	r1, r7
 8001334:	d02d      	beq.n	8001392 <__aeabi_dmul+0x442>
 8001336:	423b      	tst	r3, r7
 8001338:	d12b      	bne.n	8001392 <__aeabi_dmul+0x442>
 800133a:	431f      	orrs	r7, r3
 800133c:	033f      	lsls	r7, r7, #12
 800133e:	0b3f      	lsrs	r7, r7, #12
 8001340:	9500      	str	r5, [sp, #0]
 8001342:	0016      	movs	r6, r2
 8001344:	4b38      	ldr	r3, [pc, #224]	; (8001428 <__aeabi_dmul+0x4d8>)
 8001346:	e66e      	b.n	8001026 <__aeabi_dmul+0xd6>
 8001348:	2501      	movs	r5, #1
 800134a:	1b2d      	subs	r5, r5, r4
 800134c:	2d38      	cmp	r5, #56	; 0x38
 800134e:	dd00      	ble.n	8001352 <__aeabi_dmul+0x402>
 8001350:	e666      	b.n	8001020 <__aeabi_dmul+0xd0>
 8001352:	2d1f      	cmp	r5, #31
 8001354:	dc40      	bgt.n	80013d8 <__aeabi_dmul+0x488>
 8001356:	4835      	ldr	r0, [pc, #212]	; (800142c <__aeabi_dmul+0x4dc>)
 8001358:	001c      	movs	r4, r3
 800135a:	4450      	add	r0, sl
 800135c:	0016      	movs	r6, r2
 800135e:	4082      	lsls	r2, r0
 8001360:	4084      	lsls	r4, r0
 8001362:	40ee      	lsrs	r6, r5
 8001364:	1e50      	subs	r0, r2, #1
 8001366:	4182      	sbcs	r2, r0
 8001368:	4334      	orrs	r4, r6
 800136a:	4314      	orrs	r4, r2
 800136c:	40eb      	lsrs	r3, r5
 800136e:	0762      	lsls	r2, r4, #29
 8001370:	d009      	beq.n	8001386 <__aeabi_dmul+0x436>
 8001372:	220f      	movs	r2, #15
 8001374:	4022      	ands	r2, r4
 8001376:	2a04      	cmp	r2, #4
 8001378:	d005      	beq.n	8001386 <__aeabi_dmul+0x436>
 800137a:	0022      	movs	r2, r4
 800137c:	1d14      	adds	r4, r2, #4
 800137e:	4294      	cmp	r4, r2
 8001380:	4180      	sbcs	r0, r0
 8001382:	4240      	negs	r0, r0
 8001384:	181b      	adds	r3, r3, r0
 8001386:	021a      	lsls	r2, r3, #8
 8001388:	d53e      	bpl.n	8001408 <__aeabi_dmul+0x4b8>
 800138a:	2301      	movs	r3, #1
 800138c:	2700      	movs	r7, #0
 800138e:	2600      	movs	r6, #0
 8001390:	e649      	b.n	8001026 <__aeabi_dmul+0xd6>
 8001392:	2780      	movs	r7, #128	; 0x80
 8001394:	9b01      	ldr	r3, [sp, #4]
 8001396:	033f      	lsls	r7, r7, #12
 8001398:	431f      	orrs	r7, r3
 800139a:	033f      	lsls	r7, r7, #12
 800139c:	0b3f      	lsrs	r7, r7, #12
 800139e:	9400      	str	r4, [sp, #0]
 80013a0:	4b21      	ldr	r3, [pc, #132]	; (8001428 <__aeabi_dmul+0x4d8>)
 80013a2:	e640      	b.n	8001026 <__aeabi_dmul+0xd6>
 80013a4:	0003      	movs	r3, r0
 80013a6:	465a      	mov	r2, fp
 80013a8:	3b28      	subs	r3, #40	; 0x28
 80013aa:	409a      	lsls	r2, r3
 80013ac:	2600      	movs	r6, #0
 80013ae:	9201      	str	r2, [sp, #4]
 80013b0:	e66d      	b.n	800108e <__aeabi_dmul+0x13e>
 80013b2:	4658      	mov	r0, fp
 80013b4:	f000 fcea 	bl	8001d8c <__clzsi2>
 80013b8:	3020      	adds	r0, #32
 80013ba:	e657      	b.n	800106c <__aeabi_dmul+0x11c>
 80013bc:	0003      	movs	r3, r0
 80013be:	4652      	mov	r2, sl
 80013c0:	3b28      	subs	r3, #40	; 0x28
 80013c2:	409a      	lsls	r2, r3
 80013c4:	0013      	movs	r3, r2
 80013c6:	2200      	movs	r2, #0
 80013c8:	e693      	b.n	80010f2 <__aeabi_dmul+0x1a2>
 80013ca:	4650      	mov	r0, sl
 80013cc:	f000 fcde 	bl	8001d8c <__clzsi2>
 80013d0:	3020      	adds	r0, #32
 80013d2:	e67b      	b.n	80010cc <__aeabi_dmul+0x17c>
 80013d4:	46ca      	mov	sl, r9
 80013d6:	e750      	b.n	800127a <__aeabi_dmul+0x32a>
 80013d8:	201f      	movs	r0, #31
 80013da:	001e      	movs	r6, r3
 80013dc:	4240      	negs	r0, r0
 80013de:	1b04      	subs	r4, r0, r4
 80013e0:	40e6      	lsrs	r6, r4
 80013e2:	2d20      	cmp	r5, #32
 80013e4:	d003      	beq.n	80013ee <__aeabi_dmul+0x49e>
 80013e6:	4c12      	ldr	r4, [pc, #72]	; (8001430 <__aeabi_dmul+0x4e0>)
 80013e8:	4454      	add	r4, sl
 80013ea:	40a3      	lsls	r3, r4
 80013ec:	431a      	orrs	r2, r3
 80013ee:	1e50      	subs	r0, r2, #1
 80013f0:	4182      	sbcs	r2, r0
 80013f2:	4332      	orrs	r2, r6
 80013f4:	2607      	movs	r6, #7
 80013f6:	2700      	movs	r7, #0
 80013f8:	4016      	ands	r6, r2
 80013fa:	d009      	beq.n	8001410 <__aeabi_dmul+0x4c0>
 80013fc:	200f      	movs	r0, #15
 80013fe:	2300      	movs	r3, #0
 8001400:	4010      	ands	r0, r2
 8001402:	0014      	movs	r4, r2
 8001404:	2804      	cmp	r0, #4
 8001406:	d1b9      	bne.n	800137c <__aeabi_dmul+0x42c>
 8001408:	0022      	movs	r2, r4
 800140a:	075e      	lsls	r6, r3, #29
 800140c:	025b      	lsls	r3, r3, #9
 800140e:	0b1f      	lsrs	r7, r3, #12
 8001410:	08d2      	lsrs	r2, r2, #3
 8001412:	4316      	orrs	r6, r2
 8001414:	2300      	movs	r3, #0
 8001416:	e606      	b.n	8001026 <__aeabi_dmul+0xd6>
 8001418:	2780      	movs	r7, #128	; 0x80
 800141a:	033f      	lsls	r7, r7, #12
 800141c:	431f      	orrs	r7, r3
 800141e:	033f      	lsls	r7, r7, #12
 8001420:	0b3f      	lsrs	r7, r7, #12
 8001422:	0016      	movs	r6, r2
 8001424:	4b00      	ldr	r3, [pc, #0]	; (8001428 <__aeabi_dmul+0x4d8>)
 8001426:	e5fe      	b.n	8001026 <__aeabi_dmul+0xd6>
 8001428:	000007ff 	.word	0x000007ff
 800142c:	0000041e 	.word	0x0000041e
 8001430:	0000043e 	.word	0x0000043e

08001434 <__aeabi_dsub>:
 8001434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001436:	4657      	mov	r7, sl
 8001438:	464e      	mov	r6, r9
 800143a:	4645      	mov	r5, r8
 800143c:	46de      	mov	lr, fp
 800143e:	000c      	movs	r4, r1
 8001440:	0309      	lsls	r1, r1, #12
 8001442:	b5e0      	push	{r5, r6, r7, lr}
 8001444:	0a49      	lsrs	r1, r1, #9
 8001446:	0f46      	lsrs	r6, r0, #29
 8001448:	005f      	lsls	r7, r3, #1
 800144a:	4331      	orrs	r1, r6
 800144c:	031e      	lsls	r6, r3, #12
 800144e:	0fdb      	lsrs	r3, r3, #31
 8001450:	0a76      	lsrs	r6, r6, #9
 8001452:	469b      	mov	fp, r3
 8001454:	0f53      	lsrs	r3, r2, #29
 8001456:	4333      	orrs	r3, r6
 8001458:	4ec8      	ldr	r6, [pc, #800]	; (800177c <__aeabi_dsub+0x348>)
 800145a:	0065      	lsls	r5, r4, #1
 800145c:	00c0      	lsls	r0, r0, #3
 800145e:	0fe4      	lsrs	r4, r4, #31
 8001460:	00d2      	lsls	r2, r2, #3
 8001462:	0d6d      	lsrs	r5, r5, #21
 8001464:	46a2      	mov	sl, r4
 8001466:	4681      	mov	r9, r0
 8001468:	0d7f      	lsrs	r7, r7, #21
 800146a:	469c      	mov	ip, r3
 800146c:	4690      	mov	r8, r2
 800146e:	42b7      	cmp	r7, r6
 8001470:	d100      	bne.n	8001474 <__aeabi_dsub+0x40>
 8001472:	e0b9      	b.n	80015e8 <__aeabi_dsub+0x1b4>
 8001474:	465b      	mov	r3, fp
 8001476:	2601      	movs	r6, #1
 8001478:	4073      	eors	r3, r6
 800147a:	469b      	mov	fp, r3
 800147c:	1bee      	subs	r6, r5, r7
 800147e:	45a3      	cmp	fp, r4
 8001480:	d100      	bne.n	8001484 <__aeabi_dsub+0x50>
 8001482:	e083      	b.n	800158c <__aeabi_dsub+0x158>
 8001484:	2e00      	cmp	r6, #0
 8001486:	dd63      	ble.n	8001550 <__aeabi_dsub+0x11c>
 8001488:	2f00      	cmp	r7, #0
 800148a:	d000      	beq.n	800148e <__aeabi_dsub+0x5a>
 800148c:	e0b1      	b.n	80015f2 <__aeabi_dsub+0x1be>
 800148e:	4663      	mov	r3, ip
 8001490:	4313      	orrs	r3, r2
 8001492:	d100      	bne.n	8001496 <__aeabi_dsub+0x62>
 8001494:	e123      	b.n	80016de <__aeabi_dsub+0x2aa>
 8001496:	1e73      	subs	r3, r6, #1
 8001498:	2b00      	cmp	r3, #0
 800149a:	d000      	beq.n	800149e <__aeabi_dsub+0x6a>
 800149c:	e1ba      	b.n	8001814 <__aeabi_dsub+0x3e0>
 800149e:	1a86      	subs	r6, r0, r2
 80014a0:	4663      	mov	r3, ip
 80014a2:	42b0      	cmp	r0, r6
 80014a4:	4180      	sbcs	r0, r0
 80014a6:	2501      	movs	r5, #1
 80014a8:	1ac9      	subs	r1, r1, r3
 80014aa:	4240      	negs	r0, r0
 80014ac:	1a09      	subs	r1, r1, r0
 80014ae:	020b      	lsls	r3, r1, #8
 80014b0:	d400      	bmi.n	80014b4 <__aeabi_dsub+0x80>
 80014b2:	e147      	b.n	8001744 <__aeabi_dsub+0x310>
 80014b4:	0249      	lsls	r1, r1, #9
 80014b6:	0a4b      	lsrs	r3, r1, #9
 80014b8:	4698      	mov	r8, r3
 80014ba:	4643      	mov	r3, r8
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d100      	bne.n	80014c2 <__aeabi_dsub+0x8e>
 80014c0:	e189      	b.n	80017d6 <__aeabi_dsub+0x3a2>
 80014c2:	4640      	mov	r0, r8
 80014c4:	f000 fc62 	bl	8001d8c <__clzsi2>
 80014c8:	0003      	movs	r3, r0
 80014ca:	3b08      	subs	r3, #8
 80014cc:	2b1f      	cmp	r3, #31
 80014ce:	dd00      	ble.n	80014d2 <__aeabi_dsub+0x9e>
 80014d0:	e17c      	b.n	80017cc <__aeabi_dsub+0x398>
 80014d2:	2220      	movs	r2, #32
 80014d4:	0030      	movs	r0, r6
 80014d6:	1ad2      	subs	r2, r2, r3
 80014d8:	4641      	mov	r1, r8
 80014da:	40d0      	lsrs	r0, r2
 80014dc:	4099      	lsls	r1, r3
 80014de:	0002      	movs	r2, r0
 80014e0:	409e      	lsls	r6, r3
 80014e2:	430a      	orrs	r2, r1
 80014e4:	429d      	cmp	r5, r3
 80014e6:	dd00      	ble.n	80014ea <__aeabi_dsub+0xb6>
 80014e8:	e16a      	b.n	80017c0 <__aeabi_dsub+0x38c>
 80014ea:	1b5d      	subs	r5, r3, r5
 80014ec:	1c6b      	adds	r3, r5, #1
 80014ee:	2b1f      	cmp	r3, #31
 80014f0:	dd00      	ble.n	80014f4 <__aeabi_dsub+0xc0>
 80014f2:	e194      	b.n	800181e <__aeabi_dsub+0x3ea>
 80014f4:	2120      	movs	r1, #32
 80014f6:	0010      	movs	r0, r2
 80014f8:	0035      	movs	r5, r6
 80014fa:	1ac9      	subs	r1, r1, r3
 80014fc:	408e      	lsls	r6, r1
 80014fe:	40da      	lsrs	r2, r3
 8001500:	4088      	lsls	r0, r1
 8001502:	40dd      	lsrs	r5, r3
 8001504:	1e71      	subs	r1, r6, #1
 8001506:	418e      	sbcs	r6, r1
 8001508:	0011      	movs	r1, r2
 800150a:	2207      	movs	r2, #7
 800150c:	4328      	orrs	r0, r5
 800150e:	2500      	movs	r5, #0
 8001510:	4306      	orrs	r6, r0
 8001512:	4032      	ands	r2, r6
 8001514:	2a00      	cmp	r2, #0
 8001516:	d009      	beq.n	800152c <__aeabi_dsub+0xf8>
 8001518:	230f      	movs	r3, #15
 800151a:	4033      	ands	r3, r6
 800151c:	2b04      	cmp	r3, #4
 800151e:	d005      	beq.n	800152c <__aeabi_dsub+0xf8>
 8001520:	1d33      	adds	r3, r6, #4
 8001522:	42b3      	cmp	r3, r6
 8001524:	41b6      	sbcs	r6, r6
 8001526:	4276      	negs	r6, r6
 8001528:	1989      	adds	r1, r1, r6
 800152a:	001e      	movs	r6, r3
 800152c:	020b      	lsls	r3, r1, #8
 800152e:	d400      	bmi.n	8001532 <__aeabi_dsub+0xfe>
 8001530:	e23d      	b.n	80019ae <__aeabi_dsub+0x57a>
 8001532:	1c6a      	adds	r2, r5, #1
 8001534:	4b91      	ldr	r3, [pc, #580]	; (800177c <__aeabi_dsub+0x348>)
 8001536:	0555      	lsls	r5, r2, #21
 8001538:	0d6d      	lsrs	r5, r5, #21
 800153a:	429a      	cmp	r2, r3
 800153c:	d100      	bne.n	8001540 <__aeabi_dsub+0x10c>
 800153e:	e119      	b.n	8001774 <__aeabi_dsub+0x340>
 8001540:	4a8f      	ldr	r2, [pc, #572]	; (8001780 <__aeabi_dsub+0x34c>)
 8001542:	08f6      	lsrs	r6, r6, #3
 8001544:	400a      	ands	r2, r1
 8001546:	0757      	lsls	r7, r2, #29
 8001548:	0252      	lsls	r2, r2, #9
 800154a:	4337      	orrs	r7, r6
 800154c:	0b12      	lsrs	r2, r2, #12
 800154e:	e09b      	b.n	8001688 <__aeabi_dsub+0x254>
 8001550:	2e00      	cmp	r6, #0
 8001552:	d000      	beq.n	8001556 <__aeabi_dsub+0x122>
 8001554:	e0c5      	b.n	80016e2 <__aeabi_dsub+0x2ae>
 8001556:	1c6e      	adds	r6, r5, #1
 8001558:	0576      	lsls	r6, r6, #21
 800155a:	0d76      	lsrs	r6, r6, #21
 800155c:	2e01      	cmp	r6, #1
 800155e:	dc00      	bgt.n	8001562 <__aeabi_dsub+0x12e>
 8001560:	e148      	b.n	80017f4 <__aeabi_dsub+0x3c0>
 8001562:	4667      	mov	r7, ip
 8001564:	1a86      	subs	r6, r0, r2
 8001566:	1bcb      	subs	r3, r1, r7
 8001568:	42b0      	cmp	r0, r6
 800156a:	41bf      	sbcs	r7, r7
 800156c:	427f      	negs	r7, r7
 800156e:	46b8      	mov	r8, r7
 8001570:	001f      	movs	r7, r3
 8001572:	4643      	mov	r3, r8
 8001574:	1aff      	subs	r7, r7, r3
 8001576:	003b      	movs	r3, r7
 8001578:	46b8      	mov	r8, r7
 800157a:	021b      	lsls	r3, r3, #8
 800157c:	d500      	bpl.n	8001580 <__aeabi_dsub+0x14c>
 800157e:	e15f      	b.n	8001840 <__aeabi_dsub+0x40c>
 8001580:	4337      	orrs	r7, r6
 8001582:	d19a      	bne.n	80014ba <__aeabi_dsub+0x86>
 8001584:	2200      	movs	r2, #0
 8001586:	2400      	movs	r4, #0
 8001588:	2500      	movs	r5, #0
 800158a:	e079      	b.n	8001680 <__aeabi_dsub+0x24c>
 800158c:	2e00      	cmp	r6, #0
 800158e:	dc00      	bgt.n	8001592 <__aeabi_dsub+0x15e>
 8001590:	e0fa      	b.n	8001788 <__aeabi_dsub+0x354>
 8001592:	2f00      	cmp	r7, #0
 8001594:	d100      	bne.n	8001598 <__aeabi_dsub+0x164>
 8001596:	e08d      	b.n	80016b4 <__aeabi_dsub+0x280>
 8001598:	4b78      	ldr	r3, [pc, #480]	; (800177c <__aeabi_dsub+0x348>)
 800159a:	429d      	cmp	r5, r3
 800159c:	d067      	beq.n	800166e <__aeabi_dsub+0x23a>
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	4667      	mov	r7, ip
 80015a2:	041b      	lsls	r3, r3, #16
 80015a4:	431f      	orrs	r7, r3
 80015a6:	46bc      	mov	ip, r7
 80015a8:	2e38      	cmp	r6, #56	; 0x38
 80015aa:	dc00      	bgt.n	80015ae <__aeabi_dsub+0x17a>
 80015ac:	e152      	b.n	8001854 <__aeabi_dsub+0x420>
 80015ae:	4663      	mov	r3, ip
 80015b0:	4313      	orrs	r3, r2
 80015b2:	1e5a      	subs	r2, r3, #1
 80015b4:	4193      	sbcs	r3, r2
 80015b6:	181e      	adds	r6, r3, r0
 80015b8:	4286      	cmp	r6, r0
 80015ba:	4180      	sbcs	r0, r0
 80015bc:	4240      	negs	r0, r0
 80015be:	1809      	adds	r1, r1, r0
 80015c0:	020b      	lsls	r3, r1, #8
 80015c2:	d400      	bmi.n	80015c6 <__aeabi_dsub+0x192>
 80015c4:	e0be      	b.n	8001744 <__aeabi_dsub+0x310>
 80015c6:	4b6d      	ldr	r3, [pc, #436]	; (800177c <__aeabi_dsub+0x348>)
 80015c8:	3501      	adds	r5, #1
 80015ca:	429d      	cmp	r5, r3
 80015cc:	d100      	bne.n	80015d0 <__aeabi_dsub+0x19c>
 80015ce:	e0d2      	b.n	8001776 <__aeabi_dsub+0x342>
 80015d0:	4a6b      	ldr	r2, [pc, #428]	; (8001780 <__aeabi_dsub+0x34c>)
 80015d2:	0873      	lsrs	r3, r6, #1
 80015d4:	400a      	ands	r2, r1
 80015d6:	2101      	movs	r1, #1
 80015d8:	400e      	ands	r6, r1
 80015da:	431e      	orrs	r6, r3
 80015dc:	0851      	lsrs	r1, r2, #1
 80015de:	07d3      	lsls	r3, r2, #31
 80015e0:	2207      	movs	r2, #7
 80015e2:	431e      	orrs	r6, r3
 80015e4:	4032      	ands	r2, r6
 80015e6:	e795      	b.n	8001514 <__aeabi_dsub+0xe0>
 80015e8:	001e      	movs	r6, r3
 80015ea:	4316      	orrs	r6, r2
 80015ec:	d000      	beq.n	80015f0 <__aeabi_dsub+0x1bc>
 80015ee:	e745      	b.n	800147c <__aeabi_dsub+0x48>
 80015f0:	e740      	b.n	8001474 <__aeabi_dsub+0x40>
 80015f2:	4b62      	ldr	r3, [pc, #392]	; (800177c <__aeabi_dsub+0x348>)
 80015f4:	429d      	cmp	r5, r3
 80015f6:	d03a      	beq.n	800166e <__aeabi_dsub+0x23a>
 80015f8:	2380      	movs	r3, #128	; 0x80
 80015fa:	4667      	mov	r7, ip
 80015fc:	041b      	lsls	r3, r3, #16
 80015fe:	431f      	orrs	r7, r3
 8001600:	46bc      	mov	ip, r7
 8001602:	2e38      	cmp	r6, #56	; 0x38
 8001604:	dd00      	ble.n	8001608 <__aeabi_dsub+0x1d4>
 8001606:	e0eb      	b.n	80017e0 <__aeabi_dsub+0x3ac>
 8001608:	2e1f      	cmp	r6, #31
 800160a:	dc00      	bgt.n	800160e <__aeabi_dsub+0x1da>
 800160c:	e13a      	b.n	8001884 <__aeabi_dsub+0x450>
 800160e:	0033      	movs	r3, r6
 8001610:	4667      	mov	r7, ip
 8001612:	3b20      	subs	r3, #32
 8001614:	40df      	lsrs	r7, r3
 8001616:	003b      	movs	r3, r7
 8001618:	2e20      	cmp	r6, #32
 800161a:	d005      	beq.n	8001628 <__aeabi_dsub+0x1f4>
 800161c:	2740      	movs	r7, #64	; 0x40
 800161e:	1bbf      	subs	r7, r7, r6
 8001620:	4666      	mov	r6, ip
 8001622:	40be      	lsls	r6, r7
 8001624:	4332      	orrs	r2, r6
 8001626:	4690      	mov	r8, r2
 8001628:	4646      	mov	r6, r8
 800162a:	1e72      	subs	r2, r6, #1
 800162c:	4196      	sbcs	r6, r2
 800162e:	4333      	orrs	r3, r6
 8001630:	e0da      	b.n	80017e8 <__aeabi_dsub+0x3b4>
 8001632:	2b00      	cmp	r3, #0
 8001634:	d100      	bne.n	8001638 <__aeabi_dsub+0x204>
 8001636:	e214      	b.n	8001a62 <__aeabi_dsub+0x62e>
 8001638:	4663      	mov	r3, ip
 800163a:	4313      	orrs	r3, r2
 800163c:	d100      	bne.n	8001640 <__aeabi_dsub+0x20c>
 800163e:	e168      	b.n	8001912 <__aeabi_dsub+0x4de>
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	074e      	lsls	r6, r1, #29
 8001644:	08c0      	lsrs	r0, r0, #3
 8001646:	08c9      	lsrs	r1, r1, #3
 8001648:	031b      	lsls	r3, r3, #12
 800164a:	4306      	orrs	r6, r0
 800164c:	4219      	tst	r1, r3
 800164e:	d008      	beq.n	8001662 <__aeabi_dsub+0x22e>
 8001650:	4660      	mov	r0, ip
 8001652:	08c0      	lsrs	r0, r0, #3
 8001654:	4218      	tst	r0, r3
 8001656:	d104      	bne.n	8001662 <__aeabi_dsub+0x22e>
 8001658:	4663      	mov	r3, ip
 800165a:	0001      	movs	r1, r0
 800165c:	08d2      	lsrs	r2, r2, #3
 800165e:	075e      	lsls	r6, r3, #29
 8001660:	4316      	orrs	r6, r2
 8001662:	00f3      	lsls	r3, r6, #3
 8001664:	4699      	mov	r9, r3
 8001666:	00c9      	lsls	r1, r1, #3
 8001668:	0f72      	lsrs	r2, r6, #29
 800166a:	4d44      	ldr	r5, [pc, #272]	; (800177c <__aeabi_dsub+0x348>)
 800166c:	4311      	orrs	r1, r2
 800166e:	464b      	mov	r3, r9
 8001670:	08de      	lsrs	r6, r3, #3
 8001672:	4b42      	ldr	r3, [pc, #264]	; (800177c <__aeabi_dsub+0x348>)
 8001674:	074f      	lsls	r7, r1, #29
 8001676:	4337      	orrs	r7, r6
 8001678:	08ca      	lsrs	r2, r1, #3
 800167a:	429d      	cmp	r5, r3
 800167c:	d100      	bne.n	8001680 <__aeabi_dsub+0x24c>
 800167e:	e06e      	b.n	800175e <__aeabi_dsub+0x32a>
 8001680:	0312      	lsls	r2, r2, #12
 8001682:	056d      	lsls	r5, r5, #21
 8001684:	0b12      	lsrs	r2, r2, #12
 8001686:	0d6d      	lsrs	r5, r5, #21
 8001688:	2100      	movs	r1, #0
 800168a:	0312      	lsls	r2, r2, #12
 800168c:	0b13      	lsrs	r3, r2, #12
 800168e:	0d0a      	lsrs	r2, r1, #20
 8001690:	0512      	lsls	r2, r2, #20
 8001692:	431a      	orrs	r2, r3
 8001694:	4b3b      	ldr	r3, [pc, #236]	; (8001784 <__aeabi_dsub+0x350>)
 8001696:	052d      	lsls	r5, r5, #20
 8001698:	4013      	ands	r3, r2
 800169a:	432b      	orrs	r3, r5
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	07e4      	lsls	r4, r4, #31
 80016a0:	085b      	lsrs	r3, r3, #1
 80016a2:	4323      	orrs	r3, r4
 80016a4:	0038      	movs	r0, r7
 80016a6:	0019      	movs	r1, r3
 80016a8:	bc3c      	pop	{r2, r3, r4, r5}
 80016aa:	4690      	mov	r8, r2
 80016ac:	4699      	mov	r9, r3
 80016ae:	46a2      	mov	sl, r4
 80016b0:	46ab      	mov	fp, r5
 80016b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016b4:	4663      	mov	r3, ip
 80016b6:	4313      	orrs	r3, r2
 80016b8:	d011      	beq.n	80016de <__aeabi_dsub+0x2aa>
 80016ba:	1e73      	subs	r3, r6, #1
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d000      	beq.n	80016c2 <__aeabi_dsub+0x28e>
 80016c0:	e107      	b.n	80018d2 <__aeabi_dsub+0x49e>
 80016c2:	1886      	adds	r6, r0, r2
 80016c4:	4286      	cmp	r6, r0
 80016c6:	4180      	sbcs	r0, r0
 80016c8:	4461      	add	r1, ip
 80016ca:	4240      	negs	r0, r0
 80016cc:	1809      	adds	r1, r1, r0
 80016ce:	2501      	movs	r5, #1
 80016d0:	020b      	lsls	r3, r1, #8
 80016d2:	d537      	bpl.n	8001744 <__aeabi_dsub+0x310>
 80016d4:	2502      	movs	r5, #2
 80016d6:	e77b      	b.n	80015d0 <__aeabi_dsub+0x19c>
 80016d8:	003e      	movs	r6, r7
 80016da:	4661      	mov	r1, ip
 80016dc:	4691      	mov	r9, r2
 80016de:	0035      	movs	r5, r6
 80016e0:	e7c5      	b.n	800166e <__aeabi_dsub+0x23a>
 80016e2:	465c      	mov	r4, fp
 80016e4:	2d00      	cmp	r5, #0
 80016e6:	d000      	beq.n	80016ea <__aeabi_dsub+0x2b6>
 80016e8:	e0e1      	b.n	80018ae <__aeabi_dsub+0x47a>
 80016ea:	000b      	movs	r3, r1
 80016ec:	4303      	orrs	r3, r0
 80016ee:	d0f3      	beq.n	80016d8 <__aeabi_dsub+0x2a4>
 80016f0:	1c73      	adds	r3, r6, #1
 80016f2:	d100      	bne.n	80016f6 <__aeabi_dsub+0x2c2>
 80016f4:	e1ac      	b.n	8001a50 <__aeabi_dsub+0x61c>
 80016f6:	4b21      	ldr	r3, [pc, #132]	; (800177c <__aeabi_dsub+0x348>)
 80016f8:	429f      	cmp	r7, r3
 80016fa:	d100      	bne.n	80016fe <__aeabi_dsub+0x2ca>
 80016fc:	e13a      	b.n	8001974 <__aeabi_dsub+0x540>
 80016fe:	43f3      	mvns	r3, r6
 8001700:	2b38      	cmp	r3, #56	; 0x38
 8001702:	dd00      	ble.n	8001706 <__aeabi_dsub+0x2d2>
 8001704:	e16f      	b.n	80019e6 <__aeabi_dsub+0x5b2>
 8001706:	2b1f      	cmp	r3, #31
 8001708:	dd00      	ble.n	800170c <__aeabi_dsub+0x2d8>
 800170a:	e18c      	b.n	8001a26 <__aeabi_dsub+0x5f2>
 800170c:	2520      	movs	r5, #32
 800170e:	000e      	movs	r6, r1
 8001710:	1aed      	subs	r5, r5, r3
 8001712:	40ae      	lsls	r6, r5
 8001714:	46b0      	mov	r8, r6
 8001716:	0006      	movs	r6, r0
 8001718:	46aa      	mov	sl, r5
 800171a:	40de      	lsrs	r6, r3
 800171c:	4645      	mov	r5, r8
 800171e:	4335      	orrs	r5, r6
 8001720:	002e      	movs	r6, r5
 8001722:	4655      	mov	r5, sl
 8001724:	40d9      	lsrs	r1, r3
 8001726:	40a8      	lsls	r0, r5
 8001728:	4663      	mov	r3, ip
 800172a:	1e45      	subs	r5, r0, #1
 800172c:	41a8      	sbcs	r0, r5
 800172e:	1a5b      	subs	r3, r3, r1
 8001730:	469c      	mov	ip, r3
 8001732:	4330      	orrs	r0, r6
 8001734:	1a16      	subs	r6, r2, r0
 8001736:	42b2      	cmp	r2, r6
 8001738:	4192      	sbcs	r2, r2
 800173a:	4663      	mov	r3, ip
 800173c:	4252      	negs	r2, r2
 800173e:	1a99      	subs	r1, r3, r2
 8001740:	003d      	movs	r5, r7
 8001742:	e6b4      	b.n	80014ae <__aeabi_dsub+0x7a>
 8001744:	2207      	movs	r2, #7
 8001746:	4032      	ands	r2, r6
 8001748:	2a00      	cmp	r2, #0
 800174a:	d000      	beq.n	800174e <__aeabi_dsub+0x31a>
 800174c:	e6e4      	b.n	8001518 <__aeabi_dsub+0xe4>
 800174e:	4b0b      	ldr	r3, [pc, #44]	; (800177c <__aeabi_dsub+0x348>)
 8001750:	08f6      	lsrs	r6, r6, #3
 8001752:	074f      	lsls	r7, r1, #29
 8001754:	4337      	orrs	r7, r6
 8001756:	08ca      	lsrs	r2, r1, #3
 8001758:	429d      	cmp	r5, r3
 800175a:	d000      	beq.n	800175e <__aeabi_dsub+0x32a>
 800175c:	e790      	b.n	8001680 <__aeabi_dsub+0x24c>
 800175e:	003b      	movs	r3, r7
 8001760:	4313      	orrs	r3, r2
 8001762:	d100      	bne.n	8001766 <__aeabi_dsub+0x332>
 8001764:	e1a6      	b.n	8001ab4 <__aeabi_dsub+0x680>
 8001766:	2380      	movs	r3, #128	; 0x80
 8001768:	031b      	lsls	r3, r3, #12
 800176a:	431a      	orrs	r2, r3
 800176c:	0312      	lsls	r2, r2, #12
 800176e:	0b12      	lsrs	r2, r2, #12
 8001770:	4d02      	ldr	r5, [pc, #8]	; (800177c <__aeabi_dsub+0x348>)
 8001772:	e789      	b.n	8001688 <__aeabi_dsub+0x254>
 8001774:	0015      	movs	r5, r2
 8001776:	2200      	movs	r2, #0
 8001778:	2700      	movs	r7, #0
 800177a:	e785      	b.n	8001688 <__aeabi_dsub+0x254>
 800177c:	000007ff 	.word	0x000007ff
 8001780:	ff7fffff 	.word	0xff7fffff
 8001784:	800fffff 	.word	0x800fffff
 8001788:	2e00      	cmp	r6, #0
 800178a:	d000      	beq.n	800178e <__aeabi_dsub+0x35a>
 800178c:	e0c7      	b.n	800191e <__aeabi_dsub+0x4ea>
 800178e:	1c6b      	adds	r3, r5, #1
 8001790:	055e      	lsls	r6, r3, #21
 8001792:	0d76      	lsrs	r6, r6, #21
 8001794:	2e01      	cmp	r6, #1
 8001796:	dc00      	bgt.n	800179a <__aeabi_dsub+0x366>
 8001798:	e0f0      	b.n	800197c <__aeabi_dsub+0x548>
 800179a:	4dc8      	ldr	r5, [pc, #800]	; (8001abc <__aeabi_dsub+0x688>)
 800179c:	42ab      	cmp	r3, r5
 800179e:	d100      	bne.n	80017a2 <__aeabi_dsub+0x36e>
 80017a0:	e0b9      	b.n	8001916 <__aeabi_dsub+0x4e2>
 80017a2:	1885      	adds	r5, r0, r2
 80017a4:	000a      	movs	r2, r1
 80017a6:	4285      	cmp	r5, r0
 80017a8:	4189      	sbcs	r1, r1
 80017aa:	4462      	add	r2, ip
 80017ac:	4249      	negs	r1, r1
 80017ae:	1851      	adds	r1, r2, r1
 80017b0:	2207      	movs	r2, #7
 80017b2:	07ce      	lsls	r6, r1, #31
 80017b4:	086d      	lsrs	r5, r5, #1
 80017b6:	432e      	orrs	r6, r5
 80017b8:	0849      	lsrs	r1, r1, #1
 80017ba:	4032      	ands	r2, r6
 80017bc:	001d      	movs	r5, r3
 80017be:	e6a9      	b.n	8001514 <__aeabi_dsub+0xe0>
 80017c0:	49bf      	ldr	r1, [pc, #764]	; (8001ac0 <__aeabi_dsub+0x68c>)
 80017c2:	1aed      	subs	r5, r5, r3
 80017c4:	4011      	ands	r1, r2
 80017c6:	2207      	movs	r2, #7
 80017c8:	4032      	ands	r2, r6
 80017ca:	e6a3      	b.n	8001514 <__aeabi_dsub+0xe0>
 80017cc:	0032      	movs	r2, r6
 80017ce:	3828      	subs	r0, #40	; 0x28
 80017d0:	4082      	lsls	r2, r0
 80017d2:	2600      	movs	r6, #0
 80017d4:	e686      	b.n	80014e4 <__aeabi_dsub+0xb0>
 80017d6:	0030      	movs	r0, r6
 80017d8:	f000 fad8 	bl	8001d8c <__clzsi2>
 80017dc:	3020      	adds	r0, #32
 80017de:	e673      	b.n	80014c8 <__aeabi_dsub+0x94>
 80017e0:	4663      	mov	r3, ip
 80017e2:	4313      	orrs	r3, r2
 80017e4:	1e5a      	subs	r2, r3, #1
 80017e6:	4193      	sbcs	r3, r2
 80017e8:	1ac6      	subs	r6, r0, r3
 80017ea:	42b0      	cmp	r0, r6
 80017ec:	4180      	sbcs	r0, r0
 80017ee:	4240      	negs	r0, r0
 80017f0:	1a09      	subs	r1, r1, r0
 80017f2:	e65c      	b.n	80014ae <__aeabi_dsub+0x7a>
 80017f4:	000e      	movs	r6, r1
 80017f6:	4667      	mov	r7, ip
 80017f8:	4306      	orrs	r6, r0
 80017fa:	4317      	orrs	r7, r2
 80017fc:	2d00      	cmp	r5, #0
 80017fe:	d15e      	bne.n	80018be <__aeabi_dsub+0x48a>
 8001800:	2e00      	cmp	r6, #0
 8001802:	d000      	beq.n	8001806 <__aeabi_dsub+0x3d2>
 8001804:	e0f3      	b.n	80019ee <__aeabi_dsub+0x5ba>
 8001806:	2f00      	cmp	r7, #0
 8001808:	d100      	bne.n	800180c <__aeabi_dsub+0x3d8>
 800180a:	e11e      	b.n	8001a4a <__aeabi_dsub+0x616>
 800180c:	465c      	mov	r4, fp
 800180e:	4661      	mov	r1, ip
 8001810:	4691      	mov	r9, r2
 8001812:	e72c      	b.n	800166e <__aeabi_dsub+0x23a>
 8001814:	4fa9      	ldr	r7, [pc, #676]	; (8001abc <__aeabi_dsub+0x688>)
 8001816:	42be      	cmp	r6, r7
 8001818:	d07b      	beq.n	8001912 <__aeabi_dsub+0x4de>
 800181a:	001e      	movs	r6, r3
 800181c:	e6f1      	b.n	8001602 <__aeabi_dsub+0x1ce>
 800181e:	0010      	movs	r0, r2
 8001820:	3d1f      	subs	r5, #31
 8001822:	40e8      	lsrs	r0, r5
 8001824:	2b20      	cmp	r3, #32
 8001826:	d003      	beq.n	8001830 <__aeabi_dsub+0x3fc>
 8001828:	2140      	movs	r1, #64	; 0x40
 800182a:	1acb      	subs	r3, r1, r3
 800182c:	409a      	lsls	r2, r3
 800182e:	4316      	orrs	r6, r2
 8001830:	1e73      	subs	r3, r6, #1
 8001832:	419e      	sbcs	r6, r3
 8001834:	2207      	movs	r2, #7
 8001836:	4306      	orrs	r6, r0
 8001838:	4032      	ands	r2, r6
 800183a:	2100      	movs	r1, #0
 800183c:	2500      	movs	r5, #0
 800183e:	e783      	b.n	8001748 <__aeabi_dsub+0x314>
 8001840:	1a16      	subs	r6, r2, r0
 8001842:	4663      	mov	r3, ip
 8001844:	42b2      	cmp	r2, r6
 8001846:	4180      	sbcs	r0, r0
 8001848:	1a59      	subs	r1, r3, r1
 800184a:	4240      	negs	r0, r0
 800184c:	1a0b      	subs	r3, r1, r0
 800184e:	4698      	mov	r8, r3
 8001850:	465c      	mov	r4, fp
 8001852:	e632      	b.n	80014ba <__aeabi_dsub+0x86>
 8001854:	2e1f      	cmp	r6, #31
 8001856:	dd00      	ble.n	800185a <__aeabi_dsub+0x426>
 8001858:	e0ab      	b.n	80019b2 <__aeabi_dsub+0x57e>
 800185a:	2720      	movs	r7, #32
 800185c:	1bbb      	subs	r3, r7, r6
 800185e:	469a      	mov	sl, r3
 8001860:	4663      	mov	r3, ip
 8001862:	4657      	mov	r7, sl
 8001864:	40bb      	lsls	r3, r7
 8001866:	4699      	mov	r9, r3
 8001868:	0013      	movs	r3, r2
 800186a:	464f      	mov	r7, r9
 800186c:	40f3      	lsrs	r3, r6
 800186e:	431f      	orrs	r7, r3
 8001870:	003b      	movs	r3, r7
 8001872:	4657      	mov	r7, sl
 8001874:	40ba      	lsls	r2, r7
 8001876:	1e57      	subs	r7, r2, #1
 8001878:	41ba      	sbcs	r2, r7
 800187a:	4313      	orrs	r3, r2
 800187c:	4662      	mov	r2, ip
 800187e:	40f2      	lsrs	r2, r6
 8001880:	1889      	adds	r1, r1, r2
 8001882:	e698      	b.n	80015b6 <__aeabi_dsub+0x182>
 8001884:	2720      	movs	r7, #32
 8001886:	1bbb      	subs	r3, r7, r6
 8001888:	469a      	mov	sl, r3
 800188a:	4663      	mov	r3, ip
 800188c:	4657      	mov	r7, sl
 800188e:	40bb      	lsls	r3, r7
 8001890:	4699      	mov	r9, r3
 8001892:	0013      	movs	r3, r2
 8001894:	464f      	mov	r7, r9
 8001896:	40f3      	lsrs	r3, r6
 8001898:	431f      	orrs	r7, r3
 800189a:	003b      	movs	r3, r7
 800189c:	4657      	mov	r7, sl
 800189e:	40ba      	lsls	r2, r7
 80018a0:	1e57      	subs	r7, r2, #1
 80018a2:	41ba      	sbcs	r2, r7
 80018a4:	4313      	orrs	r3, r2
 80018a6:	4662      	mov	r2, ip
 80018a8:	40f2      	lsrs	r2, r6
 80018aa:	1a89      	subs	r1, r1, r2
 80018ac:	e79c      	b.n	80017e8 <__aeabi_dsub+0x3b4>
 80018ae:	4b83      	ldr	r3, [pc, #524]	; (8001abc <__aeabi_dsub+0x688>)
 80018b0:	429f      	cmp	r7, r3
 80018b2:	d05f      	beq.n	8001974 <__aeabi_dsub+0x540>
 80018b4:	2580      	movs	r5, #128	; 0x80
 80018b6:	042d      	lsls	r5, r5, #16
 80018b8:	4273      	negs	r3, r6
 80018ba:	4329      	orrs	r1, r5
 80018bc:	e720      	b.n	8001700 <__aeabi_dsub+0x2cc>
 80018be:	2e00      	cmp	r6, #0
 80018c0:	d10c      	bne.n	80018dc <__aeabi_dsub+0x4a8>
 80018c2:	2f00      	cmp	r7, #0
 80018c4:	d100      	bne.n	80018c8 <__aeabi_dsub+0x494>
 80018c6:	e0d0      	b.n	8001a6a <__aeabi_dsub+0x636>
 80018c8:	465c      	mov	r4, fp
 80018ca:	4661      	mov	r1, ip
 80018cc:	4691      	mov	r9, r2
 80018ce:	4d7b      	ldr	r5, [pc, #492]	; (8001abc <__aeabi_dsub+0x688>)
 80018d0:	e6cd      	b.n	800166e <__aeabi_dsub+0x23a>
 80018d2:	4f7a      	ldr	r7, [pc, #488]	; (8001abc <__aeabi_dsub+0x688>)
 80018d4:	42be      	cmp	r6, r7
 80018d6:	d01c      	beq.n	8001912 <__aeabi_dsub+0x4de>
 80018d8:	001e      	movs	r6, r3
 80018da:	e665      	b.n	80015a8 <__aeabi_dsub+0x174>
 80018dc:	2f00      	cmp	r7, #0
 80018de:	d018      	beq.n	8001912 <__aeabi_dsub+0x4de>
 80018e0:	08c0      	lsrs	r0, r0, #3
 80018e2:	074e      	lsls	r6, r1, #29
 80018e4:	4306      	orrs	r6, r0
 80018e6:	2080      	movs	r0, #128	; 0x80
 80018e8:	08c9      	lsrs	r1, r1, #3
 80018ea:	0300      	lsls	r0, r0, #12
 80018ec:	4201      	tst	r1, r0
 80018ee:	d008      	beq.n	8001902 <__aeabi_dsub+0x4ce>
 80018f0:	4663      	mov	r3, ip
 80018f2:	08dc      	lsrs	r4, r3, #3
 80018f4:	4204      	tst	r4, r0
 80018f6:	d104      	bne.n	8001902 <__aeabi_dsub+0x4ce>
 80018f8:	0021      	movs	r1, r4
 80018fa:	46da      	mov	sl, fp
 80018fc:	08d2      	lsrs	r2, r2, #3
 80018fe:	075e      	lsls	r6, r3, #29
 8001900:	4316      	orrs	r6, r2
 8001902:	00f3      	lsls	r3, r6, #3
 8001904:	4699      	mov	r9, r3
 8001906:	2401      	movs	r4, #1
 8001908:	4653      	mov	r3, sl
 800190a:	00c9      	lsls	r1, r1, #3
 800190c:	0f72      	lsrs	r2, r6, #29
 800190e:	4311      	orrs	r1, r2
 8001910:	401c      	ands	r4, r3
 8001912:	4d6a      	ldr	r5, [pc, #424]	; (8001abc <__aeabi_dsub+0x688>)
 8001914:	e6ab      	b.n	800166e <__aeabi_dsub+0x23a>
 8001916:	001d      	movs	r5, r3
 8001918:	2200      	movs	r2, #0
 800191a:	2700      	movs	r7, #0
 800191c:	e6b4      	b.n	8001688 <__aeabi_dsub+0x254>
 800191e:	2d00      	cmp	r5, #0
 8001920:	d159      	bne.n	80019d6 <__aeabi_dsub+0x5a2>
 8001922:	000b      	movs	r3, r1
 8001924:	4303      	orrs	r3, r0
 8001926:	d100      	bne.n	800192a <__aeabi_dsub+0x4f6>
 8001928:	e6d6      	b.n	80016d8 <__aeabi_dsub+0x2a4>
 800192a:	1c73      	adds	r3, r6, #1
 800192c:	d100      	bne.n	8001930 <__aeabi_dsub+0x4fc>
 800192e:	e0b2      	b.n	8001a96 <__aeabi_dsub+0x662>
 8001930:	4b62      	ldr	r3, [pc, #392]	; (8001abc <__aeabi_dsub+0x688>)
 8001932:	429f      	cmp	r7, r3
 8001934:	d01e      	beq.n	8001974 <__aeabi_dsub+0x540>
 8001936:	43f3      	mvns	r3, r6
 8001938:	2b38      	cmp	r3, #56	; 0x38
 800193a:	dc6f      	bgt.n	8001a1c <__aeabi_dsub+0x5e8>
 800193c:	2b1f      	cmp	r3, #31
 800193e:	dd00      	ble.n	8001942 <__aeabi_dsub+0x50e>
 8001940:	e097      	b.n	8001a72 <__aeabi_dsub+0x63e>
 8001942:	2520      	movs	r5, #32
 8001944:	000e      	movs	r6, r1
 8001946:	1aed      	subs	r5, r5, r3
 8001948:	40ae      	lsls	r6, r5
 800194a:	46b0      	mov	r8, r6
 800194c:	0006      	movs	r6, r0
 800194e:	46aa      	mov	sl, r5
 8001950:	40de      	lsrs	r6, r3
 8001952:	4645      	mov	r5, r8
 8001954:	4335      	orrs	r5, r6
 8001956:	002e      	movs	r6, r5
 8001958:	4655      	mov	r5, sl
 800195a:	40a8      	lsls	r0, r5
 800195c:	40d9      	lsrs	r1, r3
 800195e:	1e45      	subs	r5, r0, #1
 8001960:	41a8      	sbcs	r0, r5
 8001962:	448c      	add	ip, r1
 8001964:	4306      	orrs	r6, r0
 8001966:	18b6      	adds	r6, r6, r2
 8001968:	4296      	cmp	r6, r2
 800196a:	4192      	sbcs	r2, r2
 800196c:	4251      	negs	r1, r2
 800196e:	4461      	add	r1, ip
 8001970:	003d      	movs	r5, r7
 8001972:	e625      	b.n	80015c0 <__aeabi_dsub+0x18c>
 8001974:	003d      	movs	r5, r7
 8001976:	4661      	mov	r1, ip
 8001978:	4691      	mov	r9, r2
 800197a:	e678      	b.n	800166e <__aeabi_dsub+0x23a>
 800197c:	000b      	movs	r3, r1
 800197e:	4303      	orrs	r3, r0
 8001980:	2d00      	cmp	r5, #0
 8001982:	d000      	beq.n	8001986 <__aeabi_dsub+0x552>
 8001984:	e655      	b.n	8001632 <__aeabi_dsub+0x1fe>
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f5      	beq.n	8001976 <__aeabi_dsub+0x542>
 800198a:	4663      	mov	r3, ip
 800198c:	4313      	orrs	r3, r2
 800198e:	d100      	bne.n	8001992 <__aeabi_dsub+0x55e>
 8001990:	e66d      	b.n	800166e <__aeabi_dsub+0x23a>
 8001992:	1886      	adds	r6, r0, r2
 8001994:	4286      	cmp	r6, r0
 8001996:	4180      	sbcs	r0, r0
 8001998:	4461      	add	r1, ip
 800199a:	4240      	negs	r0, r0
 800199c:	1809      	adds	r1, r1, r0
 800199e:	2200      	movs	r2, #0
 80019a0:	020b      	lsls	r3, r1, #8
 80019a2:	d400      	bmi.n	80019a6 <__aeabi_dsub+0x572>
 80019a4:	e6d0      	b.n	8001748 <__aeabi_dsub+0x314>
 80019a6:	4b46      	ldr	r3, [pc, #280]	; (8001ac0 <__aeabi_dsub+0x68c>)
 80019a8:	3501      	adds	r5, #1
 80019aa:	4019      	ands	r1, r3
 80019ac:	e5b2      	b.n	8001514 <__aeabi_dsub+0xe0>
 80019ae:	46b1      	mov	r9, r6
 80019b0:	e65d      	b.n	800166e <__aeabi_dsub+0x23a>
 80019b2:	0033      	movs	r3, r6
 80019b4:	4667      	mov	r7, ip
 80019b6:	3b20      	subs	r3, #32
 80019b8:	40df      	lsrs	r7, r3
 80019ba:	003b      	movs	r3, r7
 80019bc:	2e20      	cmp	r6, #32
 80019be:	d005      	beq.n	80019cc <__aeabi_dsub+0x598>
 80019c0:	2740      	movs	r7, #64	; 0x40
 80019c2:	1bbf      	subs	r7, r7, r6
 80019c4:	4666      	mov	r6, ip
 80019c6:	40be      	lsls	r6, r7
 80019c8:	4332      	orrs	r2, r6
 80019ca:	4690      	mov	r8, r2
 80019cc:	4646      	mov	r6, r8
 80019ce:	1e72      	subs	r2, r6, #1
 80019d0:	4196      	sbcs	r6, r2
 80019d2:	4333      	orrs	r3, r6
 80019d4:	e5ef      	b.n	80015b6 <__aeabi_dsub+0x182>
 80019d6:	4b39      	ldr	r3, [pc, #228]	; (8001abc <__aeabi_dsub+0x688>)
 80019d8:	429f      	cmp	r7, r3
 80019da:	d0cb      	beq.n	8001974 <__aeabi_dsub+0x540>
 80019dc:	2580      	movs	r5, #128	; 0x80
 80019de:	042d      	lsls	r5, r5, #16
 80019e0:	4273      	negs	r3, r6
 80019e2:	4329      	orrs	r1, r5
 80019e4:	e7a8      	b.n	8001938 <__aeabi_dsub+0x504>
 80019e6:	4308      	orrs	r0, r1
 80019e8:	1e41      	subs	r1, r0, #1
 80019ea:	4188      	sbcs	r0, r1
 80019ec:	e6a2      	b.n	8001734 <__aeabi_dsub+0x300>
 80019ee:	2f00      	cmp	r7, #0
 80019f0:	d100      	bne.n	80019f4 <__aeabi_dsub+0x5c0>
 80019f2:	e63c      	b.n	800166e <__aeabi_dsub+0x23a>
 80019f4:	4663      	mov	r3, ip
 80019f6:	1a86      	subs	r6, r0, r2
 80019f8:	1acf      	subs	r7, r1, r3
 80019fa:	42b0      	cmp	r0, r6
 80019fc:	419b      	sbcs	r3, r3
 80019fe:	425b      	negs	r3, r3
 8001a00:	1afb      	subs	r3, r7, r3
 8001a02:	4698      	mov	r8, r3
 8001a04:	021b      	lsls	r3, r3, #8
 8001a06:	d54e      	bpl.n	8001aa6 <__aeabi_dsub+0x672>
 8001a08:	1a16      	subs	r6, r2, r0
 8001a0a:	4663      	mov	r3, ip
 8001a0c:	42b2      	cmp	r2, r6
 8001a0e:	4192      	sbcs	r2, r2
 8001a10:	1a59      	subs	r1, r3, r1
 8001a12:	4252      	negs	r2, r2
 8001a14:	1a89      	subs	r1, r1, r2
 8001a16:	465c      	mov	r4, fp
 8001a18:	2200      	movs	r2, #0
 8001a1a:	e57b      	b.n	8001514 <__aeabi_dsub+0xe0>
 8001a1c:	4301      	orrs	r1, r0
 8001a1e:	000e      	movs	r6, r1
 8001a20:	1e71      	subs	r1, r6, #1
 8001a22:	418e      	sbcs	r6, r1
 8001a24:	e79f      	b.n	8001966 <__aeabi_dsub+0x532>
 8001a26:	001d      	movs	r5, r3
 8001a28:	000e      	movs	r6, r1
 8001a2a:	3d20      	subs	r5, #32
 8001a2c:	40ee      	lsrs	r6, r5
 8001a2e:	46b0      	mov	r8, r6
 8001a30:	2b20      	cmp	r3, #32
 8001a32:	d004      	beq.n	8001a3e <__aeabi_dsub+0x60a>
 8001a34:	2540      	movs	r5, #64	; 0x40
 8001a36:	1aeb      	subs	r3, r5, r3
 8001a38:	4099      	lsls	r1, r3
 8001a3a:	4308      	orrs	r0, r1
 8001a3c:	4681      	mov	r9, r0
 8001a3e:	4648      	mov	r0, r9
 8001a40:	4643      	mov	r3, r8
 8001a42:	1e41      	subs	r1, r0, #1
 8001a44:	4188      	sbcs	r0, r1
 8001a46:	4318      	orrs	r0, r3
 8001a48:	e674      	b.n	8001734 <__aeabi_dsub+0x300>
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2400      	movs	r4, #0
 8001a4e:	e617      	b.n	8001680 <__aeabi_dsub+0x24c>
 8001a50:	1a16      	subs	r6, r2, r0
 8001a52:	4663      	mov	r3, ip
 8001a54:	42b2      	cmp	r2, r6
 8001a56:	4192      	sbcs	r2, r2
 8001a58:	1a59      	subs	r1, r3, r1
 8001a5a:	4252      	negs	r2, r2
 8001a5c:	1a89      	subs	r1, r1, r2
 8001a5e:	003d      	movs	r5, r7
 8001a60:	e525      	b.n	80014ae <__aeabi_dsub+0x7a>
 8001a62:	4661      	mov	r1, ip
 8001a64:	4691      	mov	r9, r2
 8001a66:	4d15      	ldr	r5, [pc, #84]	; (8001abc <__aeabi_dsub+0x688>)
 8001a68:	e601      	b.n	800166e <__aeabi_dsub+0x23a>
 8001a6a:	2280      	movs	r2, #128	; 0x80
 8001a6c:	2400      	movs	r4, #0
 8001a6e:	0312      	lsls	r2, r2, #12
 8001a70:	e679      	b.n	8001766 <__aeabi_dsub+0x332>
 8001a72:	001d      	movs	r5, r3
 8001a74:	000e      	movs	r6, r1
 8001a76:	3d20      	subs	r5, #32
 8001a78:	40ee      	lsrs	r6, r5
 8001a7a:	46b0      	mov	r8, r6
 8001a7c:	2b20      	cmp	r3, #32
 8001a7e:	d004      	beq.n	8001a8a <__aeabi_dsub+0x656>
 8001a80:	2540      	movs	r5, #64	; 0x40
 8001a82:	1aeb      	subs	r3, r5, r3
 8001a84:	4099      	lsls	r1, r3
 8001a86:	4308      	orrs	r0, r1
 8001a88:	4681      	mov	r9, r0
 8001a8a:	464e      	mov	r6, r9
 8001a8c:	4643      	mov	r3, r8
 8001a8e:	1e71      	subs	r1, r6, #1
 8001a90:	418e      	sbcs	r6, r1
 8001a92:	431e      	orrs	r6, r3
 8001a94:	e767      	b.n	8001966 <__aeabi_dsub+0x532>
 8001a96:	1886      	adds	r6, r0, r2
 8001a98:	4296      	cmp	r6, r2
 8001a9a:	419b      	sbcs	r3, r3
 8001a9c:	4461      	add	r1, ip
 8001a9e:	425b      	negs	r3, r3
 8001aa0:	18c9      	adds	r1, r1, r3
 8001aa2:	003d      	movs	r5, r7
 8001aa4:	e58c      	b.n	80015c0 <__aeabi_dsub+0x18c>
 8001aa6:	4647      	mov	r7, r8
 8001aa8:	4337      	orrs	r7, r6
 8001aaa:	d0ce      	beq.n	8001a4a <__aeabi_dsub+0x616>
 8001aac:	2207      	movs	r2, #7
 8001aae:	4641      	mov	r1, r8
 8001ab0:	4032      	ands	r2, r6
 8001ab2:	e649      	b.n	8001748 <__aeabi_dsub+0x314>
 8001ab4:	2700      	movs	r7, #0
 8001ab6:	003a      	movs	r2, r7
 8001ab8:	e5e6      	b.n	8001688 <__aeabi_dsub+0x254>
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	000007ff 	.word	0x000007ff
 8001ac0:	ff7fffff 	.word	0xff7fffff

08001ac4 <__aeabi_d2iz>:
 8001ac4:	b530      	push	{r4, r5, lr}
 8001ac6:	4d14      	ldr	r5, [pc, #80]	; (8001b18 <__aeabi_d2iz+0x54>)
 8001ac8:	030a      	lsls	r2, r1, #12
 8001aca:	004b      	lsls	r3, r1, #1
 8001acc:	0b12      	lsrs	r2, r2, #12
 8001ace:	0d5b      	lsrs	r3, r3, #21
 8001ad0:	0fc9      	lsrs	r1, r1, #31
 8001ad2:	2400      	movs	r4, #0
 8001ad4:	42ab      	cmp	r3, r5
 8001ad6:	dd11      	ble.n	8001afc <__aeabi_d2iz+0x38>
 8001ad8:	4c10      	ldr	r4, [pc, #64]	; (8001b1c <__aeabi_d2iz+0x58>)
 8001ada:	42a3      	cmp	r3, r4
 8001adc:	dc10      	bgt.n	8001b00 <__aeabi_d2iz+0x3c>
 8001ade:	2480      	movs	r4, #128	; 0x80
 8001ae0:	0364      	lsls	r4, r4, #13
 8001ae2:	4322      	orrs	r2, r4
 8001ae4:	4c0e      	ldr	r4, [pc, #56]	; (8001b20 <__aeabi_d2iz+0x5c>)
 8001ae6:	1ae4      	subs	r4, r4, r3
 8001ae8:	2c1f      	cmp	r4, #31
 8001aea:	dd0c      	ble.n	8001b06 <__aeabi_d2iz+0x42>
 8001aec:	480d      	ldr	r0, [pc, #52]	; (8001b24 <__aeabi_d2iz+0x60>)
 8001aee:	1ac3      	subs	r3, r0, r3
 8001af0:	40da      	lsrs	r2, r3
 8001af2:	0013      	movs	r3, r2
 8001af4:	425c      	negs	r4, r3
 8001af6:	2900      	cmp	r1, #0
 8001af8:	d100      	bne.n	8001afc <__aeabi_d2iz+0x38>
 8001afa:	001c      	movs	r4, r3
 8001afc:	0020      	movs	r0, r4
 8001afe:	bd30      	pop	{r4, r5, pc}
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <__aeabi_d2iz+0x64>)
 8001b02:	18cc      	adds	r4, r1, r3
 8001b04:	e7fa      	b.n	8001afc <__aeabi_d2iz+0x38>
 8001b06:	4d09      	ldr	r5, [pc, #36]	; (8001b2c <__aeabi_d2iz+0x68>)
 8001b08:	40e0      	lsrs	r0, r4
 8001b0a:	46ac      	mov	ip, r5
 8001b0c:	4463      	add	r3, ip
 8001b0e:	409a      	lsls	r2, r3
 8001b10:	0013      	movs	r3, r2
 8001b12:	4303      	orrs	r3, r0
 8001b14:	e7ee      	b.n	8001af4 <__aeabi_d2iz+0x30>
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	000003fe 	.word	0x000003fe
 8001b1c:	0000041d 	.word	0x0000041d
 8001b20:	00000433 	.word	0x00000433
 8001b24:	00000413 	.word	0x00000413
 8001b28:	7fffffff 	.word	0x7fffffff
 8001b2c:	fffffbed 	.word	0xfffffbed

08001b30 <__aeabi_i2d>:
 8001b30:	b570      	push	{r4, r5, r6, lr}
 8001b32:	2800      	cmp	r0, #0
 8001b34:	d02d      	beq.n	8001b92 <__aeabi_i2d+0x62>
 8001b36:	17c3      	asrs	r3, r0, #31
 8001b38:	18c5      	adds	r5, r0, r3
 8001b3a:	405d      	eors	r5, r3
 8001b3c:	0fc4      	lsrs	r4, r0, #31
 8001b3e:	0028      	movs	r0, r5
 8001b40:	f000 f924 	bl	8001d8c <__clzsi2>
 8001b44:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <__aeabi_i2d+0x6c>)
 8001b46:	1a1b      	subs	r3, r3, r0
 8001b48:	055b      	lsls	r3, r3, #21
 8001b4a:	0d5b      	lsrs	r3, r3, #21
 8001b4c:	280a      	cmp	r0, #10
 8001b4e:	dd15      	ble.n	8001b7c <__aeabi_i2d+0x4c>
 8001b50:	380b      	subs	r0, #11
 8001b52:	4085      	lsls	r5, r0
 8001b54:	2200      	movs	r2, #0
 8001b56:	032d      	lsls	r5, r5, #12
 8001b58:	0b2d      	lsrs	r5, r5, #12
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	0010      	movs	r0, r2
 8001b5e:	032d      	lsls	r5, r5, #12
 8001b60:	0d0a      	lsrs	r2, r1, #20
 8001b62:	0b2d      	lsrs	r5, r5, #12
 8001b64:	0512      	lsls	r2, r2, #20
 8001b66:	432a      	orrs	r2, r5
 8001b68:	4d0d      	ldr	r5, [pc, #52]	; (8001ba0 <__aeabi_i2d+0x70>)
 8001b6a:	051b      	lsls	r3, r3, #20
 8001b6c:	402a      	ands	r2, r5
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	07e4      	lsls	r4, r4, #31
 8001b74:	085b      	lsrs	r3, r3, #1
 8001b76:	4323      	orrs	r3, r4
 8001b78:	0019      	movs	r1, r3
 8001b7a:	bd70      	pop	{r4, r5, r6, pc}
 8001b7c:	0002      	movs	r2, r0
 8001b7e:	0029      	movs	r1, r5
 8001b80:	3215      	adds	r2, #21
 8001b82:	4091      	lsls	r1, r2
 8001b84:	000a      	movs	r2, r1
 8001b86:	210b      	movs	r1, #11
 8001b88:	1a08      	subs	r0, r1, r0
 8001b8a:	40c5      	lsrs	r5, r0
 8001b8c:	032d      	lsls	r5, r5, #12
 8001b8e:	0b2d      	lsrs	r5, r5, #12
 8001b90:	e7e3      	b.n	8001b5a <__aeabi_i2d+0x2a>
 8001b92:	2400      	movs	r4, #0
 8001b94:	2300      	movs	r3, #0
 8001b96:	2500      	movs	r5, #0
 8001b98:	2200      	movs	r2, #0
 8001b9a:	e7de      	b.n	8001b5a <__aeabi_i2d+0x2a>
 8001b9c:	0000041e 	.word	0x0000041e
 8001ba0:	800fffff 	.word	0x800fffff

08001ba4 <__aeabi_ui2d>:
 8001ba4:	b510      	push	{r4, lr}
 8001ba6:	1e04      	subs	r4, r0, #0
 8001ba8:	d025      	beq.n	8001bf6 <__aeabi_ui2d+0x52>
 8001baa:	f000 f8ef 	bl	8001d8c <__clzsi2>
 8001bae:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <__aeabi_ui2d+0x5c>)
 8001bb0:	1a1b      	subs	r3, r3, r0
 8001bb2:	055b      	lsls	r3, r3, #21
 8001bb4:	0d5b      	lsrs	r3, r3, #21
 8001bb6:	280a      	cmp	r0, #10
 8001bb8:	dd12      	ble.n	8001be0 <__aeabi_ui2d+0x3c>
 8001bba:	380b      	subs	r0, #11
 8001bbc:	4084      	lsls	r4, r0
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	0324      	lsls	r4, r4, #12
 8001bc2:	0b24      	lsrs	r4, r4, #12
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	0010      	movs	r0, r2
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	0d0a      	lsrs	r2, r1, #20
 8001bcc:	0b24      	lsrs	r4, r4, #12
 8001bce:	0512      	lsls	r2, r2, #20
 8001bd0:	4322      	orrs	r2, r4
 8001bd2:	4c0c      	ldr	r4, [pc, #48]	; (8001c04 <__aeabi_ui2d+0x60>)
 8001bd4:	051b      	lsls	r3, r3, #20
 8001bd6:	4022      	ands	r2, r4
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	0859      	lsrs	r1, r3, #1
 8001bde:	bd10      	pop	{r4, pc}
 8001be0:	0002      	movs	r2, r0
 8001be2:	0021      	movs	r1, r4
 8001be4:	3215      	adds	r2, #21
 8001be6:	4091      	lsls	r1, r2
 8001be8:	000a      	movs	r2, r1
 8001bea:	210b      	movs	r1, #11
 8001bec:	1a08      	subs	r0, r1, r0
 8001bee:	40c4      	lsrs	r4, r0
 8001bf0:	0324      	lsls	r4, r4, #12
 8001bf2:	0b24      	lsrs	r4, r4, #12
 8001bf4:	e7e6      	b.n	8001bc4 <__aeabi_ui2d+0x20>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	2400      	movs	r4, #0
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	e7e2      	b.n	8001bc4 <__aeabi_ui2d+0x20>
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	0000041e 	.word	0x0000041e
 8001c04:	800fffff 	.word	0x800fffff

08001c08 <__aeabi_d2f>:
 8001c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c0a:	004c      	lsls	r4, r1, #1
 8001c0c:	0d64      	lsrs	r4, r4, #21
 8001c0e:	030b      	lsls	r3, r1, #12
 8001c10:	1c62      	adds	r2, r4, #1
 8001c12:	0a5b      	lsrs	r3, r3, #9
 8001c14:	0f46      	lsrs	r6, r0, #29
 8001c16:	0552      	lsls	r2, r2, #21
 8001c18:	0fc9      	lsrs	r1, r1, #31
 8001c1a:	431e      	orrs	r6, r3
 8001c1c:	00c5      	lsls	r5, r0, #3
 8001c1e:	0d52      	lsrs	r2, r2, #21
 8001c20:	2a01      	cmp	r2, #1
 8001c22:	dd29      	ble.n	8001c78 <__aeabi_d2f+0x70>
 8001c24:	4b37      	ldr	r3, [pc, #220]	; (8001d04 <__aeabi_d2f+0xfc>)
 8001c26:	18e7      	adds	r7, r4, r3
 8001c28:	2ffe      	cmp	r7, #254	; 0xfe
 8001c2a:	dc1c      	bgt.n	8001c66 <__aeabi_d2f+0x5e>
 8001c2c:	2f00      	cmp	r7, #0
 8001c2e:	dd3b      	ble.n	8001ca8 <__aeabi_d2f+0xa0>
 8001c30:	0180      	lsls	r0, r0, #6
 8001c32:	1e43      	subs	r3, r0, #1
 8001c34:	4198      	sbcs	r0, r3
 8001c36:	2207      	movs	r2, #7
 8001c38:	00f3      	lsls	r3, r6, #3
 8001c3a:	0f6d      	lsrs	r5, r5, #29
 8001c3c:	4303      	orrs	r3, r0
 8001c3e:	432b      	orrs	r3, r5
 8001c40:	401a      	ands	r2, r3
 8001c42:	2a00      	cmp	r2, #0
 8001c44:	d004      	beq.n	8001c50 <__aeabi_d2f+0x48>
 8001c46:	220f      	movs	r2, #15
 8001c48:	401a      	ands	r2, r3
 8001c4a:	2a04      	cmp	r2, #4
 8001c4c:	d000      	beq.n	8001c50 <__aeabi_d2f+0x48>
 8001c4e:	3304      	adds	r3, #4
 8001c50:	2280      	movs	r2, #128	; 0x80
 8001c52:	04d2      	lsls	r2, r2, #19
 8001c54:	401a      	ands	r2, r3
 8001c56:	d024      	beq.n	8001ca2 <__aeabi_d2f+0x9a>
 8001c58:	3701      	adds	r7, #1
 8001c5a:	b2fa      	uxtb	r2, r7
 8001c5c:	2fff      	cmp	r7, #255	; 0xff
 8001c5e:	d002      	beq.n	8001c66 <__aeabi_d2f+0x5e>
 8001c60:	019b      	lsls	r3, r3, #6
 8001c62:	0a58      	lsrs	r0, r3, #9
 8001c64:	e001      	b.n	8001c6a <__aeabi_d2f+0x62>
 8001c66:	22ff      	movs	r2, #255	; 0xff
 8001c68:	2000      	movs	r0, #0
 8001c6a:	0240      	lsls	r0, r0, #9
 8001c6c:	05d2      	lsls	r2, r2, #23
 8001c6e:	0a40      	lsrs	r0, r0, #9
 8001c70:	07c9      	lsls	r1, r1, #31
 8001c72:	4310      	orrs	r0, r2
 8001c74:	4308      	orrs	r0, r1
 8001c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	2c00      	cmp	r4, #0
 8001c7c:	d104      	bne.n	8001c88 <__aeabi_d2f+0x80>
 8001c7e:	2d00      	cmp	r5, #0
 8001c80:	d10a      	bne.n	8001c98 <__aeabi_d2f+0x90>
 8001c82:	2200      	movs	r2, #0
 8001c84:	2000      	movs	r0, #0
 8001c86:	e7f0      	b.n	8001c6a <__aeabi_d2f+0x62>
 8001c88:	2d00      	cmp	r5, #0
 8001c8a:	d0ec      	beq.n	8001c66 <__aeabi_d2f+0x5e>
 8001c8c:	2080      	movs	r0, #128	; 0x80
 8001c8e:	03c0      	lsls	r0, r0, #15
 8001c90:	4330      	orrs	r0, r6
 8001c92:	22ff      	movs	r2, #255	; 0xff
 8001c94:	e7e9      	b.n	8001c6a <__aeabi_d2f+0x62>
 8001c96:	2400      	movs	r4, #0
 8001c98:	2300      	movs	r3, #0
 8001c9a:	025b      	lsls	r3, r3, #9
 8001c9c:	0a58      	lsrs	r0, r3, #9
 8001c9e:	b2e2      	uxtb	r2, r4
 8001ca0:	e7e3      	b.n	8001c6a <__aeabi_d2f+0x62>
 8001ca2:	08db      	lsrs	r3, r3, #3
 8001ca4:	003c      	movs	r4, r7
 8001ca6:	e7f8      	b.n	8001c9a <__aeabi_d2f+0x92>
 8001ca8:	003b      	movs	r3, r7
 8001caa:	3317      	adds	r3, #23
 8001cac:	dbf3      	blt.n	8001c96 <__aeabi_d2f+0x8e>
 8001cae:	2380      	movs	r3, #128	; 0x80
 8001cb0:	041b      	lsls	r3, r3, #16
 8001cb2:	4333      	orrs	r3, r6
 8001cb4:	261e      	movs	r6, #30
 8001cb6:	1bf6      	subs	r6, r6, r7
 8001cb8:	2e1f      	cmp	r6, #31
 8001cba:	dd14      	ble.n	8001ce6 <__aeabi_d2f+0xde>
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	4252      	negs	r2, r2
 8001cc0:	1bd7      	subs	r7, r2, r7
 8001cc2:	001a      	movs	r2, r3
 8001cc4:	40fa      	lsrs	r2, r7
 8001cc6:	0017      	movs	r7, r2
 8001cc8:	2e20      	cmp	r6, #32
 8001cca:	d004      	beq.n	8001cd6 <__aeabi_d2f+0xce>
 8001ccc:	4a0e      	ldr	r2, [pc, #56]	; (8001d08 <__aeabi_d2f+0x100>)
 8001cce:	4694      	mov	ip, r2
 8001cd0:	4464      	add	r4, ip
 8001cd2:	40a3      	lsls	r3, r4
 8001cd4:	431d      	orrs	r5, r3
 8001cd6:	002b      	movs	r3, r5
 8001cd8:	1e5d      	subs	r5, r3, #1
 8001cda:	41ab      	sbcs	r3, r5
 8001cdc:	2207      	movs	r2, #7
 8001cde:	433b      	orrs	r3, r7
 8001ce0:	401a      	ands	r2, r3
 8001ce2:	2700      	movs	r7, #0
 8001ce4:	e7ad      	b.n	8001c42 <__aeabi_d2f+0x3a>
 8001ce6:	4a09      	ldr	r2, [pc, #36]	; (8001d0c <__aeabi_d2f+0x104>)
 8001ce8:	0028      	movs	r0, r5
 8001cea:	18a2      	adds	r2, r4, r2
 8001cec:	4095      	lsls	r5, r2
 8001cee:	4093      	lsls	r3, r2
 8001cf0:	1e6c      	subs	r4, r5, #1
 8001cf2:	41a5      	sbcs	r5, r4
 8001cf4:	40f0      	lsrs	r0, r6
 8001cf6:	2207      	movs	r2, #7
 8001cf8:	432b      	orrs	r3, r5
 8001cfa:	4303      	orrs	r3, r0
 8001cfc:	401a      	ands	r2, r3
 8001cfe:	2700      	movs	r7, #0
 8001d00:	e79f      	b.n	8001c42 <__aeabi_d2f+0x3a>
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	fffffc80 	.word	0xfffffc80
 8001d08:	fffffca2 	.word	0xfffffca2
 8001d0c:	fffffc82 	.word	0xfffffc82

08001d10 <__aeabi_cdrcmple>:
 8001d10:	4684      	mov	ip, r0
 8001d12:	1c10      	adds	r0, r2, #0
 8001d14:	4662      	mov	r2, ip
 8001d16:	468c      	mov	ip, r1
 8001d18:	1c19      	adds	r1, r3, #0
 8001d1a:	4663      	mov	r3, ip
 8001d1c:	e000      	b.n	8001d20 <__aeabi_cdcmpeq>
 8001d1e:	46c0      	nop			; (mov r8, r8)

08001d20 <__aeabi_cdcmpeq>:
 8001d20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001d22:	f000 f90f 	bl	8001f44 <__ledf2>
 8001d26:	2800      	cmp	r0, #0
 8001d28:	d401      	bmi.n	8001d2e <__aeabi_cdcmpeq+0xe>
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	42c8      	cmn	r0, r1
 8001d2e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001d30 <__aeabi_dcmpeq>:
 8001d30:	b510      	push	{r4, lr}
 8001d32:	f000 f867 	bl	8001e04 <__eqdf2>
 8001d36:	4240      	negs	r0, r0
 8001d38:	3001      	adds	r0, #1
 8001d3a:	bd10      	pop	{r4, pc}

08001d3c <__aeabi_dcmplt>:
 8001d3c:	b510      	push	{r4, lr}
 8001d3e:	f000 f901 	bl	8001f44 <__ledf2>
 8001d42:	2800      	cmp	r0, #0
 8001d44:	db01      	blt.n	8001d4a <__aeabi_dcmplt+0xe>
 8001d46:	2000      	movs	r0, #0
 8001d48:	bd10      	pop	{r4, pc}
 8001d4a:	2001      	movs	r0, #1
 8001d4c:	bd10      	pop	{r4, pc}
 8001d4e:	46c0      	nop			; (mov r8, r8)

08001d50 <__aeabi_dcmple>:
 8001d50:	b510      	push	{r4, lr}
 8001d52:	f000 f8f7 	bl	8001f44 <__ledf2>
 8001d56:	2800      	cmp	r0, #0
 8001d58:	dd01      	ble.n	8001d5e <__aeabi_dcmple+0xe>
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	bd10      	pop	{r4, pc}
 8001d5e:	2001      	movs	r0, #1
 8001d60:	bd10      	pop	{r4, pc}
 8001d62:	46c0      	nop			; (mov r8, r8)

08001d64 <__aeabi_dcmpgt>:
 8001d64:	b510      	push	{r4, lr}
 8001d66:	f000 f889 	bl	8001e7c <__gedf2>
 8001d6a:	2800      	cmp	r0, #0
 8001d6c:	dc01      	bgt.n	8001d72 <__aeabi_dcmpgt+0xe>
 8001d6e:	2000      	movs	r0, #0
 8001d70:	bd10      	pop	{r4, pc}
 8001d72:	2001      	movs	r0, #1
 8001d74:	bd10      	pop	{r4, pc}
 8001d76:	46c0      	nop			; (mov r8, r8)

08001d78 <__aeabi_dcmpge>:
 8001d78:	b510      	push	{r4, lr}
 8001d7a:	f000 f87f 	bl	8001e7c <__gedf2>
 8001d7e:	2800      	cmp	r0, #0
 8001d80:	da01      	bge.n	8001d86 <__aeabi_dcmpge+0xe>
 8001d82:	2000      	movs	r0, #0
 8001d84:	bd10      	pop	{r4, pc}
 8001d86:	2001      	movs	r0, #1
 8001d88:	bd10      	pop	{r4, pc}
 8001d8a:	46c0      	nop			; (mov r8, r8)

08001d8c <__clzsi2>:
 8001d8c:	211c      	movs	r1, #28
 8001d8e:	2301      	movs	r3, #1
 8001d90:	041b      	lsls	r3, r3, #16
 8001d92:	4298      	cmp	r0, r3
 8001d94:	d301      	bcc.n	8001d9a <__clzsi2+0xe>
 8001d96:	0c00      	lsrs	r0, r0, #16
 8001d98:	3910      	subs	r1, #16
 8001d9a:	0a1b      	lsrs	r3, r3, #8
 8001d9c:	4298      	cmp	r0, r3
 8001d9e:	d301      	bcc.n	8001da4 <__clzsi2+0x18>
 8001da0:	0a00      	lsrs	r0, r0, #8
 8001da2:	3908      	subs	r1, #8
 8001da4:	091b      	lsrs	r3, r3, #4
 8001da6:	4298      	cmp	r0, r3
 8001da8:	d301      	bcc.n	8001dae <__clzsi2+0x22>
 8001daa:	0900      	lsrs	r0, r0, #4
 8001dac:	3904      	subs	r1, #4
 8001dae:	a202      	add	r2, pc, #8	; (adr r2, 8001db8 <__clzsi2+0x2c>)
 8001db0:	5c10      	ldrb	r0, [r2, r0]
 8001db2:	1840      	adds	r0, r0, r1
 8001db4:	4770      	bx	lr
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	02020304 	.word	0x02020304
 8001dbc:	01010101 	.word	0x01010101
	...

08001dc8 <__aeabi_d2uiz>:
 8001dc8:	b570      	push	{r4, r5, r6, lr}
 8001dca:	2200      	movs	r2, #0
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <__aeabi_d2uiz+0x38>)
 8001dce:	0004      	movs	r4, r0
 8001dd0:	000d      	movs	r5, r1
 8001dd2:	f7ff ffd1 	bl	8001d78 <__aeabi_dcmpge>
 8001dd6:	2800      	cmp	r0, #0
 8001dd8:	d104      	bne.n	8001de4 <__aeabi_d2uiz+0x1c>
 8001dda:	0020      	movs	r0, r4
 8001ddc:	0029      	movs	r1, r5
 8001dde:	f7ff fe71 	bl	8001ac4 <__aeabi_d2iz>
 8001de2:	bd70      	pop	{r4, r5, r6, pc}
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <__aeabi_d2uiz+0x38>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	0020      	movs	r0, r4
 8001dea:	0029      	movs	r1, r5
 8001dec:	f7ff fb22 	bl	8001434 <__aeabi_dsub>
 8001df0:	f7ff fe68 	bl	8001ac4 <__aeabi_d2iz>
 8001df4:	2380      	movs	r3, #128	; 0x80
 8001df6:	061b      	lsls	r3, r3, #24
 8001df8:	469c      	mov	ip, r3
 8001dfa:	4460      	add	r0, ip
 8001dfc:	e7f1      	b.n	8001de2 <__aeabi_d2uiz+0x1a>
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	41e00000 	.word	0x41e00000

08001e04 <__eqdf2>:
 8001e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e06:	464f      	mov	r7, r9
 8001e08:	4646      	mov	r6, r8
 8001e0a:	46d6      	mov	lr, sl
 8001e0c:	4684      	mov	ip, r0
 8001e0e:	b5c0      	push	{r6, r7, lr}
 8001e10:	4680      	mov	r8, r0
 8001e12:	4e19      	ldr	r6, [pc, #100]	; (8001e78 <__eqdf2+0x74>)
 8001e14:	0318      	lsls	r0, r3, #12
 8001e16:	030f      	lsls	r7, r1, #12
 8001e18:	004d      	lsls	r5, r1, #1
 8001e1a:	0b00      	lsrs	r0, r0, #12
 8001e1c:	005c      	lsls	r4, r3, #1
 8001e1e:	4682      	mov	sl, r0
 8001e20:	0b3f      	lsrs	r7, r7, #12
 8001e22:	0d6d      	lsrs	r5, r5, #21
 8001e24:	0fc9      	lsrs	r1, r1, #31
 8001e26:	4691      	mov	r9, r2
 8001e28:	0d64      	lsrs	r4, r4, #21
 8001e2a:	0fdb      	lsrs	r3, r3, #31
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	42b5      	cmp	r5, r6
 8001e30:	d00a      	beq.n	8001e48 <__eqdf2+0x44>
 8001e32:	42b4      	cmp	r4, r6
 8001e34:	d003      	beq.n	8001e3e <__eqdf2+0x3a>
 8001e36:	42a5      	cmp	r5, r4
 8001e38:	d101      	bne.n	8001e3e <__eqdf2+0x3a>
 8001e3a:	4557      	cmp	r7, sl
 8001e3c:	d00c      	beq.n	8001e58 <__eqdf2+0x54>
 8001e3e:	bc1c      	pop	{r2, r3, r4}
 8001e40:	4690      	mov	r8, r2
 8001e42:	4699      	mov	r9, r3
 8001e44:	46a2      	mov	sl, r4
 8001e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e48:	4666      	mov	r6, ip
 8001e4a:	433e      	orrs	r6, r7
 8001e4c:	d1f7      	bne.n	8001e3e <__eqdf2+0x3a>
 8001e4e:	42ac      	cmp	r4, r5
 8001e50:	d1f5      	bne.n	8001e3e <__eqdf2+0x3a>
 8001e52:	4654      	mov	r4, sl
 8001e54:	4314      	orrs	r4, r2
 8001e56:	d1f2      	bne.n	8001e3e <__eqdf2+0x3a>
 8001e58:	2001      	movs	r0, #1
 8001e5a:	45c8      	cmp	r8, r9
 8001e5c:	d1ef      	bne.n	8001e3e <__eqdf2+0x3a>
 8001e5e:	4299      	cmp	r1, r3
 8001e60:	d007      	beq.n	8001e72 <__eqdf2+0x6e>
 8001e62:	2d00      	cmp	r5, #0
 8001e64:	d1eb      	bne.n	8001e3e <__eqdf2+0x3a>
 8001e66:	4663      	mov	r3, ip
 8001e68:	431f      	orrs	r7, r3
 8001e6a:	0038      	movs	r0, r7
 8001e6c:	1e47      	subs	r7, r0, #1
 8001e6e:	41b8      	sbcs	r0, r7
 8001e70:	e7e5      	b.n	8001e3e <__eqdf2+0x3a>
 8001e72:	2000      	movs	r0, #0
 8001e74:	e7e3      	b.n	8001e3e <__eqdf2+0x3a>
 8001e76:	46c0      	nop			; (mov r8, r8)
 8001e78:	000007ff 	.word	0x000007ff

08001e7c <__gedf2>:
 8001e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e7e:	464f      	mov	r7, r9
 8001e80:	4646      	mov	r6, r8
 8001e82:	46d6      	mov	lr, sl
 8001e84:	004d      	lsls	r5, r1, #1
 8001e86:	b5c0      	push	{r6, r7, lr}
 8001e88:	030e      	lsls	r6, r1, #12
 8001e8a:	0fc9      	lsrs	r1, r1, #31
 8001e8c:	468a      	mov	sl, r1
 8001e8e:	492c      	ldr	r1, [pc, #176]	; (8001f40 <__gedf2+0xc4>)
 8001e90:	031f      	lsls	r7, r3, #12
 8001e92:	005c      	lsls	r4, r3, #1
 8001e94:	4680      	mov	r8, r0
 8001e96:	0b36      	lsrs	r6, r6, #12
 8001e98:	0d6d      	lsrs	r5, r5, #21
 8001e9a:	4691      	mov	r9, r2
 8001e9c:	0b3f      	lsrs	r7, r7, #12
 8001e9e:	0d64      	lsrs	r4, r4, #21
 8001ea0:	0fdb      	lsrs	r3, r3, #31
 8001ea2:	428d      	cmp	r5, r1
 8001ea4:	d01e      	beq.n	8001ee4 <__gedf2+0x68>
 8001ea6:	428c      	cmp	r4, r1
 8001ea8:	d016      	beq.n	8001ed8 <__gedf2+0x5c>
 8001eaa:	2d00      	cmp	r5, #0
 8001eac:	d11e      	bne.n	8001eec <__gedf2+0x70>
 8001eae:	4330      	orrs	r0, r6
 8001eb0:	4684      	mov	ip, r0
 8001eb2:	2c00      	cmp	r4, #0
 8001eb4:	d101      	bne.n	8001eba <__gedf2+0x3e>
 8001eb6:	433a      	orrs	r2, r7
 8001eb8:	d023      	beq.n	8001f02 <__gedf2+0x86>
 8001eba:	4662      	mov	r2, ip
 8001ebc:	2a00      	cmp	r2, #0
 8001ebe:	d01a      	beq.n	8001ef6 <__gedf2+0x7a>
 8001ec0:	459a      	cmp	sl, r3
 8001ec2:	d029      	beq.n	8001f18 <__gedf2+0x9c>
 8001ec4:	4651      	mov	r1, sl
 8001ec6:	2002      	movs	r0, #2
 8001ec8:	3901      	subs	r1, #1
 8001eca:	4008      	ands	r0, r1
 8001ecc:	3801      	subs	r0, #1
 8001ece:	bc1c      	pop	{r2, r3, r4}
 8001ed0:	4690      	mov	r8, r2
 8001ed2:	4699      	mov	r9, r3
 8001ed4:	46a2      	mov	sl, r4
 8001ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed8:	0039      	movs	r1, r7
 8001eda:	4311      	orrs	r1, r2
 8001edc:	d0e5      	beq.n	8001eaa <__gedf2+0x2e>
 8001ede:	2002      	movs	r0, #2
 8001ee0:	4240      	negs	r0, r0
 8001ee2:	e7f4      	b.n	8001ece <__gedf2+0x52>
 8001ee4:	4330      	orrs	r0, r6
 8001ee6:	d1fa      	bne.n	8001ede <__gedf2+0x62>
 8001ee8:	42ac      	cmp	r4, r5
 8001eea:	d00f      	beq.n	8001f0c <__gedf2+0x90>
 8001eec:	2c00      	cmp	r4, #0
 8001eee:	d10f      	bne.n	8001f10 <__gedf2+0x94>
 8001ef0:	433a      	orrs	r2, r7
 8001ef2:	d0e7      	beq.n	8001ec4 <__gedf2+0x48>
 8001ef4:	e00c      	b.n	8001f10 <__gedf2+0x94>
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	4393      	bics	r3, r2
 8001efc:	0018      	movs	r0, r3
 8001efe:	3001      	adds	r0, #1
 8001f00:	e7e5      	b.n	8001ece <__gedf2+0x52>
 8001f02:	4663      	mov	r3, ip
 8001f04:	2000      	movs	r0, #0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0e1      	beq.n	8001ece <__gedf2+0x52>
 8001f0a:	e7db      	b.n	8001ec4 <__gedf2+0x48>
 8001f0c:	433a      	orrs	r2, r7
 8001f0e:	d1e6      	bne.n	8001ede <__gedf2+0x62>
 8001f10:	459a      	cmp	sl, r3
 8001f12:	d1d7      	bne.n	8001ec4 <__gedf2+0x48>
 8001f14:	42a5      	cmp	r5, r4
 8001f16:	dcd5      	bgt.n	8001ec4 <__gedf2+0x48>
 8001f18:	42a5      	cmp	r5, r4
 8001f1a:	db05      	blt.n	8001f28 <__gedf2+0xac>
 8001f1c:	42be      	cmp	r6, r7
 8001f1e:	d8d1      	bhi.n	8001ec4 <__gedf2+0x48>
 8001f20:	d008      	beq.n	8001f34 <__gedf2+0xb8>
 8001f22:	2000      	movs	r0, #0
 8001f24:	42be      	cmp	r6, r7
 8001f26:	d2d2      	bcs.n	8001ece <__gedf2+0x52>
 8001f28:	4650      	mov	r0, sl
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	3801      	subs	r0, #1
 8001f2e:	4398      	bics	r0, r3
 8001f30:	3001      	adds	r0, #1
 8001f32:	e7cc      	b.n	8001ece <__gedf2+0x52>
 8001f34:	45c8      	cmp	r8, r9
 8001f36:	d8c5      	bhi.n	8001ec4 <__gedf2+0x48>
 8001f38:	2000      	movs	r0, #0
 8001f3a:	45c8      	cmp	r8, r9
 8001f3c:	d3f4      	bcc.n	8001f28 <__gedf2+0xac>
 8001f3e:	e7c6      	b.n	8001ece <__gedf2+0x52>
 8001f40:	000007ff 	.word	0x000007ff

08001f44 <__ledf2>:
 8001f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f46:	464f      	mov	r7, r9
 8001f48:	4646      	mov	r6, r8
 8001f4a:	46d6      	mov	lr, sl
 8001f4c:	004d      	lsls	r5, r1, #1
 8001f4e:	b5c0      	push	{r6, r7, lr}
 8001f50:	030e      	lsls	r6, r1, #12
 8001f52:	0fc9      	lsrs	r1, r1, #31
 8001f54:	468a      	mov	sl, r1
 8001f56:	492e      	ldr	r1, [pc, #184]	; (8002010 <__ledf2+0xcc>)
 8001f58:	031f      	lsls	r7, r3, #12
 8001f5a:	005c      	lsls	r4, r3, #1
 8001f5c:	4680      	mov	r8, r0
 8001f5e:	0b36      	lsrs	r6, r6, #12
 8001f60:	0d6d      	lsrs	r5, r5, #21
 8001f62:	4691      	mov	r9, r2
 8001f64:	0b3f      	lsrs	r7, r7, #12
 8001f66:	0d64      	lsrs	r4, r4, #21
 8001f68:	0fdb      	lsrs	r3, r3, #31
 8001f6a:	428d      	cmp	r5, r1
 8001f6c:	d018      	beq.n	8001fa0 <__ledf2+0x5c>
 8001f6e:	428c      	cmp	r4, r1
 8001f70:	d011      	beq.n	8001f96 <__ledf2+0x52>
 8001f72:	2d00      	cmp	r5, #0
 8001f74:	d118      	bne.n	8001fa8 <__ledf2+0x64>
 8001f76:	4330      	orrs	r0, r6
 8001f78:	4684      	mov	ip, r0
 8001f7a:	2c00      	cmp	r4, #0
 8001f7c:	d11e      	bne.n	8001fbc <__ledf2+0x78>
 8001f7e:	433a      	orrs	r2, r7
 8001f80:	d11c      	bne.n	8001fbc <__ledf2+0x78>
 8001f82:	4663      	mov	r3, ip
 8001f84:	2000      	movs	r0, #0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d030      	beq.n	8001fec <__ledf2+0xa8>
 8001f8a:	4651      	mov	r1, sl
 8001f8c:	2002      	movs	r0, #2
 8001f8e:	3901      	subs	r1, #1
 8001f90:	4008      	ands	r0, r1
 8001f92:	3801      	subs	r0, #1
 8001f94:	e02a      	b.n	8001fec <__ledf2+0xa8>
 8001f96:	0039      	movs	r1, r7
 8001f98:	4311      	orrs	r1, r2
 8001f9a:	d0ea      	beq.n	8001f72 <__ledf2+0x2e>
 8001f9c:	2002      	movs	r0, #2
 8001f9e:	e025      	b.n	8001fec <__ledf2+0xa8>
 8001fa0:	4330      	orrs	r0, r6
 8001fa2:	d1fb      	bne.n	8001f9c <__ledf2+0x58>
 8001fa4:	42ac      	cmp	r4, r5
 8001fa6:	d026      	beq.n	8001ff6 <__ledf2+0xb2>
 8001fa8:	2c00      	cmp	r4, #0
 8001faa:	d126      	bne.n	8001ffa <__ledf2+0xb6>
 8001fac:	433a      	orrs	r2, r7
 8001fae:	d124      	bne.n	8001ffa <__ledf2+0xb6>
 8001fb0:	4651      	mov	r1, sl
 8001fb2:	2002      	movs	r0, #2
 8001fb4:	3901      	subs	r1, #1
 8001fb6:	4008      	ands	r0, r1
 8001fb8:	3801      	subs	r0, #1
 8001fba:	e017      	b.n	8001fec <__ledf2+0xa8>
 8001fbc:	4662      	mov	r2, ip
 8001fbe:	2a00      	cmp	r2, #0
 8001fc0:	d00f      	beq.n	8001fe2 <__ledf2+0x9e>
 8001fc2:	459a      	cmp	sl, r3
 8001fc4:	d1e1      	bne.n	8001f8a <__ledf2+0x46>
 8001fc6:	42a5      	cmp	r5, r4
 8001fc8:	db05      	blt.n	8001fd6 <__ledf2+0x92>
 8001fca:	42be      	cmp	r6, r7
 8001fcc:	d8dd      	bhi.n	8001f8a <__ledf2+0x46>
 8001fce:	d019      	beq.n	8002004 <__ledf2+0xc0>
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	42be      	cmp	r6, r7
 8001fd4:	d20a      	bcs.n	8001fec <__ledf2+0xa8>
 8001fd6:	4650      	mov	r0, sl
 8001fd8:	2301      	movs	r3, #1
 8001fda:	3801      	subs	r0, #1
 8001fdc:	4398      	bics	r0, r3
 8001fde:	3001      	adds	r0, #1
 8001fe0:	e004      	b.n	8001fec <__ledf2+0xa8>
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	4393      	bics	r3, r2
 8001fe8:	0018      	movs	r0, r3
 8001fea:	3001      	adds	r0, #1
 8001fec:	bc1c      	pop	{r2, r3, r4}
 8001fee:	4690      	mov	r8, r2
 8001ff0:	4699      	mov	r9, r3
 8001ff2:	46a2      	mov	sl, r4
 8001ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ff6:	433a      	orrs	r2, r7
 8001ff8:	d1d0      	bne.n	8001f9c <__ledf2+0x58>
 8001ffa:	459a      	cmp	sl, r3
 8001ffc:	d1c5      	bne.n	8001f8a <__ledf2+0x46>
 8001ffe:	42a5      	cmp	r5, r4
 8002000:	dcc3      	bgt.n	8001f8a <__ledf2+0x46>
 8002002:	e7e0      	b.n	8001fc6 <__ledf2+0x82>
 8002004:	45c8      	cmp	r8, r9
 8002006:	d8c0      	bhi.n	8001f8a <__ledf2+0x46>
 8002008:	2000      	movs	r0, #0
 800200a:	45c8      	cmp	r8, r9
 800200c:	d3e3      	bcc.n	8001fd6 <__ledf2+0x92>
 800200e:	e7ed      	b.n	8001fec <__ledf2+0xa8>
 8002010:	000007ff 	.word	0x000007ff

08002014 <MS5611_Reset>:
 ;	Description: 	Reset MS5611
 ; 	Inputs: 		Nothing
 ;	Returns:		Nothing
**********************************************************************/
static void MS5611_Reset(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af02      	add	r7, sp, #8
	uint8_t I2C_COMMAND[1] = {0};
 800201a:	1d3b      	adds	r3, r7, #4
 800201c:	2200      	movs	r2, #0
 800201e:	701a      	strb	r2, [r3, #0]
	I2C_COMMAND[0] = MS5611_RESET;
 8002020:	1d3b      	adds	r3, r7, #4
 8002022:	221e      	movs	r2, #30
 8002024:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Master_Transmit(&hi2c1, (MS5611_DEVICE_ADDR<<1), I2C_COMMAND, sizeof(I2C_COMMAND), 10);
 8002026:	1d3a      	adds	r2, r7, #4
 8002028:	4805      	ldr	r0, [pc, #20]	; (8002040 <MS5611_Reset+0x2c>)
 800202a:	230a      	movs	r3, #10
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	2301      	movs	r3, #1
 8002030:	21ee      	movs	r1, #238	; 0xee
 8002032:	f001 f9f5 	bl	8003420 <HAL_I2C_Master_Transmit>
}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	46bd      	mov	sp, r7
 800203a:	b002      	add	sp, #8
 800203c:	bd80      	pop	{r7, pc}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	20000030 	.word	0x20000030

08002044 <MS5611_ReadCalibrationData>:
 ;	Description: 	Read Calibration Parameters from MS5611
 ; 	Inputs: 		Nothing
 ;	Returns:		Nothing
**********************************************************************/
static void MS5611_ReadCalibrationData(void)
{
 8002044:	b590      	push	{r4, r7, lr}
 8002046:	b087      	sub	sp, #28
 8002048:	af02      	add	r7, sp, #8
	uint8_t rx_Buffer[2] = {0};
 800204a:	240c      	movs	r4, #12
 800204c:	193b      	adds	r3, r7, r4
 800204e:	2200      	movs	r2, #0
 8002050:	801a      	strh	r2, [r3, #0]

	uint8_t I2C_COMMAND[6] = {0};
 8002052:	1d3b      	adds	r3, r7, #4
 8002054:	0018      	movs	r0, r3
 8002056:	2306      	movs	r3, #6
 8002058:	001a      	movs	r2, r3
 800205a:	2100      	movs	r1, #0
 800205c:	f002 fbd4 	bl	8004808 <memset>
	I2C_COMMAND[0] = PROM_READ_C1;
 8002060:	1d3b      	adds	r3, r7, #4
 8002062:	22a2      	movs	r2, #162	; 0xa2
 8002064:	701a      	strb	r2, [r3, #0]
	I2C_COMMAND[1] = PROM_READ_C2;
 8002066:	1d3b      	adds	r3, r7, #4
 8002068:	22a4      	movs	r2, #164	; 0xa4
 800206a:	705a      	strb	r2, [r3, #1]
	I2C_COMMAND[2] = PROM_READ_C3;
 800206c:	1d3b      	adds	r3, r7, #4
 800206e:	22a6      	movs	r2, #166	; 0xa6
 8002070:	709a      	strb	r2, [r3, #2]
	I2C_COMMAND[3] = PROM_READ_C4;
 8002072:	1d3b      	adds	r3, r7, #4
 8002074:	22a8      	movs	r2, #168	; 0xa8
 8002076:	70da      	strb	r2, [r3, #3]
	I2C_COMMAND[4] = PROM_READ_C5;
 8002078:	1d3b      	adds	r3, r7, #4
 800207a:	22aa      	movs	r2, #170	; 0xaa
 800207c:	711a      	strb	r2, [r3, #4]
	I2C_COMMAND[5] = PROM_READ_C6;
 800207e:	1d3b      	adds	r3, r7, #4
 8002080:	22ac      	movs	r2, #172	; 0xac
 8002082:	715a      	strb	r2, [r3, #5]

	HAL_I2C_Master_Transmit(&hi2c1, (MS5611_DEVICE_ADDR<<1), &I2C_COMMAND[0], sizeof(I2C_COMMAND[0]), 10);
 8002084:	1d3a      	adds	r2, r7, #4
 8002086:	4858      	ldr	r0, [pc, #352]	; (80021e8 <MS5611_ReadCalibrationData+0x1a4>)
 8002088:	230a      	movs	r3, #10
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	2301      	movs	r3, #1
 800208e:	21ee      	movs	r1, #238	; 0xee
 8002090:	f001 f9c6 	bl	8003420 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (MS5611_DEVICE_ADDR<<1), rx_Buffer, sizeof(rx_Buffer), 10);
 8002094:	193a      	adds	r2, r7, r4
 8002096:	4854      	ldr	r0, [pc, #336]	; (80021e8 <MS5611_ReadCalibrationData+0x1a4>)
 8002098:	230a      	movs	r3, #10
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	2302      	movs	r3, #2
 800209e:	21ee      	movs	r1, #238	; 0xee
 80020a0:	f001 fac6 	bl	8003630 <HAL_I2C_Master_Receive>
	CalibrationParameters.C1 = ((rx_Buffer[0] << 8) | (rx_Buffer[1]));
 80020a4:	193b      	adds	r3, r7, r4
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	021b      	lsls	r3, r3, #8
 80020aa:	b21a      	sxth	r2, r3
 80020ac:	193b      	adds	r3, r7, r4
 80020ae:	785b      	ldrb	r3, [r3, #1]
 80020b0:	b21b      	sxth	r3, r3
 80020b2:	4313      	orrs	r3, r2
 80020b4:	b21b      	sxth	r3, r3
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	4b4c      	ldr	r3, [pc, #304]	; (80021ec <MS5611_ReadCalibrationData+0x1a8>)
 80020ba:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Master_Transmit(&hi2c1, (MS5611_DEVICE_ADDR<<1), &I2C_COMMAND[1], sizeof(I2C_COMMAND[1]), 10);
 80020bc:	1d3b      	adds	r3, r7, #4
 80020be:	1c5a      	adds	r2, r3, #1
 80020c0:	4849      	ldr	r0, [pc, #292]	; (80021e8 <MS5611_ReadCalibrationData+0x1a4>)
 80020c2:	230a      	movs	r3, #10
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	2301      	movs	r3, #1
 80020c8:	21ee      	movs	r1, #238	; 0xee
 80020ca:	f001 f9a9 	bl	8003420 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (MS5611_DEVICE_ADDR<<1), rx_Buffer, sizeof(rx_Buffer), 10);
 80020ce:	193a      	adds	r2, r7, r4
 80020d0:	4845      	ldr	r0, [pc, #276]	; (80021e8 <MS5611_ReadCalibrationData+0x1a4>)
 80020d2:	230a      	movs	r3, #10
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	2302      	movs	r3, #2
 80020d8:	21ee      	movs	r1, #238	; 0xee
 80020da:	f001 faa9 	bl	8003630 <HAL_I2C_Master_Receive>
	CalibrationParameters.C2 = ((rx_Buffer[0] << 8) | (rx_Buffer[1]));
 80020de:	193b      	adds	r3, r7, r4
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	021b      	lsls	r3, r3, #8
 80020e4:	b21a      	sxth	r2, r3
 80020e6:	193b      	adds	r3, r7, r4
 80020e8:	785b      	ldrb	r3, [r3, #1]
 80020ea:	b21b      	sxth	r3, r3
 80020ec:	4313      	orrs	r3, r2
 80020ee:	b21b      	sxth	r3, r3
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	4b3e      	ldr	r3, [pc, #248]	; (80021ec <MS5611_ReadCalibrationData+0x1a8>)
 80020f4:	805a      	strh	r2, [r3, #2]

	HAL_I2C_Master_Transmit(&hi2c1, (MS5611_DEVICE_ADDR<<1), &I2C_COMMAND[2], sizeof(I2C_COMMAND[2]), 10);
 80020f6:	1d3b      	adds	r3, r7, #4
 80020f8:	1c9a      	adds	r2, r3, #2
 80020fa:	483b      	ldr	r0, [pc, #236]	; (80021e8 <MS5611_ReadCalibrationData+0x1a4>)
 80020fc:	230a      	movs	r3, #10
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	2301      	movs	r3, #1
 8002102:	21ee      	movs	r1, #238	; 0xee
 8002104:	f001 f98c 	bl	8003420 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (MS5611_DEVICE_ADDR<<1), rx_Buffer, sizeof(rx_Buffer), 10);
 8002108:	193a      	adds	r2, r7, r4
 800210a:	4837      	ldr	r0, [pc, #220]	; (80021e8 <MS5611_ReadCalibrationData+0x1a4>)
 800210c:	230a      	movs	r3, #10
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	2302      	movs	r3, #2
 8002112:	21ee      	movs	r1, #238	; 0xee
 8002114:	f001 fa8c 	bl	8003630 <HAL_I2C_Master_Receive>
	CalibrationParameters.C3 = ((rx_Buffer[0] << 8) | (rx_Buffer[1]));
 8002118:	193b      	adds	r3, r7, r4
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	021b      	lsls	r3, r3, #8
 800211e:	b21a      	sxth	r2, r3
 8002120:	193b      	adds	r3, r7, r4
 8002122:	785b      	ldrb	r3, [r3, #1]
 8002124:	b21b      	sxth	r3, r3
 8002126:	4313      	orrs	r3, r2
 8002128:	b21b      	sxth	r3, r3
 800212a:	b29a      	uxth	r2, r3
 800212c:	4b2f      	ldr	r3, [pc, #188]	; (80021ec <MS5611_ReadCalibrationData+0x1a8>)
 800212e:	809a      	strh	r2, [r3, #4]

	HAL_I2C_Master_Transmit(&hi2c1, (MS5611_DEVICE_ADDR<<1), &I2C_COMMAND[3], sizeof(I2C_COMMAND[3]), 10);
 8002130:	1d3b      	adds	r3, r7, #4
 8002132:	1cda      	adds	r2, r3, #3
 8002134:	482c      	ldr	r0, [pc, #176]	; (80021e8 <MS5611_ReadCalibrationData+0x1a4>)
 8002136:	230a      	movs	r3, #10
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	2301      	movs	r3, #1
 800213c:	21ee      	movs	r1, #238	; 0xee
 800213e:	f001 f96f 	bl	8003420 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (MS5611_DEVICE_ADDR<<1), rx_Buffer, sizeof(rx_Buffer), 10);
 8002142:	193a      	adds	r2, r7, r4
 8002144:	4828      	ldr	r0, [pc, #160]	; (80021e8 <MS5611_ReadCalibrationData+0x1a4>)
 8002146:	230a      	movs	r3, #10
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	2302      	movs	r3, #2
 800214c:	21ee      	movs	r1, #238	; 0xee
 800214e:	f001 fa6f 	bl	8003630 <HAL_I2C_Master_Receive>
	CalibrationParameters.C4 = ((rx_Buffer[0] << 8) | (rx_Buffer[1]));
 8002152:	193b      	adds	r3, r7, r4
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	021b      	lsls	r3, r3, #8
 8002158:	b21a      	sxth	r2, r3
 800215a:	193b      	adds	r3, r7, r4
 800215c:	785b      	ldrb	r3, [r3, #1]
 800215e:	b21b      	sxth	r3, r3
 8002160:	4313      	orrs	r3, r2
 8002162:	b21b      	sxth	r3, r3
 8002164:	b29a      	uxth	r2, r3
 8002166:	4b21      	ldr	r3, [pc, #132]	; (80021ec <MS5611_ReadCalibrationData+0x1a8>)
 8002168:	80da      	strh	r2, [r3, #6]

	HAL_I2C_Master_Transmit(&hi2c1, (MS5611_DEVICE_ADDR<<1), &I2C_COMMAND[4], sizeof(I2C_COMMAND[4]), 10);
 800216a:	1d3b      	adds	r3, r7, #4
 800216c:	1d1a      	adds	r2, r3, #4
 800216e:	481e      	ldr	r0, [pc, #120]	; (80021e8 <MS5611_ReadCalibrationData+0x1a4>)
 8002170:	230a      	movs	r3, #10
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	2301      	movs	r3, #1
 8002176:	21ee      	movs	r1, #238	; 0xee
 8002178:	f001 f952 	bl	8003420 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (MS5611_DEVICE_ADDR<<1), rx_Buffer, sizeof(rx_Buffer), 10);
 800217c:	193a      	adds	r2, r7, r4
 800217e:	481a      	ldr	r0, [pc, #104]	; (80021e8 <MS5611_ReadCalibrationData+0x1a4>)
 8002180:	230a      	movs	r3, #10
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	2302      	movs	r3, #2
 8002186:	21ee      	movs	r1, #238	; 0xee
 8002188:	f001 fa52 	bl	8003630 <HAL_I2C_Master_Receive>
	CalibrationParameters.C5 = ((rx_Buffer[0] << 8) | (rx_Buffer[1]));
 800218c:	193b      	adds	r3, r7, r4
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	021b      	lsls	r3, r3, #8
 8002192:	b21a      	sxth	r2, r3
 8002194:	193b      	adds	r3, r7, r4
 8002196:	785b      	ldrb	r3, [r3, #1]
 8002198:	b21b      	sxth	r3, r3
 800219a:	4313      	orrs	r3, r2
 800219c:	b21b      	sxth	r3, r3
 800219e:	b29a      	uxth	r2, r3
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <MS5611_ReadCalibrationData+0x1a8>)
 80021a2:	811a      	strh	r2, [r3, #8]

	HAL_I2C_Master_Transmit(&hi2c1, (MS5611_DEVICE_ADDR<<1), &I2C_COMMAND[5], sizeof(I2C_COMMAND[5]), 10);
 80021a4:	1d3b      	adds	r3, r7, #4
 80021a6:	1d5a      	adds	r2, r3, #5
 80021a8:	480f      	ldr	r0, [pc, #60]	; (80021e8 <MS5611_ReadCalibrationData+0x1a4>)
 80021aa:	230a      	movs	r3, #10
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	2301      	movs	r3, #1
 80021b0:	21ee      	movs	r1, #238	; 0xee
 80021b2:	f001 f935 	bl	8003420 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (MS5611_DEVICE_ADDR<<1), rx_Buffer, sizeof(rx_Buffer), 10);
 80021b6:	193a      	adds	r2, r7, r4
 80021b8:	480b      	ldr	r0, [pc, #44]	; (80021e8 <MS5611_ReadCalibrationData+0x1a4>)
 80021ba:	230a      	movs	r3, #10
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	2302      	movs	r3, #2
 80021c0:	21ee      	movs	r1, #238	; 0xee
 80021c2:	f001 fa35 	bl	8003630 <HAL_I2C_Master_Receive>
	CalibrationParameters.C6 = ((rx_Buffer[0] << 8) | (rx_Buffer[1]));
 80021c6:	193b      	adds	r3, r7, r4
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	021b      	lsls	r3, r3, #8
 80021cc:	b21a      	sxth	r2, r3
 80021ce:	193b      	adds	r3, r7, r4
 80021d0:	785b      	ldrb	r3, [r3, #1]
 80021d2:	b21b      	sxth	r3, r3
 80021d4:	4313      	orrs	r3, r2
 80021d6:	b21b      	sxth	r3, r3
 80021d8:	b29a      	uxth	r2, r3
 80021da:	4b04      	ldr	r3, [pc, #16]	; (80021ec <MS5611_ReadCalibrationData+0x1a8>)
 80021dc:	815a      	strh	r2, [r3, #10]
}
 80021de:	46c0      	nop			; (mov r8, r8)
 80021e0:	46bd      	mov	sp, r7
 80021e2:	b005      	add	sp, #20
 80021e4:	bd90      	pop	{r4, r7, pc}
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	20000030 	.word	0x20000030
 80021ec:	200000a8 	.word	0x200000a8

080021f0 <MS5611_ReadDigitalValues>:
 ;	Description: 	Read Pressure and Temperature values from MS5611
 ; 	Inputs: 		Sampling Rate
 ;	Returns:		Nothing
**********************************************************************/
static void MS5611_ReadDigitalValues(int osr)
{
 80021f0:	b5b0      	push	{r4, r5, r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af02      	add	r7, sp, #8
 80021f6:	6078      	str	r0, [r7, #4]
	uint8_t rx_Buffer[3] = {0};
 80021f8:	2314      	movs	r3, #20
 80021fa:	18fb      	adds	r3, r7, r3
 80021fc:	0018      	movs	r0, r3
 80021fe:	2303      	movs	r3, #3
 8002200:	001a      	movs	r2, r3
 8002202:	2100      	movs	r1, #0
 8002204:	f002 fb00 	bl	8004808 <memset>

	uint8_t I2C_COMMAND[11] = {0};
 8002208:	2108      	movs	r1, #8
 800220a:	000c      	movs	r4, r1
 800220c:	187b      	adds	r3, r7, r1
 800220e:	0018      	movs	r0, r3
 8002210:	230b      	movs	r3, #11
 8002212:	001a      	movs	r2, r3
 8002214:	2100      	movs	r1, #0
 8002216:	f002 faf7 	bl	8004808 <memset>
	I2C_COMMAND[0] = D1_OSR_256;
 800221a:	0021      	movs	r1, r4
 800221c:	187b      	adds	r3, r7, r1
 800221e:	2240      	movs	r2, #64	; 0x40
 8002220:	701a      	strb	r2, [r3, #0]
	I2C_COMMAND[1] = D1_OSR_512;
 8002222:	187b      	adds	r3, r7, r1
 8002224:	2242      	movs	r2, #66	; 0x42
 8002226:	705a      	strb	r2, [r3, #1]
	I2C_COMMAND[2] = D1_OSR_1024;
 8002228:	187b      	adds	r3, r7, r1
 800222a:	2244      	movs	r2, #68	; 0x44
 800222c:	709a      	strb	r2, [r3, #2]
	I2C_COMMAND[3] = D1_OSR_2048;
 800222e:	187b      	adds	r3, r7, r1
 8002230:	2246      	movs	r2, #70	; 0x46
 8002232:	70da      	strb	r2, [r3, #3]
	I2C_COMMAND[4] = D1_OSR_4096;
 8002234:	187b      	adds	r3, r7, r1
 8002236:	2248      	movs	r2, #72	; 0x48
 8002238:	711a      	strb	r2, [r3, #4]
	I2C_COMMAND[5] = D2_OSR_256;
 800223a:	187b      	adds	r3, r7, r1
 800223c:	2250      	movs	r2, #80	; 0x50
 800223e:	715a      	strb	r2, [r3, #5]
	I2C_COMMAND[6] = D2_OSR_512;
 8002240:	187b      	adds	r3, r7, r1
 8002242:	2252      	movs	r2, #82	; 0x52
 8002244:	719a      	strb	r2, [r3, #6]
	I2C_COMMAND[7] = D2_OSR_1024;
 8002246:	187b      	adds	r3, r7, r1
 8002248:	2254      	movs	r2, #84	; 0x54
 800224a:	71da      	strb	r2, [r3, #7]
	I2C_COMMAND[8] = D2_OSR_2048;
 800224c:	187b      	adds	r3, r7, r1
 800224e:	2256      	movs	r2, #86	; 0x56
 8002250:	721a      	strb	r2, [r3, #8]
	I2C_COMMAND[9] = D2_OSR_4096;
 8002252:	187b      	adds	r3, r7, r1
 8002254:	2258      	movs	r2, #88	; 0x58
 8002256:	725a      	strb	r2, [r3, #9]
	I2C_COMMAND[10] = ADC_READ;
 8002258:	187b      	adds	r3, r7, r1
 800225a:	2200      	movs	r2, #0
 800225c:	729a      	strb	r2, [r3, #10]

	switch(osr)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2280      	movs	r2, #128	; 0x80
 8002262:	00d2      	lsls	r2, r2, #3
 8002264:	4293      	cmp	r3, r2
 8002266:	d100      	bne.n	800226a <MS5611_ReadDigitalValues+0x7a>
 8002268:	e0c8      	b.n	80023fc <MS5611_ReadDigitalValues+0x20c>
 800226a:	2280      	movs	r2, #128	; 0x80
 800226c:	00d2      	lsls	r2, r2, #3
 800226e:	4293      	cmp	r3, r2
 8002270:	dc08      	bgt.n	8002284 <MS5611_ReadDigitalValues+0x94>
 8002272:	2280      	movs	r2, #128	; 0x80
 8002274:	0052      	lsls	r2, r2, #1
 8002276:	4293      	cmp	r3, r2
 8002278:	d00f      	beq.n	800229a <MS5611_ReadDigitalValues+0xaa>
 800227a:	2280      	movs	r2, #128	; 0x80
 800227c:	0092      	lsls	r2, r2, #2
 800227e:	4293      	cmp	r3, r2
 8002280:	d063      	beq.n	800234a <MS5611_ReadDigitalValues+0x15a>
 8002282:	e1cd      	b.n	8002620 <MS5611_ReadDigitalValues+0x430>
 8002284:	2280      	movs	r2, #128	; 0x80
 8002286:	0112      	lsls	r2, r2, #4
 8002288:	4293      	cmp	r3, r2
 800228a:	d100      	bne.n	800228e <MS5611_ReadDigitalValues+0x9e>
 800228c:	e10f      	b.n	80024ae <MS5611_ReadDigitalValues+0x2be>
 800228e:	2280      	movs	r2, #128	; 0x80
 8002290:	0152      	lsls	r2, r2, #5
 8002292:	4293      	cmp	r3, r2
 8002294:	d100      	bne.n	8002298 <MS5611_ReadDigitalValues+0xa8>
 8002296:	e164      	b.n	8002562 <MS5611_ReadDigitalValues+0x372>
 8002298:	e1c2      	b.n	8002620 <MS5611_ReadDigitalValues+0x430>
	{
	case 256:
		HAL_I2C_Master_Transmit(&hi2c1, (MS5611_DEVICE_ADDR<<1), &I2C_COMMAND[0], sizeof(I2C_COMMAND[0]), 10);
 800229a:	2508      	movs	r5, #8
 800229c:	197a      	adds	r2, r7, r5
 800229e:	48de      	ldr	r0, [pc, #888]	; (8002618 <MS5611_ReadDigitalValues+0x428>)
 80022a0:	230a      	movs	r3, #10
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	2301      	movs	r3, #1
 80022a6:	21ee      	movs	r1, #238	; 0xee
 80022a8:	f001 f8ba 	bl	8003420 <HAL_I2C_Master_Transmit>
		HAL_Delay(50);
 80022ac:	2032      	movs	r0, #50	; 0x32
 80022ae:	f000 fddb 	bl	8002e68 <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c1, (MS5611_DEVICE_ADDR<<1), &I2C_COMMAND[10], sizeof(I2C_COMMAND[10]), 10);
 80022b2:	197b      	adds	r3, r7, r5
 80022b4:	330a      	adds	r3, #10
 80022b6:	001a      	movs	r2, r3
 80022b8:	48d7      	ldr	r0, [pc, #860]	; (8002618 <MS5611_ReadDigitalValues+0x428>)
 80022ba:	230a      	movs	r3, #10
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	2301      	movs	r3, #1
 80022c0:	21ee      	movs	r1, #238	; 0xee
 80022c2:	f001 f8ad 	bl	8003420 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, (MS5611_DEVICE_ADDR<<1), rx_Buffer, sizeof(rx_Buffer), 10);
 80022c6:	2414      	movs	r4, #20
 80022c8:	193a      	adds	r2, r7, r4
 80022ca:	48d3      	ldr	r0, [pc, #844]	; (8002618 <MS5611_ReadDigitalValues+0x428>)
 80022cc:	230a      	movs	r3, #10
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	2303      	movs	r3, #3
 80022d2:	21ee      	movs	r1, #238	; 0xee
 80022d4:	f001 f9ac 	bl	8003630 <HAL_I2C_Master_Receive>
		DigitalValues.D1 = ((rx_Buffer[0] << 16) | (rx_Buffer[1] << 8) | (rx_Buffer[2]));
 80022d8:	193b      	adds	r3, r7, r4
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	041a      	lsls	r2, r3, #16
 80022de:	193b      	adds	r3, r7, r4
 80022e0:	785b      	ldrb	r3, [r3, #1]
 80022e2:	021b      	lsls	r3, r3, #8
 80022e4:	4313      	orrs	r3, r2
 80022e6:	193a      	adds	r2, r7, r4
 80022e8:	7892      	ldrb	r2, [r2, #2]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	001a      	movs	r2, r3
 80022ee:	4bcb      	ldr	r3, [pc, #812]	; (800261c <MS5611_ReadDigitalValues+0x42c>)
 80022f0:	601a      	str	r2, [r3, #0]

		HAL_I2C_Master_Transmit(&hi2c1, (MS5611_DEVICE_ADDR<<1), &I2C_COMMAND[5], sizeof(I2C_COMMAND[5]), 10);
 80022f2:	197b      	adds	r3, r7, r5
 80022f4:	1d5a      	adds	r2, r3, #5
 80022f6:	48c8      	ldr	r0, [pc, #800]	; (8002618 <MS5611_ReadDigitalValues+0x428>)
 80022f8:	230a      	movs	r3, #10
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	2301      	movs	r3, #1
 80022fe:	21ee      	movs	r1, #238	; 0xee
 8002300:	f001 f88e 	bl	8003420 <HAL_I2C_Master_Transmit>
		HAL_Delay(50);
 8002304:	2032      	movs	r0, #50	; 0x32
 8002306:	f000 fdaf 	bl	8002e68 <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c1, (MS5611_DEVICE_ADDR<<1), &I2C_COMMAND[10], sizeof(I2C_COMMAND[10]), 10);
 800230a:	197b      	adds	r3, r7, r5
 800230c:	330a      	adds	r3, #10
 800230e:	001a      	movs	r2, r3
 8002310:	48c1      	ldr	r0, [pc, #772]	; (8002618 <MS5611_ReadDigitalValues+0x428>)
 8002312:	230a      	movs	r3, #10
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	2301      	movs	r3, #1
 8002318:	21ee      	movs	r1, #238	; 0xee
 800231a:	f001 f881 	bl	8003420 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, (MS5611_DEVICE_ADDR<<1), rx_Buffer, sizeof(rx_Buffer), 10);
 800231e:	193a      	adds	r2, r7, r4
 8002320:	48bd      	ldr	r0, [pc, #756]	; (8002618 <MS5611_ReadDigitalValues+0x428>)
 8002322:	230a      	movs	r3, #10
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	2303      	movs	r3, #3
 8002328:	21ee      	movs	r1, #238	; 0xee
 800232a:	f001 f981 	bl	8003630 <HAL_I2C_Master_Receive>
		DigitalValues.D2 = ((rx_Buffer[0] << 16) | (rx_Buffer[1] << 8) | (rx_Buffer[2]));
 800232e:	193b      	adds	r3, r7, r4
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	041a      	lsls	r2, r3, #16
 8002334:	193b      	adds	r3, r7, r4
 8002336:	785b      	ldrb	r3, [r3, #1]
 8002338:	021b      	lsls	r3, r3, #8
 800233a:	4313      	orrs	r3, r2
 800233c:	193a      	adds	r2, r7, r4
 800233e:	7892      	ldrb	r2, [r2, #2]
 8002340:	4313      	orrs	r3, r2
 8002342:	001a      	movs	r2, r3
 8002344:	4bb5      	ldr	r3, [pc, #724]	; (800261c <MS5611_ReadDigitalValues+0x42c>)
 8002346:	605a      	str	r2, [r3, #4]
		break;
 8002348:	e1c3      	b.n	80026d2 <MS5611_ReadDigitalValues+0x4e2>

	case 512:
		HAL_I2C_Master_Transmit(&hi2c1, (MS5611_DEVICE_ADDR<<1), &I2C_COMMAND[1], sizeof(I2C_COMMAND[1]), 10);
 800234a:	2508      	movs	r5, #8
 800234c:	197b      	adds	r3, r7, r5
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	48b1      	ldr	r0, [pc, #708]	; (8002618 <MS5611_ReadDigitalValues+0x428>)
 8002352:	230a      	movs	r3, #10
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	2301      	movs	r3, #1
 8002358:	21ee      	movs	r1, #238	; 0xee
 800235a:	f001 f861 	bl	8003420 <HAL_I2C_Master_Transmit>
		HAL_Delay(50);
 800235e:	2032      	movs	r0, #50	; 0x32
 8002360:	f000 fd82 	bl	8002e68 <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c1, (MS5611_DEVICE_ADDR<<1), &I2C_COMMAND[10], sizeof(I2C_COMMAND[10]), 10);
 8002364:	197b      	adds	r3, r7, r5
 8002366:	330a      	adds	r3, #10
 8002368:	001a      	movs	r2, r3
 800236a:	48ab      	ldr	r0, [pc, #684]	; (8002618 <MS5611_ReadDigitalValues+0x428>)
 800236c:	230a      	movs	r3, #10
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	2301      	movs	r3, #1
 8002372:	21ee      	movs	r1, #238	; 0xee
 8002374:	f001 f854 	bl	8003420 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, (MS5611_DEVICE_ADDR<<1), rx_Buffer, sizeof(rx_Buffer), 10);
 8002378:	2414      	movs	r4, #20
 800237a:	193a      	adds	r2, r7, r4
 800237c:	48a6      	ldr	r0, [pc, #664]	; (8002618 <MS5611_ReadDigitalValues+0x428>)
 800237e:	230a      	movs	r3, #10
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	2303      	movs	r3, #3
 8002384:	21ee      	movs	r1, #238	; 0xee
 8002386:	f001 f953 	bl	8003630 <HAL_I2C_Master_Receive>
		DigitalValues.D1 = ((rx_Buffer[0] << 16) | (rx_Buffer[1] << 8) | (rx_Buffer[2]));
 800238a:	193b      	adds	r3, r7, r4
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	041a      	lsls	r2, r3, #16
 8002390:	193b      	adds	r3, r7, r4
 8002392:	785b      	ldrb	r3, [r3, #1]
 8002394:	021b      	lsls	r3, r3, #8
 8002396:	4313      	orrs	r3, r2
 8002398:	193a      	adds	r2, r7, r4
 800239a:	7892      	ldrb	r2, [r2, #2]
 800239c:	4313      	orrs	r3, r2
 800239e:	001a      	movs	r2, r3
 80023a0:	4b9e      	ldr	r3, [pc, #632]	; (800261c <MS5611_ReadDigitalValues+0x42c>)
 80023a2:	601a      	str	r2, [r3, #0]

		HAL_I2C_Master_Transmit(&hi2c1, (MS5611_DEVICE_ADDR<<1), &I2C_COMMAND[6], sizeof(I2C_COMMAND[6]), 10);
 80023a4:	197b      	adds	r3, r7, r5
 80023a6:	1d9a      	adds	r2, r3, #6
 80023a8:	489b      	ldr	r0, [pc, #620]	; (8002618 <MS5611_ReadDigitalValues+0x428>)
 80023aa:	230a      	movs	r3, #10
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	2301      	movs	r3, #1
 80023b0:	21ee      	movs	r1, #238	; 0xee
 80023b2:	f001 f835 	bl	8003420 <HAL_I2C_Master_Transmit>
		HAL_Delay(50);
 80023b6:	2032      	movs	r0, #50	; 0x32
 80023b8:	f000 fd56 	bl	8002e68 <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c1, (MS5611_DEVICE_ADDR<<1), &I2C_COMMAND[10], sizeof(I2C_COMMAND[10]), 10);
 80023bc:	197b      	adds	r3, r7, r5
 80023be:	330a      	adds	r3, #10
 80023c0:	001a      	movs	r2, r3
 80023c2:	4895      	ldr	r0, [pc, #596]	; (8002618 <MS5611_ReadDigitalValues+0x428>)
 80023c4:	230a      	movs	r3, #10
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	2301      	movs	r3, #1
 80023ca:	21ee      	movs	r1, #238	; 0xee
 80023cc:	f001 f828 	bl	8003420 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, (MS5611_DEVICE_ADDR<<1), rx_Buffer, sizeof(rx_Buffer), 10);
 80023d0:	193a      	adds	r2, r7, r4
 80023d2:	4891      	ldr	r0, [pc, #580]	; (8002618 <MS5611_ReadDigitalValues+0x428>)
 80023d4:	230a      	movs	r3, #10
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	2303      	movs	r3, #3
 80023da:	21ee      	movs	r1, #238	; 0xee
 80023dc:	f001 f928 	bl	8003630 <HAL_I2C_Master_Receive>
		DigitalValues.D2 = ((rx_Buffer[0] << 16) | (rx_Buffer[1] << 8) | (rx_Buffer[2]));
 80023e0:	193b      	adds	r3, r7, r4
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	041a      	lsls	r2, r3, #16
 80023e6:	193b      	adds	r3, r7, r4
 80023e8:	785b      	ldrb	r3, [r3, #1]
 80023ea:	021b      	lsls	r3, r3, #8
 80023ec:	4313      	orrs	r3, r2
 80023ee:	193a      	adds	r2, r7, r4
 80023f0:	7892      	ldrb	r2, [r2, #2]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	001a      	movs	r2, r3
 80023f6:	4b89      	ldr	r3, [pc, #548]	; (800261c <MS5611_ReadDigitalValues+0x42c>)
 80023f8:	605a      	str	r2, [r3, #4]
		break;
 80023fa:	e16a      	b.n	80026d2 <MS5611_ReadDigitalValues+0x4e2>

	case 1024:
		HAL_I2C_Master_Transmit(&hi2c1, (MS5611_DEVICE_ADDR<<1), &I2C_COMMAND[2], sizeof(I2C_COMMAND[2]), 10);
 80023fc:	2508      	movs	r5, #8
 80023fe:	197b      	adds	r3, r7, r5
 8002400:	1c9a      	adds	r2, r3, #2
 8002402:	4885      	ldr	r0, [pc, #532]	; (8002618 <MS5611_ReadDigitalValues+0x428>)
 8002404:	230a      	movs	r3, #10
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	2301      	movs	r3, #1
 800240a:	21ee      	movs	r1, #238	; 0xee
 800240c:	f001 f808 	bl	8003420 <HAL_I2C_Master_Transmit>
		HAL_Delay(50);
 8002410:	2032      	movs	r0, #50	; 0x32
 8002412:	f000 fd29 	bl	8002e68 <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c1, (MS5611_DEVICE_ADDR<<1), &I2C_COMMAND[10], sizeof(I2C_COMMAND[10]), 10);
 8002416:	197b      	adds	r3, r7, r5
 8002418:	330a      	adds	r3, #10
 800241a:	001a      	movs	r2, r3
 800241c:	487e      	ldr	r0, [pc, #504]	; (8002618 <MS5611_ReadDigitalValues+0x428>)
 800241e:	230a      	movs	r3, #10
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	2301      	movs	r3, #1
 8002424:	21ee      	movs	r1, #238	; 0xee
 8002426:	f000 fffb 	bl	8003420 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, (MS5611_DEVICE_ADDR<<1), rx_Buffer, sizeof(rx_Buffer), 10);
 800242a:	2414      	movs	r4, #20
 800242c:	193a      	adds	r2, r7, r4
 800242e:	487a      	ldr	r0, [pc, #488]	; (8002618 <MS5611_ReadDigitalValues+0x428>)
 8002430:	230a      	movs	r3, #10
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	2303      	movs	r3, #3
 8002436:	21ee      	movs	r1, #238	; 0xee
 8002438:	f001 f8fa 	bl	8003630 <HAL_I2C_Master_Receive>
		DigitalValues.D1 = ((rx_Buffer[0] << 16) | (rx_Buffer[1] << 8) | (rx_Buffer[2]));
 800243c:	193b      	adds	r3, r7, r4
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	041a      	lsls	r2, r3, #16
 8002442:	193b      	adds	r3, r7, r4
 8002444:	785b      	ldrb	r3, [r3, #1]
 8002446:	021b      	lsls	r3, r3, #8
 8002448:	4313      	orrs	r3, r2
 800244a:	193a      	adds	r2, r7, r4
 800244c:	7892      	ldrb	r2, [r2, #2]
 800244e:	4313      	orrs	r3, r2
 8002450:	001a      	movs	r2, r3
 8002452:	4b72      	ldr	r3, [pc, #456]	; (800261c <MS5611_ReadDigitalValues+0x42c>)
 8002454:	601a      	str	r2, [r3, #0]

		HAL_I2C_Master_Transmit(&hi2c1, (MS5611_DEVICE_ADDR<<1), &I2C_COMMAND[7], sizeof(I2C_COMMAND[7]), 10);
 8002456:	197b      	adds	r3, r7, r5
 8002458:	1dda      	adds	r2, r3, #7
 800245a:	486f      	ldr	r0, [pc, #444]	; (8002618 <MS5611_ReadDigitalValues+0x428>)
 800245c:	230a      	movs	r3, #10
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	2301      	movs	r3, #1
 8002462:	21ee      	movs	r1, #238	; 0xee
 8002464:	f000 ffdc 	bl	8003420 <HAL_I2C_Master_Transmit>
		HAL_Delay(50);
 8002468:	2032      	movs	r0, #50	; 0x32
 800246a:	f000 fcfd 	bl	8002e68 <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c1, (MS5611_DEVICE_ADDR<<1), &I2C_COMMAND[10], sizeof(I2C_COMMAND[10]), 10);
 800246e:	197b      	adds	r3, r7, r5
 8002470:	330a      	adds	r3, #10
 8002472:	001a      	movs	r2, r3
 8002474:	4868      	ldr	r0, [pc, #416]	; (8002618 <MS5611_ReadDigitalValues+0x428>)
 8002476:	230a      	movs	r3, #10
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	2301      	movs	r3, #1
 800247c:	21ee      	movs	r1, #238	; 0xee
 800247e:	f000 ffcf 	bl	8003420 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, (MS5611_DEVICE_ADDR<<1), rx_Buffer, sizeof(rx_Buffer), 10);
 8002482:	193a      	adds	r2, r7, r4
 8002484:	4864      	ldr	r0, [pc, #400]	; (8002618 <MS5611_ReadDigitalValues+0x428>)
 8002486:	230a      	movs	r3, #10
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	2303      	movs	r3, #3
 800248c:	21ee      	movs	r1, #238	; 0xee
 800248e:	f001 f8cf 	bl	8003630 <HAL_I2C_Master_Receive>
		DigitalValues.D2 = ((rx_Buffer[0] << 16) | (rx_Buffer[1] << 8) | (rx_Buffer[2]));
 8002492:	193b      	adds	r3, r7, r4
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	041a      	lsls	r2, r3, #16
 8002498:	193b      	adds	r3, r7, r4
 800249a:	785b      	ldrb	r3, [r3, #1]
 800249c:	021b      	lsls	r3, r3, #8
 800249e:	4313      	orrs	r3, r2
 80024a0:	193a      	adds	r2, r7, r4
 80024a2:	7892      	ldrb	r2, [r2, #2]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	001a      	movs	r2, r3
 80024a8:	4b5c      	ldr	r3, [pc, #368]	; (800261c <MS5611_ReadDigitalValues+0x42c>)
 80024aa:	605a      	str	r2, [r3, #4]
		break;
 80024ac:	e111      	b.n	80026d2 <MS5611_ReadDigitalValues+0x4e2>

	case 2048:
		HAL_I2C_Master_Transmit(&hi2c1, (MS5611_DEVICE_ADDR<<1), &I2C_COMMAND[3], sizeof(I2C_COMMAND[3]), 10);
 80024ae:	2508      	movs	r5, #8
 80024b0:	197b      	adds	r3, r7, r5
 80024b2:	1cda      	adds	r2, r3, #3
 80024b4:	4858      	ldr	r0, [pc, #352]	; (8002618 <MS5611_ReadDigitalValues+0x428>)
 80024b6:	230a      	movs	r3, #10
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	2301      	movs	r3, #1
 80024bc:	21ee      	movs	r1, #238	; 0xee
 80024be:	f000 ffaf 	bl	8003420 <HAL_I2C_Master_Transmit>
		HAL_Delay(50);
 80024c2:	2032      	movs	r0, #50	; 0x32
 80024c4:	f000 fcd0 	bl	8002e68 <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c1, (MS5611_DEVICE_ADDR<<1), &I2C_COMMAND[10], sizeof(I2C_COMMAND[10]), 10);
 80024c8:	197b      	adds	r3, r7, r5
 80024ca:	330a      	adds	r3, #10
 80024cc:	001a      	movs	r2, r3
 80024ce:	4852      	ldr	r0, [pc, #328]	; (8002618 <MS5611_ReadDigitalValues+0x428>)
 80024d0:	230a      	movs	r3, #10
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	2301      	movs	r3, #1
 80024d6:	21ee      	movs	r1, #238	; 0xee
 80024d8:	f000 ffa2 	bl	8003420 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, (MS5611_DEVICE_ADDR<<1), rx_Buffer, sizeof(rx_Buffer), 10);
 80024dc:	2414      	movs	r4, #20
 80024de:	193a      	adds	r2, r7, r4
 80024e0:	484d      	ldr	r0, [pc, #308]	; (8002618 <MS5611_ReadDigitalValues+0x428>)
 80024e2:	230a      	movs	r3, #10
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	2303      	movs	r3, #3
 80024e8:	21ee      	movs	r1, #238	; 0xee
 80024ea:	f001 f8a1 	bl	8003630 <HAL_I2C_Master_Receive>
		DigitalValues.D1 = ((rx_Buffer[0] << 16) | (rx_Buffer[1] << 8) | (rx_Buffer[2]));
 80024ee:	193b      	adds	r3, r7, r4
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	041a      	lsls	r2, r3, #16
 80024f4:	193b      	adds	r3, r7, r4
 80024f6:	785b      	ldrb	r3, [r3, #1]
 80024f8:	021b      	lsls	r3, r3, #8
 80024fa:	4313      	orrs	r3, r2
 80024fc:	193a      	adds	r2, r7, r4
 80024fe:	7892      	ldrb	r2, [r2, #2]
 8002500:	4313      	orrs	r3, r2
 8002502:	001a      	movs	r2, r3
 8002504:	4b45      	ldr	r3, [pc, #276]	; (800261c <MS5611_ReadDigitalValues+0x42c>)
 8002506:	601a      	str	r2, [r3, #0]

		HAL_I2C_Master_Transmit(&hi2c1, (MS5611_DEVICE_ADDR<<1), &I2C_COMMAND[8], sizeof(I2C_COMMAND[8]), 10);
 8002508:	197b      	adds	r3, r7, r5
 800250a:	3308      	adds	r3, #8
 800250c:	001a      	movs	r2, r3
 800250e:	4842      	ldr	r0, [pc, #264]	; (8002618 <MS5611_ReadDigitalValues+0x428>)
 8002510:	230a      	movs	r3, #10
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	2301      	movs	r3, #1
 8002516:	21ee      	movs	r1, #238	; 0xee
 8002518:	f000 ff82 	bl	8003420 <HAL_I2C_Master_Transmit>
		HAL_Delay(50);
 800251c:	2032      	movs	r0, #50	; 0x32
 800251e:	f000 fca3 	bl	8002e68 <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c1, (MS5611_DEVICE_ADDR<<1), &I2C_COMMAND[10], sizeof(I2C_COMMAND[10]), 10);
 8002522:	197b      	adds	r3, r7, r5
 8002524:	330a      	adds	r3, #10
 8002526:	001a      	movs	r2, r3
 8002528:	483b      	ldr	r0, [pc, #236]	; (8002618 <MS5611_ReadDigitalValues+0x428>)
 800252a:	230a      	movs	r3, #10
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	2301      	movs	r3, #1
 8002530:	21ee      	movs	r1, #238	; 0xee
 8002532:	f000 ff75 	bl	8003420 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, (MS5611_DEVICE_ADDR<<1), rx_Buffer, sizeof(rx_Buffer), 10);
 8002536:	193a      	adds	r2, r7, r4
 8002538:	4837      	ldr	r0, [pc, #220]	; (8002618 <MS5611_ReadDigitalValues+0x428>)
 800253a:	230a      	movs	r3, #10
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	2303      	movs	r3, #3
 8002540:	21ee      	movs	r1, #238	; 0xee
 8002542:	f001 f875 	bl	8003630 <HAL_I2C_Master_Receive>
		DigitalValues.D2 = ((rx_Buffer[0] << 16) | (rx_Buffer[1] << 8) | (rx_Buffer[2]));
 8002546:	193b      	adds	r3, r7, r4
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	041a      	lsls	r2, r3, #16
 800254c:	193b      	adds	r3, r7, r4
 800254e:	785b      	ldrb	r3, [r3, #1]
 8002550:	021b      	lsls	r3, r3, #8
 8002552:	4313      	orrs	r3, r2
 8002554:	193a      	adds	r2, r7, r4
 8002556:	7892      	ldrb	r2, [r2, #2]
 8002558:	4313      	orrs	r3, r2
 800255a:	001a      	movs	r2, r3
 800255c:	4b2f      	ldr	r3, [pc, #188]	; (800261c <MS5611_ReadDigitalValues+0x42c>)
 800255e:	605a      	str	r2, [r3, #4]
		break;
 8002560:	e0b7      	b.n	80026d2 <MS5611_ReadDigitalValues+0x4e2>

	case 4096:
		HAL_I2C_Master_Transmit(&hi2c1, (MS5611_DEVICE_ADDR<<1), &I2C_COMMAND[4], sizeof(I2C_COMMAND[4]), 10);
 8002562:	2508      	movs	r5, #8
 8002564:	197b      	adds	r3, r7, r5
 8002566:	1d1a      	adds	r2, r3, #4
 8002568:	482b      	ldr	r0, [pc, #172]	; (8002618 <MS5611_ReadDigitalValues+0x428>)
 800256a:	230a      	movs	r3, #10
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	2301      	movs	r3, #1
 8002570:	21ee      	movs	r1, #238	; 0xee
 8002572:	f000 ff55 	bl	8003420 <HAL_I2C_Master_Transmit>
		HAL_Delay(50);
 8002576:	2032      	movs	r0, #50	; 0x32
 8002578:	f000 fc76 	bl	8002e68 <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c1, (MS5611_DEVICE_ADDR<<1), &I2C_COMMAND[10], sizeof(I2C_COMMAND[10]), 10);
 800257c:	197b      	adds	r3, r7, r5
 800257e:	330a      	adds	r3, #10
 8002580:	001a      	movs	r2, r3
 8002582:	4825      	ldr	r0, [pc, #148]	; (8002618 <MS5611_ReadDigitalValues+0x428>)
 8002584:	230a      	movs	r3, #10
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	2301      	movs	r3, #1
 800258a:	21ee      	movs	r1, #238	; 0xee
 800258c:	f000 ff48 	bl	8003420 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, (MS5611_DEVICE_ADDR<<1), rx_Buffer, sizeof(rx_Buffer), 10);
 8002590:	2414      	movs	r4, #20
 8002592:	193a      	adds	r2, r7, r4
 8002594:	4820      	ldr	r0, [pc, #128]	; (8002618 <MS5611_ReadDigitalValues+0x428>)
 8002596:	230a      	movs	r3, #10
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	2303      	movs	r3, #3
 800259c:	21ee      	movs	r1, #238	; 0xee
 800259e:	f001 f847 	bl	8003630 <HAL_I2C_Master_Receive>
		DigitalValues.D1 = ((rx_Buffer[0] << 16) | (rx_Buffer[1] << 8) | (rx_Buffer[2]));
 80025a2:	193b      	adds	r3, r7, r4
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	041a      	lsls	r2, r3, #16
 80025a8:	193b      	adds	r3, r7, r4
 80025aa:	785b      	ldrb	r3, [r3, #1]
 80025ac:	021b      	lsls	r3, r3, #8
 80025ae:	4313      	orrs	r3, r2
 80025b0:	193a      	adds	r2, r7, r4
 80025b2:	7892      	ldrb	r2, [r2, #2]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	001a      	movs	r2, r3
 80025b8:	4b18      	ldr	r3, [pc, #96]	; (800261c <MS5611_ReadDigitalValues+0x42c>)
 80025ba:	601a      	str	r2, [r3, #0]

		HAL_I2C_Master_Transmit(&hi2c1, (MS5611_DEVICE_ADDR<<1), &I2C_COMMAND[9], sizeof(I2C_COMMAND[9]), 10);
 80025bc:	197b      	adds	r3, r7, r5
 80025be:	3309      	adds	r3, #9
 80025c0:	001a      	movs	r2, r3
 80025c2:	4815      	ldr	r0, [pc, #84]	; (8002618 <MS5611_ReadDigitalValues+0x428>)
 80025c4:	230a      	movs	r3, #10
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	2301      	movs	r3, #1
 80025ca:	21ee      	movs	r1, #238	; 0xee
 80025cc:	f000 ff28 	bl	8003420 <HAL_I2C_Master_Transmit>
		HAL_Delay(50);
 80025d0:	2032      	movs	r0, #50	; 0x32
 80025d2:	f000 fc49 	bl	8002e68 <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c1, (MS5611_DEVICE_ADDR<<1), &I2C_COMMAND[10], sizeof(I2C_COMMAND[10]), 10);
 80025d6:	197b      	adds	r3, r7, r5
 80025d8:	330a      	adds	r3, #10
 80025da:	001a      	movs	r2, r3
 80025dc:	480e      	ldr	r0, [pc, #56]	; (8002618 <MS5611_ReadDigitalValues+0x428>)
 80025de:	230a      	movs	r3, #10
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	2301      	movs	r3, #1
 80025e4:	21ee      	movs	r1, #238	; 0xee
 80025e6:	f000 ff1b 	bl	8003420 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, (MS5611_DEVICE_ADDR<<1), rx_Buffer, sizeof(rx_Buffer), 10);
 80025ea:	193a      	adds	r2, r7, r4
 80025ec:	480a      	ldr	r0, [pc, #40]	; (8002618 <MS5611_ReadDigitalValues+0x428>)
 80025ee:	230a      	movs	r3, #10
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	2303      	movs	r3, #3
 80025f4:	21ee      	movs	r1, #238	; 0xee
 80025f6:	f001 f81b 	bl	8003630 <HAL_I2C_Master_Receive>
		DigitalValues.D2 = ((rx_Buffer[0] << 16) | (rx_Buffer[1] << 8) | (rx_Buffer[2]));
 80025fa:	193b      	adds	r3, r7, r4
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	041a      	lsls	r2, r3, #16
 8002600:	193b      	adds	r3, r7, r4
 8002602:	785b      	ldrb	r3, [r3, #1]
 8002604:	021b      	lsls	r3, r3, #8
 8002606:	4313      	orrs	r3, r2
 8002608:	193a      	adds	r2, r7, r4
 800260a:	7892      	ldrb	r2, [r2, #2]
 800260c:	4313      	orrs	r3, r2
 800260e:	001a      	movs	r2, r3
 8002610:	4b02      	ldr	r3, [pc, #8]	; (800261c <MS5611_ReadDigitalValues+0x42c>)
 8002612:	605a      	str	r2, [r3, #4]
		break;
 8002614:	e05d      	b.n	80026d2 <MS5611_ReadDigitalValues+0x4e2>
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	20000030 	.word	0x20000030
 800261c:	2000007c 	.word	0x2000007c

	default:
		HAL_I2C_Master_Transmit(&hi2c1, (MS5611_DEVICE_ADDR<<1), &I2C_COMMAND[2], sizeof(I2C_COMMAND[2]), 10);
 8002620:	2508      	movs	r5, #8
 8002622:	197b      	adds	r3, r7, r5
 8002624:	1c9a      	adds	r2, r3, #2
 8002626:	482d      	ldr	r0, [pc, #180]	; (80026dc <MS5611_ReadDigitalValues+0x4ec>)
 8002628:	230a      	movs	r3, #10
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	2301      	movs	r3, #1
 800262e:	21ee      	movs	r1, #238	; 0xee
 8002630:	f000 fef6 	bl	8003420 <HAL_I2C_Master_Transmit>
		HAL_Delay(50);
 8002634:	2032      	movs	r0, #50	; 0x32
 8002636:	f000 fc17 	bl	8002e68 <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c1, (MS5611_DEVICE_ADDR<<1), &I2C_COMMAND[10], sizeof(I2C_COMMAND[10]), 10);
 800263a:	197b      	adds	r3, r7, r5
 800263c:	330a      	adds	r3, #10
 800263e:	001a      	movs	r2, r3
 8002640:	4826      	ldr	r0, [pc, #152]	; (80026dc <MS5611_ReadDigitalValues+0x4ec>)
 8002642:	230a      	movs	r3, #10
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	2301      	movs	r3, #1
 8002648:	21ee      	movs	r1, #238	; 0xee
 800264a:	f000 fee9 	bl	8003420 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, (MS5611_DEVICE_ADDR<<1), rx_Buffer, sizeof(rx_Buffer), 10);
 800264e:	2414      	movs	r4, #20
 8002650:	193a      	adds	r2, r7, r4
 8002652:	4822      	ldr	r0, [pc, #136]	; (80026dc <MS5611_ReadDigitalValues+0x4ec>)
 8002654:	230a      	movs	r3, #10
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	2303      	movs	r3, #3
 800265a:	21ee      	movs	r1, #238	; 0xee
 800265c:	f000 ffe8 	bl	8003630 <HAL_I2C_Master_Receive>
		DigitalValues.D1 = ((rx_Buffer[0] << 16) | (rx_Buffer[1] << 8) | (rx_Buffer[2]));
 8002660:	193b      	adds	r3, r7, r4
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	041a      	lsls	r2, r3, #16
 8002666:	193b      	adds	r3, r7, r4
 8002668:	785b      	ldrb	r3, [r3, #1]
 800266a:	021b      	lsls	r3, r3, #8
 800266c:	4313      	orrs	r3, r2
 800266e:	193a      	adds	r2, r7, r4
 8002670:	7892      	ldrb	r2, [r2, #2]
 8002672:	4313      	orrs	r3, r2
 8002674:	001a      	movs	r2, r3
 8002676:	4b1a      	ldr	r3, [pc, #104]	; (80026e0 <MS5611_ReadDigitalValues+0x4f0>)
 8002678:	601a      	str	r2, [r3, #0]

		HAL_I2C_Master_Transmit(&hi2c1, (MS5611_DEVICE_ADDR<<1), &I2C_COMMAND[7], sizeof(I2C_COMMAND[7]), 10);
 800267a:	197b      	adds	r3, r7, r5
 800267c:	1dda      	adds	r2, r3, #7
 800267e:	4817      	ldr	r0, [pc, #92]	; (80026dc <MS5611_ReadDigitalValues+0x4ec>)
 8002680:	230a      	movs	r3, #10
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	2301      	movs	r3, #1
 8002686:	21ee      	movs	r1, #238	; 0xee
 8002688:	f000 feca 	bl	8003420 <HAL_I2C_Master_Transmit>
		HAL_Delay(50);
 800268c:	2032      	movs	r0, #50	; 0x32
 800268e:	f000 fbeb 	bl	8002e68 <HAL_Delay>
		HAL_I2C_Master_Transmit(&hi2c1, (MS5611_DEVICE_ADDR<<1), &I2C_COMMAND[10], sizeof(I2C_COMMAND[10]), 10);
 8002692:	197b      	adds	r3, r7, r5
 8002694:	330a      	adds	r3, #10
 8002696:	001a      	movs	r2, r3
 8002698:	4810      	ldr	r0, [pc, #64]	; (80026dc <MS5611_ReadDigitalValues+0x4ec>)
 800269a:	230a      	movs	r3, #10
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	2301      	movs	r3, #1
 80026a0:	21ee      	movs	r1, #238	; 0xee
 80026a2:	f000 febd 	bl	8003420 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, (MS5611_DEVICE_ADDR<<1), rx_Buffer, sizeof(rx_Buffer), 10);
 80026a6:	193a      	adds	r2, r7, r4
 80026a8:	480c      	ldr	r0, [pc, #48]	; (80026dc <MS5611_ReadDigitalValues+0x4ec>)
 80026aa:	230a      	movs	r3, #10
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	2303      	movs	r3, #3
 80026b0:	21ee      	movs	r1, #238	; 0xee
 80026b2:	f000 ffbd 	bl	8003630 <HAL_I2C_Master_Receive>
		DigitalValues.D2 = ((rx_Buffer[0] << 16) | (rx_Buffer[1] << 8) | (rx_Buffer[2]));
 80026b6:	193b      	adds	r3, r7, r4
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	041a      	lsls	r2, r3, #16
 80026bc:	193b      	adds	r3, r7, r4
 80026be:	785b      	ldrb	r3, [r3, #1]
 80026c0:	021b      	lsls	r3, r3, #8
 80026c2:	4313      	orrs	r3, r2
 80026c4:	193a      	adds	r2, r7, r4
 80026c6:	7892      	ldrb	r2, [r2, #2]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	001a      	movs	r2, r3
 80026cc:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <MS5611_ReadDigitalValues+0x4f0>)
 80026ce:	605a      	str	r2, [r3, #4]
		break;
 80026d0:	46c0      	nop			; (mov r8, r8)
	}
}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	46bd      	mov	sp, r7
 80026d6:	b006      	add	sp, #24
 80026d8:	bdb0      	pop	{r4, r5, r7, pc}
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	20000030 	.word	0x20000030
 80026e0:	2000007c 	.word	0x2000007c

080026e4 <MS5611_DoCalculations>:
 ;	Description: 	Do Necessary Calculations
 ; 	Inputs: 		Nothing
 ;	Returns:		Nothing
**********************************************************************/
static void MS5611_DoCalculations(void)
{
 80026e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
	/* For dT, OFF, and SENS max and min values should be defined */

	/* dT */
	CalculationParameters.dT = DigitalValues.D2 - (CalibrationParameters.C5 * pow(2,8));
 80026ea:	4b94      	ldr	r3, [pc, #592]	; (800293c <MS5611_DoCalculations+0x258>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	0018      	movs	r0, r3
 80026f0:	f7ff fa58 	bl	8001ba4 <__aeabi_ui2d>
 80026f4:	6038      	str	r0, [r7, #0]
 80026f6:	6079      	str	r1, [r7, #4]
 80026f8:	4b91      	ldr	r3, [pc, #580]	; (8002940 <MS5611_DoCalculations+0x25c>)
 80026fa:	891b      	ldrh	r3, [r3, #8]
 80026fc:	0018      	movs	r0, r3
 80026fe:	f7ff fa17 	bl	8001b30 <__aeabi_i2d>
 8002702:	2200      	movs	r2, #0
 8002704:	4b8f      	ldr	r3, [pc, #572]	; (8002944 <MS5611_DoCalculations+0x260>)
 8002706:	f7fe fc23 	bl	8000f50 <__aeabi_dmul>
 800270a:	0003      	movs	r3, r0
 800270c:	000c      	movs	r4, r1
 800270e:	001a      	movs	r2, r3
 8002710:	0023      	movs	r3, r4
 8002712:	6838      	ldr	r0, [r7, #0]
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	f7fe fe8d 	bl	8001434 <__aeabi_dsub>
 800271a:	0003      	movs	r3, r0
 800271c:	000c      	movs	r4, r1
 800271e:	0018      	movs	r0, r3
 8002720:	0021      	movs	r1, r4
 8002722:	f7ff f9cf 	bl	8001ac4 <__aeabi_d2iz>
 8002726:	0002      	movs	r2, r0
 8002728:	4b87      	ldr	r3, [pc, #540]	; (8002948 <MS5611_DoCalculations+0x264>)
 800272a:	601a      	str	r2, [r3, #0]

	if(CalculationParameters.dT < -16776960)
 800272c:	4b86      	ldr	r3, [pc, #536]	; (8002948 <MS5611_DoCalculations+0x264>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a86      	ldr	r2, [pc, #536]	; (800294c <MS5611_DoCalculations+0x268>)
 8002732:	4293      	cmp	r3, r2
 8002734:	da02      	bge.n	800273c <MS5611_DoCalculations+0x58>
		CalculationParameters.dT = -16776960;
 8002736:	4b84      	ldr	r3, [pc, #528]	; (8002948 <MS5611_DoCalculations+0x264>)
 8002738:	4a84      	ldr	r2, [pc, #528]	; (800294c <MS5611_DoCalculations+0x268>)
 800273a:	601a      	str	r2, [r3, #0]

	if(CalculationParameters.dT > 16777216)
 800273c:	4b82      	ldr	r3, [pc, #520]	; (8002948 <MS5611_DoCalculations+0x264>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	2380      	movs	r3, #128	; 0x80
 8002742:	045b      	lsls	r3, r3, #17
 8002744:	429a      	cmp	r2, r3
 8002746:	dd03      	ble.n	8002750 <MS5611_DoCalculations+0x6c>
		CalculationParameters.dT = 16777216;
 8002748:	4b7f      	ldr	r3, [pc, #508]	; (8002948 <MS5611_DoCalculations+0x264>)
 800274a:	2280      	movs	r2, #128	; 0x80
 800274c:	0452      	lsls	r2, r2, #17
 800274e:	601a      	str	r2, [r3, #0]

	/* TEMP */
	CalculationParameters.TEMP = 2000 + (CalculationParameters.dT * CalibrationParameters.C6 /pow(2,26));
 8002750:	4b7d      	ldr	r3, [pc, #500]	; (8002948 <MS5611_DoCalculations+0x264>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a7a      	ldr	r2, [pc, #488]	; (8002940 <MS5611_DoCalculations+0x25c>)
 8002756:	8952      	ldrh	r2, [r2, #10]
 8002758:	4353      	muls	r3, r2
 800275a:	0018      	movs	r0, r3
 800275c:	f7ff f9e8 	bl	8001b30 <__aeabi_i2d>
 8002760:	2200      	movs	r2, #0
 8002762:	4b7b      	ldr	r3, [pc, #492]	; (8002950 <MS5611_DoCalculations+0x26c>)
 8002764:	f7fe f8f2 	bl	800094c <__aeabi_ddiv>
 8002768:	0003      	movs	r3, r0
 800276a:	000c      	movs	r4, r1
 800276c:	0018      	movs	r0, r3
 800276e:	0021      	movs	r1, r4
 8002770:	2200      	movs	r2, #0
 8002772:	4b78      	ldr	r3, [pc, #480]	; (8002954 <MS5611_DoCalculations+0x270>)
 8002774:	f7fd fdce 	bl	8000314 <__aeabi_dadd>
 8002778:	0003      	movs	r3, r0
 800277a:	000c      	movs	r4, r1
 800277c:	0018      	movs	r0, r3
 800277e:	0021      	movs	r1, r4
 8002780:	f7ff f9a0 	bl	8001ac4 <__aeabi_d2iz>
 8002784:	0002      	movs	r2, r0
 8002786:	4b70      	ldr	r3, [pc, #448]	; (8002948 <MS5611_DoCalculations+0x264>)
 8002788:	605a      	str	r2, [r3, #4]

	/* OFF */
	CalculationParameters.OFF = (CalibrationParameters.C2 * pow(2,16)) +
 800278a:	4b6d      	ldr	r3, [pc, #436]	; (8002940 <MS5611_DoCalculations+0x25c>)
 800278c:	885b      	ldrh	r3, [r3, #2]
 800278e:	0018      	movs	r0, r3
 8002790:	f7ff f9ce 	bl	8001b30 <__aeabi_i2d>
 8002794:	2200      	movs	r2, #0
 8002796:	4b70      	ldr	r3, [pc, #448]	; (8002958 <MS5611_DoCalculations+0x274>)
 8002798:	f7fe fbda 	bl	8000f50 <__aeabi_dmul>
 800279c:	0003      	movs	r3, r0
 800279e:	000c      	movs	r4, r1
 80027a0:	603b      	str	r3, [r7, #0]
 80027a2:	607c      	str	r4, [r7, #4]
			((CalibrationParameters.C4 * CalculationParameters.dT) / pow(2,7));
 80027a4:	4b66      	ldr	r3, [pc, #408]	; (8002940 <MS5611_DoCalculations+0x25c>)
 80027a6:	88db      	ldrh	r3, [r3, #6]
 80027a8:	001a      	movs	r2, r3
 80027aa:	4b67      	ldr	r3, [pc, #412]	; (8002948 <MS5611_DoCalculations+0x264>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4353      	muls	r3, r2
 80027b0:	0018      	movs	r0, r3
 80027b2:	f7ff f9bd 	bl	8001b30 <__aeabi_i2d>
 80027b6:	2200      	movs	r2, #0
 80027b8:	4b68      	ldr	r3, [pc, #416]	; (800295c <MS5611_DoCalculations+0x278>)
 80027ba:	f7fe f8c7 	bl	800094c <__aeabi_ddiv>
 80027be:	0003      	movs	r3, r0
 80027c0:	000c      	movs	r4, r1
	CalculationParameters.OFF = (CalibrationParameters.C2 * pow(2,16)) +
 80027c2:	001a      	movs	r2, r3
 80027c4:	0023      	movs	r3, r4
 80027c6:	6838      	ldr	r0, [r7, #0]
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	f7fd fda3 	bl	8000314 <__aeabi_dadd>
 80027ce:	0003      	movs	r3, r0
 80027d0:	000c      	movs	r4, r1
 80027d2:	0018      	movs	r0, r3
 80027d4:	0021      	movs	r1, r4
 80027d6:	f7fd fd4d 	bl	8000274 <__aeabi_d2lz>
 80027da:	0003      	movs	r3, r0
 80027dc:	000c      	movs	r4, r1
 80027de:	4a5a      	ldr	r2, [pc, #360]	; (8002948 <MS5611_DoCalculations+0x264>)
 80027e0:	6093      	str	r3, [r2, #8]
 80027e2:	60d4      	str	r4, [r2, #12]

	if(CalculationParameters.OFF < -8589672450)
 80027e4:	4b58      	ldr	r3, [pc, #352]	; (8002948 <MS5611_DoCalculations+0x264>)
 80027e6:	68dc      	ldr	r4, [r3, #12]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	1ca2      	adds	r2, r4, #2
 80027ec:	db04      	blt.n	80027f8 <MS5611_DoCalculations+0x114>
 80027ee:	1ca2      	adds	r2, r4, #2
 80027f0:	d108      	bne.n	8002804 <MS5611_DoCalculations+0x120>
 80027f2:	4a5b      	ldr	r2, [pc, #364]	; (8002960 <MS5611_DoCalculations+0x27c>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d205      	bcs.n	8002804 <MS5611_DoCalculations+0x120>
		CalculationParameters.OFF = -8589672450;
 80027f8:	4a53      	ldr	r2, [pc, #332]	; (8002948 <MS5611_DoCalculations+0x264>)
 80027fa:	4b59      	ldr	r3, [pc, #356]	; (8002960 <MS5611_DoCalculations+0x27c>)
 80027fc:	2402      	movs	r4, #2
 80027fe:	4264      	negs	r4, r4
 8002800:	6093      	str	r3, [r2, #8]
 8002802:	60d4      	str	r4, [r2, #12]

	if(CalculationParameters.OFF > 12884705280)
 8002804:	4b50      	ldr	r3, [pc, #320]	; (8002948 <MS5611_DoCalculations+0x264>)
 8002806:	68dc      	ldr	r4, [r3, #12]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2c02      	cmp	r4, #2
 800280c:	dc03      	bgt.n	8002816 <MS5611_DoCalculations+0x132>
 800280e:	d107      	bne.n	8002820 <MS5611_DoCalculations+0x13c>
 8002810:	4a54      	ldr	r2, [pc, #336]	; (8002964 <MS5611_DoCalculations+0x280>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d904      	bls.n	8002820 <MS5611_DoCalculations+0x13c>
		CalculationParameters.OFF = 12884705280;
 8002816:	4a4c      	ldr	r2, [pc, #304]	; (8002948 <MS5611_DoCalculations+0x264>)
 8002818:	4b52      	ldr	r3, [pc, #328]	; (8002964 <MS5611_DoCalculations+0x280>)
 800281a:	2402      	movs	r4, #2
 800281c:	6093      	str	r3, [r2, #8]
 800281e:	60d4      	str	r4, [r2, #12]

	/* SENS */
	CalculationParameters.SENS = (CalibrationParameters.C1 * pow(2,15)) +
 8002820:	4b47      	ldr	r3, [pc, #284]	; (8002940 <MS5611_DoCalculations+0x25c>)
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	0018      	movs	r0, r3
 8002826:	f7ff f983 	bl	8001b30 <__aeabi_i2d>
 800282a:	2200      	movs	r2, #0
 800282c:	4b4e      	ldr	r3, [pc, #312]	; (8002968 <MS5611_DoCalculations+0x284>)
 800282e:	f7fe fb8f 	bl	8000f50 <__aeabi_dmul>
 8002832:	0003      	movs	r3, r0
 8002834:	000c      	movs	r4, r1
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	607c      	str	r4, [r7, #4]
			((CalibrationParameters.C3 * CalculationParameters.dT) / pow(2,8));
 800283a:	4b41      	ldr	r3, [pc, #260]	; (8002940 <MS5611_DoCalculations+0x25c>)
 800283c:	889b      	ldrh	r3, [r3, #4]
 800283e:	001a      	movs	r2, r3
 8002840:	4b41      	ldr	r3, [pc, #260]	; (8002948 <MS5611_DoCalculations+0x264>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4353      	muls	r3, r2
 8002846:	0018      	movs	r0, r3
 8002848:	f7ff f972 	bl	8001b30 <__aeabi_i2d>
 800284c:	2200      	movs	r2, #0
 800284e:	4b3d      	ldr	r3, [pc, #244]	; (8002944 <MS5611_DoCalculations+0x260>)
 8002850:	f7fe f87c 	bl	800094c <__aeabi_ddiv>
 8002854:	0003      	movs	r3, r0
 8002856:	000c      	movs	r4, r1
	CalculationParameters.SENS = (CalibrationParameters.C1 * pow(2,15)) +
 8002858:	001a      	movs	r2, r3
 800285a:	0023      	movs	r3, r4
 800285c:	6838      	ldr	r0, [r7, #0]
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	f7fd fd58 	bl	8000314 <__aeabi_dadd>
 8002864:	0003      	movs	r3, r0
 8002866:	000c      	movs	r4, r1
 8002868:	0018      	movs	r0, r3
 800286a:	0021      	movs	r1, r4
 800286c:	f7fd fd02 	bl	8000274 <__aeabi_d2lz>
 8002870:	0003      	movs	r3, r0
 8002872:	000c      	movs	r4, r1
 8002874:	4a34      	ldr	r2, [pc, #208]	; (8002948 <MS5611_DoCalculations+0x264>)
 8002876:	6113      	str	r3, [r2, #16]
 8002878:	6154      	str	r4, [r2, #20]

	if(CalculationParameters.SENS < -4294836225)
 800287a:	4b33      	ldr	r3, [pc, #204]	; (8002948 <MS5611_DoCalculations+0x264>)
 800287c:	695c      	ldr	r4, [r3, #20]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	1c62      	adds	r2, r4, #1
 8002882:	db04      	blt.n	800288e <MS5611_DoCalculations+0x1aa>
 8002884:	1c62      	adds	r2, r4, #1
 8002886:	d108      	bne.n	800289a <MS5611_DoCalculations+0x1b6>
 8002888:	4a38      	ldr	r2, [pc, #224]	; (800296c <MS5611_DoCalculations+0x288>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d205      	bcs.n	800289a <MS5611_DoCalculations+0x1b6>
		CalculationParameters.SENS = -4294836225;
 800288e:	4a2e      	ldr	r2, [pc, #184]	; (8002948 <MS5611_DoCalculations+0x264>)
 8002890:	4b36      	ldr	r3, [pc, #216]	; (800296c <MS5611_DoCalculations+0x288>)
 8002892:	2401      	movs	r4, #1
 8002894:	4264      	negs	r4, r4
 8002896:	6113      	str	r3, [r2, #16]
 8002898:	6154      	str	r4, [r2, #20]

	if(CalculationParameters.SENS > 6442352640)
 800289a:	4b2b      	ldr	r3, [pc, #172]	; (8002948 <MS5611_DoCalculations+0x264>)
 800289c:	695c      	ldr	r4, [r3, #20]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	2c01      	cmp	r4, #1
 80028a2:	dc03      	bgt.n	80028ac <MS5611_DoCalculations+0x1c8>
 80028a4:	d107      	bne.n	80028b6 <MS5611_DoCalculations+0x1d2>
 80028a6:	4a32      	ldr	r2, [pc, #200]	; (8002970 <MS5611_DoCalculations+0x28c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d904      	bls.n	80028b6 <MS5611_DoCalculations+0x1d2>
		CalculationParameters.SENS = 6442352640;
 80028ac:	4a26      	ldr	r2, [pc, #152]	; (8002948 <MS5611_DoCalculations+0x264>)
 80028ae:	4b30      	ldr	r3, [pc, #192]	; (8002970 <MS5611_DoCalculations+0x28c>)
 80028b0:	2401      	movs	r4, #1
 80028b2:	6113      	str	r3, [r2, #16]
 80028b4:	6154      	str	r4, [r2, #20]

	/* P */
	CalculationParameters.P = ((DigitalValues.D1 * CalculationParameters.SENS / pow(2,21) - CalculationParameters.OFF)/ pow(2,15));
 80028b6:	4b21      	ldr	r3, [pc, #132]	; (800293c <MS5611_DoCalculations+0x258>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	001d      	movs	r5, r3
 80028bc:	2300      	movs	r3, #0
 80028be:	001e      	movs	r6, r3
 80028c0:	4b21      	ldr	r3, [pc, #132]	; (8002948 <MS5611_DoCalculations+0x264>)
 80028c2:	695c      	ldr	r4, [r3, #20]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	001a      	movs	r2, r3
 80028c8:	0023      	movs	r3, r4
 80028ca:	0028      	movs	r0, r5
 80028cc:	0031      	movs	r1, r6
 80028ce:	f7fd fca7 	bl	8000220 <__aeabi_lmul>
 80028d2:	0003      	movs	r3, r0
 80028d4:	000c      	movs	r4, r1
 80028d6:	0018      	movs	r0, r3
 80028d8:	0021      	movs	r1, r4
 80028da:	f7fd fd05 	bl	80002e8 <__aeabi_l2d>
 80028de:	2200      	movs	r2, #0
 80028e0:	4b24      	ldr	r3, [pc, #144]	; (8002974 <MS5611_DoCalculations+0x290>)
 80028e2:	f7fe f833 	bl	800094c <__aeabi_ddiv>
 80028e6:	0003      	movs	r3, r0
 80028e8:	000c      	movs	r4, r1
 80028ea:	001d      	movs	r5, r3
 80028ec:	0026      	movs	r6, r4
 80028ee:	4b16      	ldr	r3, [pc, #88]	; (8002948 <MS5611_DoCalculations+0x264>)
 80028f0:	68dc      	ldr	r4, [r3, #12]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	0018      	movs	r0, r3
 80028f6:	0021      	movs	r1, r4
 80028f8:	f7fd fcf6 	bl	80002e8 <__aeabi_l2d>
 80028fc:	0003      	movs	r3, r0
 80028fe:	000c      	movs	r4, r1
 8002900:	001a      	movs	r2, r3
 8002902:	0023      	movs	r3, r4
 8002904:	0028      	movs	r0, r5
 8002906:	0031      	movs	r1, r6
 8002908:	f7fe fd94 	bl	8001434 <__aeabi_dsub>
 800290c:	0003      	movs	r3, r0
 800290e:	000c      	movs	r4, r1
 8002910:	0018      	movs	r0, r3
 8002912:	0021      	movs	r1, r4
 8002914:	2200      	movs	r2, #0
 8002916:	4b14      	ldr	r3, [pc, #80]	; (8002968 <MS5611_DoCalculations+0x284>)
 8002918:	f7fe f818 	bl	800094c <__aeabi_ddiv>
 800291c:	0003      	movs	r3, r0
 800291e:	000c      	movs	r4, r1
 8002920:	0018      	movs	r0, r3
 8002922:	0021      	movs	r1, r4
 8002924:	f7fd fca6 	bl	8000274 <__aeabi_d2lz>
 8002928:	0003      	movs	r3, r0
 800292a:	000c      	movs	r4, r1
 800292c:	4a06      	ldr	r2, [pc, #24]	; (8002948 <MS5611_DoCalculations+0x264>)
 800292e:	6193      	str	r3, [r2, #24]
 8002930:	61d4      	str	r4, [r2, #28]
}
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	46bd      	mov	sp, r7
 8002936:	b003      	add	sp, #12
 8002938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800293a:	46c0      	nop			; (mov r8, r8)
 800293c:	2000007c 	.word	0x2000007c
 8002940:	200000a8 	.word	0x200000a8
 8002944:	40700000 	.word	0x40700000
 8002948:	20000088 	.word	0x20000088
 800294c:	ff000100 	.word	0xff000100
 8002950:	41900000 	.word	0x41900000
 8002954:	409f4000 	.word	0x409f4000
 8002958:	40f00000 	.word	0x40f00000
 800295c:	40600000 	.word	0x40600000
 8002960:	0003fffe 	.word	0x0003fffe
 8002964:	fffd0000 	.word	0xfffd0000
 8002968:	40e00000 	.word	0x40e00000
 800296c:	0001ffff 	.word	0x0001ffff
 8002970:	7ffe8000 	.word	0x7ffe8000
 8002974:	41400000 	.word	0x41400000

08002978 <MS5611_GetPressure>:
 ;	Description: 	Return Actual Pressure Value
 ; 	Inputs: 		Sampling Rate
 ;	Returns:		Actual Pressure Value
**********************************************************************/
float MS5611_GetPressure(int osr)
{
 8002978:	b590      	push	{r4, r7, lr}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
	float actualPressure = 0;
 8002980:	2300      	movs	r3, #0
 8002982:	60fb      	str	r3, [r7, #12]

	MS5611_ReadDigitalValues(osr);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	0018      	movs	r0, r3
 8002988:	f7ff fc32 	bl	80021f0 <MS5611_ReadDigitalValues>
	MS5611_DoCalculations();
 800298c:	f7ff feaa 	bl	80026e4 <MS5611_DoCalculations>

	actualPressure = CalculationParameters.P / 100.00;
 8002990:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <MS5611_GetPressure+0x48>)
 8002992:	69dc      	ldr	r4, [r3, #28]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	0018      	movs	r0, r3
 8002998:	0021      	movs	r1, r4
 800299a:	f7fd fca5 	bl	80002e8 <__aeabi_l2d>
 800299e:	2200      	movs	r2, #0
 80029a0:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <MS5611_GetPressure+0x4c>)
 80029a2:	f7fd ffd3 	bl	800094c <__aeabi_ddiv>
 80029a6:	0003      	movs	r3, r0
 80029a8:	000c      	movs	r4, r1
 80029aa:	0018      	movs	r0, r3
 80029ac:	0021      	movs	r1, r4
 80029ae:	f7ff f92b 	bl	8001c08 <__aeabi_d2f>
 80029b2:	1c03      	adds	r3, r0, #0
 80029b4:	60fb      	str	r3, [r7, #12]

	return actualPressure;
 80029b6:	68fb      	ldr	r3, [r7, #12]
}
 80029b8:	1c18      	adds	r0, r3, #0
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b005      	add	sp, #20
 80029be:	bd90      	pop	{r4, r7, pc}
 80029c0:	20000088 	.word	0x20000088
 80029c4:	40590000 	.word	0x40590000

080029c8 <MS5611_GetTemperature>:
 ;	Description: 	Return Actual Temperature Value
 ; 	Inputs: 		Sampling Rate
 ;	Returns:		Actual Temperature Value
**********************************************************************/
float MS5611_GetTemperature(int osr)
{
 80029c8:	b590      	push	{r4, r7, lr}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
	float actualTemperature = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	60fb      	str	r3, [r7, #12]

	MS5611_ReadDigitalValues(osr);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	0018      	movs	r0, r3
 80029d8:	f7ff fc0a 	bl	80021f0 <MS5611_ReadDigitalValues>
	MS5611_DoCalculations();
 80029dc:	f7ff fe82 	bl	80026e4 <MS5611_DoCalculations>

	actualTemperature = CalculationParameters.TEMP / 100.00;
 80029e0:	4b0a      	ldr	r3, [pc, #40]	; (8002a0c <MS5611_GetTemperature+0x44>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	0018      	movs	r0, r3
 80029e6:	f7ff f8a3 	bl	8001b30 <__aeabi_i2d>
 80029ea:	2200      	movs	r2, #0
 80029ec:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <MS5611_GetTemperature+0x48>)
 80029ee:	f7fd ffad 	bl	800094c <__aeabi_ddiv>
 80029f2:	0003      	movs	r3, r0
 80029f4:	000c      	movs	r4, r1
 80029f6:	0018      	movs	r0, r3
 80029f8:	0021      	movs	r1, r4
 80029fa:	f7ff f905 	bl	8001c08 <__aeabi_d2f>
 80029fe:	1c03      	adds	r3, r0, #0
 8002a00:	60fb      	str	r3, [r7, #12]

	return actualTemperature;
 8002a02:	68fb      	ldr	r3, [r7, #12]
}
 8002a04:	1c18      	adds	r0, r3, #0
 8002a06:	46bd      	mov	sp, r7
 8002a08:	b005      	add	sp, #20
 8002a0a:	bd90      	pop	{r4, r7, pc}
 8002a0c:	20000088 	.word	0x20000088
 8002a10:	40590000 	.word	0x40590000

08002a14 <MS5611_Init>:
 ;	Description: 	Initialize MS5611
 ; 	Inputs: 		Nothing
 ;	Returns:		Nothing
**********************************************************************/
void MS5611_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
	MS5611_Reset();
 8002a18:	f7ff fafc 	bl	8002014 <MS5611_Reset>
	HAL_Delay(50);
 8002a1c:	2032      	movs	r0, #50	; 0x32
 8002a1e:	f000 fa23 	bl	8002e68 <HAL_Delay>
	MS5611_ReadCalibrationData();
 8002a22:	f7ff fb0f 	bl	8002044 <MS5611_ReadCalibrationData>
}
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a32:	4b17      	ldr	r3, [pc, #92]	; (8002a90 <MX_GPIO_Init+0x64>)
 8002a34:	695a      	ldr	r2, [r3, #20]
 8002a36:	4b16      	ldr	r3, [pc, #88]	; (8002a90 <MX_GPIO_Init+0x64>)
 8002a38:	2180      	movs	r1, #128	; 0x80
 8002a3a:	03c9      	lsls	r1, r1, #15
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	615a      	str	r2, [r3, #20]
 8002a40:	4b13      	ldr	r3, [pc, #76]	; (8002a90 <MX_GPIO_Init+0x64>)
 8002a42:	695a      	ldr	r2, [r3, #20]
 8002a44:	2380      	movs	r3, #128	; 0x80
 8002a46:	03db      	lsls	r3, r3, #15
 8002a48:	4013      	ands	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a4e:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <MX_GPIO_Init+0x64>)
 8002a50:	695a      	ldr	r2, [r3, #20]
 8002a52:	4b0f      	ldr	r3, [pc, #60]	; (8002a90 <MX_GPIO_Init+0x64>)
 8002a54:	2180      	movs	r1, #128	; 0x80
 8002a56:	0289      	lsls	r1, r1, #10
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	615a      	str	r2, [r3, #20]
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <MX_GPIO_Init+0x64>)
 8002a5e:	695a      	ldr	r2, [r3, #20]
 8002a60:	2380      	movs	r3, #128	; 0x80
 8002a62:	029b      	lsls	r3, r3, #10
 8002a64:	4013      	ands	r3, r2
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <MX_GPIO_Init+0x64>)
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <MX_GPIO_Init+0x64>)
 8002a70:	2180      	movs	r1, #128	; 0x80
 8002a72:	02c9      	lsls	r1, r1, #11
 8002a74:	430a      	orrs	r2, r1
 8002a76:	615a      	str	r2, [r3, #20]
 8002a78:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <MX_GPIO_Init+0x64>)
 8002a7a:	695a      	ldr	r2, [r3, #20]
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	02db      	lsls	r3, r3, #11
 8002a80:	4013      	ands	r3, r2
 8002a82:	607b      	str	r3, [r7, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]

}
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	b004      	add	sp, #16
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	40021000 	.word	0x40021000

08002a94 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002a98:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <MX_I2C1_Init+0x74>)
 8002a9a:	4a1c      	ldr	r2, [pc, #112]	; (8002b0c <MX_I2C1_Init+0x78>)
 8002a9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401D2A;
 8002a9e:	4b1a      	ldr	r3, [pc, #104]	; (8002b08 <MX_I2C1_Init+0x74>)
 8002aa0:	4a1b      	ldr	r2, [pc, #108]	; (8002b10 <MX_I2C1_Init+0x7c>)
 8002aa2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002aa4:	4b18      	ldr	r3, [pc, #96]	; (8002b08 <MX_I2C1_Init+0x74>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002aaa:	4b17      	ldr	r3, [pc, #92]	; (8002b08 <MX_I2C1_Init+0x74>)
 8002aac:	2201      	movs	r2, #1
 8002aae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ab0:	4b15      	ldr	r3, [pc, #84]	; (8002b08 <MX_I2C1_Init+0x74>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002ab6:	4b14      	ldr	r3, [pc, #80]	; (8002b08 <MX_I2C1_Init+0x74>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002abc:	4b12      	ldr	r3, [pc, #72]	; (8002b08 <MX_I2C1_Init+0x74>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ac2:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <MX_I2C1_Init+0x74>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ac8:	4b0f      	ldr	r3, [pc, #60]	; (8002b08 <MX_I2C1_Init+0x74>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ace:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <MX_I2C1_Init+0x74>)
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f000 fc0f 	bl	80032f4 <HAL_I2C_Init>
 8002ad6:	1e03      	subs	r3, r0, #0
 8002ad8:	d001      	beq.n	8002ade <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002ada:	f000 f8f0 	bl	8002cbe <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002ade:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <MX_I2C1_Init+0x74>)
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f001 f8a4 	bl	8003c30 <HAL_I2CEx_ConfigAnalogFilter>
 8002ae8:	1e03      	subs	r3, r0, #0
 8002aea:	d001      	beq.n	8002af0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002aec:	f000 f8e7 	bl	8002cbe <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002af0:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <MX_I2C1_Init+0x74>)
 8002af2:	2100      	movs	r1, #0
 8002af4:	0018      	movs	r0, r3
 8002af6:	f001 f8e7 	bl	8003cc8 <HAL_I2CEx_ConfigDigitalFilter>
 8002afa:	1e03      	subs	r3, r0, #0
 8002afc:	d001      	beq.n	8002b02 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002afe:	f000 f8de 	bl	8002cbe <Error_Handler>
  }

}
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	20000030 	.word	0x20000030
 8002b0c:	40005400 	.word	0x40005400
 8002b10:	00401d2a 	.word	0x00401d2a

08002b14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08a      	sub	sp, #40	; 0x28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b1c:	2314      	movs	r3, #20
 8002b1e:	18fb      	adds	r3, r7, r3
 8002b20:	0018      	movs	r0, r3
 8002b22:	2314      	movs	r3, #20
 8002b24:	001a      	movs	r2, r3
 8002b26:	2100      	movs	r1, #0
 8002b28:	f001 fe6e 	bl	8004808 <memset>
  if(i2cHandle->Instance==I2C1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a1c      	ldr	r2, [pc, #112]	; (8002ba4 <HAL_I2C_MspInit+0x90>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d131      	bne.n	8002b9a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b36:	4b1c      	ldr	r3, [pc, #112]	; (8002ba8 <HAL_I2C_MspInit+0x94>)
 8002b38:	695a      	ldr	r2, [r3, #20]
 8002b3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ba8 <HAL_I2C_MspInit+0x94>)
 8002b3c:	2180      	movs	r1, #128	; 0x80
 8002b3e:	02c9      	lsls	r1, r1, #11
 8002b40:	430a      	orrs	r2, r1
 8002b42:	615a      	str	r2, [r3, #20]
 8002b44:	4b18      	ldr	r3, [pc, #96]	; (8002ba8 <HAL_I2C_MspInit+0x94>)
 8002b46:	695a      	ldr	r2, [r3, #20]
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	02db      	lsls	r3, r3, #11
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
 8002b50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b52:	2114      	movs	r1, #20
 8002b54:	187b      	adds	r3, r7, r1
 8002b56:	22c0      	movs	r2, #192	; 0xc0
 8002b58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b5a:	187b      	adds	r3, r7, r1
 8002b5c:	2212      	movs	r2, #18
 8002b5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b60:	187b      	adds	r3, r7, r1
 8002b62:	2201      	movs	r2, #1
 8002b64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b66:	187b      	adds	r3, r7, r1
 8002b68:	2203      	movs	r2, #3
 8002b6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002b6c:	187b      	adds	r3, r7, r1
 8002b6e:	2201      	movs	r2, #1
 8002b70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b72:	187b      	adds	r3, r7, r1
 8002b74:	4a0d      	ldr	r2, [pc, #52]	; (8002bac <HAL_I2C_MspInit+0x98>)
 8002b76:	0019      	movs	r1, r3
 8002b78:	0010      	movs	r0, r2
 8002b7a:	f000 fa4b 	bl	8003014 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <HAL_I2C_MspInit+0x94>)
 8002b80:	69da      	ldr	r2, [r3, #28]
 8002b82:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <HAL_I2C_MspInit+0x94>)
 8002b84:	2180      	movs	r1, #128	; 0x80
 8002b86:	0389      	lsls	r1, r1, #14
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	61da      	str	r2, [r3, #28]
 8002b8c:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <HAL_I2C_MspInit+0x94>)
 8002b8e:	69da      	ldr	r2, [r3, #28]
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	039b      	lsls	r3, r3, #14
 8002b94:	4013      	ands	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	b00a      	add	sp, #40	; 0x28
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	46c0      	nop			; (mov r8, r8)
 8002ba4:	40005400 	.word	0x40005400
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	48000400 	.word	0x48000400

08002bb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bb6:	f000 f8f3 	bl	8002da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bba:	f000 f81b 	bl	8002bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bbe:	f7ff ff35 	bl	8002a2c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002bc2:	f7ff ff67 	bl	8002a94 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MS5611_Init();
 8002bc6:	f7ff ff25 	bl	8002a14 <MS5611_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	temperature = MS5611_GetTemperature(512);
 8002bca:	2380      	movs	r3, #128	; 0x80
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f7ff fefa 	bl	80029c8 <MS5611_GetTemperature>
 8002bd4:	1c03      	adds	r3, r0, #0
 8002bd6:	607b      	str	r3, [r7, #4]
	HAL_Delay(50);
 8002bd8:	2032      	movs	r0, #50	; 0x32
 8002bda:	f000 f945 	bl	8002e68 <HAL_Delay>
	pressure = MS5611_GetPressure(512);
 8002bde:	2380      	movs	r3, #128	; 0x80
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	0018      	movs	r0, r3
 8002be4:	f7ff fec8 	bl	8002978 <MS5611_GetPressure>
 8002be8:	1c03      	adds	r3, r0, #0
 8002bea:	603b      	str	r3, [r7, #0]
	HAL_Delay(50);
 8002bec:	2032      	movs	r0, #50	; 0x32
 8002bee:	f000 f93b 	bl	8002e68 <HAL_Delay>
	temperature = MS5611_GetTemperature(512);
 8002bf2:	e7ea      	b.n	8002bca <main+0x1a>

08002bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bf4:	b590      	push	{r4, r7, lr}
 8002bf6:	b097      	sub	sp, #92	; 0x5c
 8002bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bfa:	2428      	movs	r4, #40	; 0x28
 8002bfc:	193b      	adds	r3, r7, r4
 8002bfe:	0018      	movs	r0, r3
 8002c00:	2330      	movs	r3, #48	; 0x30
 8002c02:	001a      	movs	r2, r3
 8002c04:	2100      	movs	r1, #0
 8002c06:	f001 fdff 	bl	8004808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c0a:	2318      	movs	r3, #24
 8002c0c:	18fb      	adds	r3, r7, r3
 8002c0e:	0018      	movs	r0, r3
 8002c10:	2310      	movs	r3, #16
 8002c12:	001a      	movs	r2, r3
 8002c14:	2100      	movs	r1, #0
 8002c16:	f001 fdf7 	bl	8004808 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c1a:	1d3b      	adds	r3, r7, #4
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	2314      	movs	r3, #20
 8002c20:	001a      	movs	r2, r3
 8002c22:	2100      	movs	r1, #0
 8002c24:	f001 fdf0 	bl	8004808 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002c28:	0021      	movs	r1, r4
 8002c2a:	187b      	adds	r3, r7, r1
 8002c2c:	2203      	movs	r2, #3
 8002c2e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c30:	187b      	adds	r3, r7, r1
 8002c32:	2201      	movs	r2, #1
 8002c34:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c36:	187b      	adds	r3, r7, r1
 8002c38:	2201      	movs	r2, #1
 8002c3a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c3c:	187b      	adds	r3, r7, r1
 8002c3e:	2210      	movs	r2, #16
 8002c40:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c42:	187b      	adds	r3, r7, r1
 8002c44:	2202      	movs	r2, #2
 8002c46:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c48:	187b      	adds	r3, r7, r1
 8002c4a:	2280      	movs	r2, #128	; 0x80
 8002c4c:	0252      	lsls	r2, r2, #9
 8002c4e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002c50:	187b      	adds	r3, r7, r1
 8002c52:	2280      	movs	r2, #128	; 0x80
 8002c54:	0352      	lsls	r2, r2, #13
 8002c56:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002c58:	187b      	adds	r3, r7, r1
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c5e:	187b      	adds	r3, r7, r1
 8002c60:	0018      	movs	r0, r3
 8002c62:	f001 f87d 	bl	8003d60 <HAL_RCC_OscConfig>
 8002c66:	1e03      	subs	r3, r0, #0
 8002c68:	d001      	beq.n	8002c6e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8002c6a:	f000 f828 	bl	8002cbe <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c6e:	2118      	movs	r1, #24
 8002c70:	187b      	adds	r3, r7, r1
 8002c72:	2207      	movs	r2, #7
 8002c74:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c76:	187b      	adds	r3, r7, r1
 8002c78:	2202      	movs	r2, #2
 8002c7a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c7c:	187b      	adds	r3, r7, r1
 8002c7e:	2200      	movs	r2, #0
 8002c80:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c82:	187b      	adds	r3, r7, r1
 8002c84:	2200      	movs	r2, #0
 8002c86:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002c88:	187b      	adds	r3, r7, r1
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f001 fb85 	bl	800439c <HAL_RCC_ClockConfig>
 8002c92:	1e03      	subs	r3, r0, #0
 8002c94:	d001      	beq.n	8002c9a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002c96:	f000 f812 	bl	8002cbe <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002c9a:	1d3b      	adds	r3, r7, #4
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002ca0:	1d3b      	adds	r3, r7, #4
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ca6:	1d3b      	adds	r3, r7, #4
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f001 fcab 	bl	8004604 <HAL_RCCEx_PeriphCLKConfig>
 8002cae:	1e03      	subs	r3, r0, #0
 8002cb0:	d001      	beq.n	8002cb6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002cb2:	f000 f804 	bl	8002cbe <Error_Handler>
  }
}
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	b017      	add	sp, #92	; 0x5c
 8002cbc:	bd90      	pop	{r4, r7, pc}

08002cbe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cce:	4b0f      	ldr	r3, [pc, #60]	; (8002d0c <HAL_MspInit+0x44>)
 8002cd0:	699a      	ldr	r2, [r3, #24]
 8002cd2:	4b0e      	ldr	r3, [pc, #56]	; (8002d0c <HAL_MspInit+0x44>)
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	619a      	str	r2, [r3, #24]
 8002cda:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <HAL_MspInit+0x44>)
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	607b      	str	r3, [r7, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ce6:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <HAL_MspInit+0x44>)
 8002ce8:	69da      	ldr	r2, [r3, #28]
 8002cea:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <HAL_MspInit+0x44>)
 8002cec:	2180      	movs	r1, #128	; 0x80
 8002cee:	0549      	lsls	r1, r1, #21
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	61da      	str	r2, [r3, #28]
 8002cf4:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <HAL_MspInit+0x44>)
 8002cf6:	69da      	ldr	r2, [r3, #28]
 8002cf8:	2380      	movs	r3, #128	; 0x80
 8002cfa:	055b      	lsls	r3, r3, #21
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	603b      	str	r3, [r7, #0]
 8002d00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	46bd      	mov	sp, r7
 8002d06:	b002      	add	sp, #8
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	40021000 	.word	0x40021000

08002d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d14:	46c0      	nop			; (mov r8, r8)
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d1e:	e7fe      	b.n	8002d1e <HardFault_Handler+0x4>

08002d20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002d24:	46c0      	nop			; (mov r8, r8)
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d38:	f000 f87a 	bl	8002e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d3c:	46c0      	nop			; (mov r8, r8)
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d4c:	480d      	ldr	r0, [pc, #52]	; (8002d84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d4e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d50:	480d      	ldr	r0, [pc, #52]	; (8002d88 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d52:	490e      	ldr	r1, [pc, #56]	; (8002d8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d54:	4a0e      	ldr	r2, [pc, #56]	; (8002d90 <LoopForever+0xe>)
  movs r3, #0
 8002d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d58:	e002      	b.n	8002d60 <LoopCopyDataInit>

08002d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d5e:	3304      	adds	r3, #4

08002d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d64:	d3f9      	bcc.n	8002d5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d66:	4a0b      	ldr	r2, [pc, #44]	; (8002d94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d68:	4c0b      	ldr	r4, [pc, #44]	; (8002d98 <LoopForever+0x16>)
  movs r3, #0
 8002d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d6c:	e001      	b.n	8002d72 <LoopFillZerobss>

08002d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d70:	3204      	adds	r2, #4

08002d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d74:	d3fb      	bcc.n	8002d6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002d76:	f7ff ffe4 	bl	8002d42 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002d7a:	f001 fd21 	bl	80047c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d7e:	f7ff ff17 	bl	8002bb0 <main>

08002d82 <LoopForever>:

LoopForever:
    b LoopForever
 8002d82:	e7fe      	b.n	8002d82 <LoopForever>
  ldr   r0, =_estack
 8002d84:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d8c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002d90:	080048e8 	.word	0x080048e8
  ldr r2, =_sbss
 8002d94:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002d98:	200000b8 	.word	0x200000b8

08002d9c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d9c:	e7fe      	b.n	8002d9c <ADC1_IRQHandler>
	...

08002da0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002da4:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <HAL_Init+0x24>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <HAL_Init+0x24>)
 8002daa:	2110      	movs	r1, #16
 8002dac:	430a      	orrs	r2, r1
 8002dae:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002db0:	2000      	movs	r0, #0
 8002db2:	f000 f809 	bl	8002dc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002db6:	f7ff ff87 	bl	8002cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	40022000 	.word	0x40022000

08002dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dc8:	b590      	push	{r4, r7, lr}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dd0:	4b14      	ldr	r3, [pc, #80]	; (8002e24 <HAL_InitTick+0x5c>)
 8002dd2:	681c      	ldr	r4, [r3, #0]
 8002dd4:	4b14      	ldr	r3, [pc, #80]	; (8002e28 <HAL_InitTick+0x60>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	0019      	movs	r1, r3
 8002dda:	23fa      	movs	r3, #250	; 0xfa
 8002ddc:	0098      	lsls	r0, r3, #2
 8002dde:	f7fd f993 	bl	8000108 <__udivsi3>
 8002de2:	0003      	movs	r3, r0
 8002de4:	0019      	movs	r1, r3
 8002de6:	0020      	movs	r0, r4
 8002de8:	f7fd f98e 	bl	8000108 <__udivsi3>
 8002dec:	0003      	movs	r3, r0
 8002dee:	0018      	movs	r0, r3
 8002df0:	f000 f903 	bl	8002ffa <HAL_SYSTICK_Config>
 8002df4:	1e03      	subs	r3, r0, #0
 8002df6:	d001      	beq.n	8002dfc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e00f      	b.n	8002e1c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b03      	cmp	r3, #3
 8002e00:	d80b      	bhi.n	8002e1a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	2301      	movs	r3, #1
 8002e06:	425b      	negs	r3, r3
 8002e08:	2200      	movs	r2, #0
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f000 f8e0 	bl	8002fd0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e10:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <HAL_InitTick+0x64>)
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	e000      	b.n	8002e1c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
}
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	b003      	add	sp, #12
 8002e22:	bd90      	pop	{r4, r7, pc}
 8002e24:	20000000 	.word	0x20000000
 8002e28:	20000008 	.word	0x20000008
 8002e2c:	20000004 	.word	0x20000004

08002e30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e34:	4b05      	ldr	r3, [pc, #20]	; (8002e4c <HAL_IncTick+0x1c>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	001a      	movs	r2, r3
 8002e3a:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <HAL_IncTick+0x20>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	18d2      	adds	r2, r2, r3
 8002e40:	4b03      	ldr	r3, [pc, #12]	; (8002e50 <HAL_IncTick+0x20>)
 8002e42:	601a      	str	r2, [r3, #0]
}
 8002e44:	46c0      	nop			; (mov r8, r8)
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	20000008 	.word	0x20000008
 8002e50:	200000b4 	.word	0x200000b4

08002e54 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  return uwTick;
 8002e58:	4b02      	ldr	r3, [pc, #8]	; (8002e64 <HAL_GetTick+0x10>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
}
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	200000b4 	.word	0x200000b4

08002e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e70:	f7ff fff0 	bl	8002e54 <HAL_GetTick>
 8002e74:	0003      	movs	r3, r0
 8002e76:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	d005      	beq.n	8002e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e82:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <HAL_Delay+0x40>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	001a      	movs	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	189b      	adds	r3, r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	f7ff ffe0 	bl	8002e54 <HAL_GetTick>
 8002e94:	0002      	movs	r2, r0
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d8f7      	bhi.n	8002e90 <HAL_Delay+0x28>
  {
  }
}
 8002ea0:	46c0      	nop			; (mov r8, r8)
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b004      	add	sp, #16
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20000008 	.word	0x20000008

08002eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eac:	b590      	push	{r4, r7, lr}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	0002      	movs	r2, r0
 8002eb4:	6039      	str	r1, [r7, #0]
 8002eb6:	1dfb      	adds	r3, r7, #7
 8002eb8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002eba:	1dfb      	adds	r3, r7, #7
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	2b7f      	cmp	r3, #127	; 0x7f
 8002ec0:	d828      	bhi.n	8002f14 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ec2:	4a2f      	ldr	r2, [pc, #188]	; (8002f80 <__NVIC_SetPriority+0xd4>)
 8002ec4:	1dfb      	adds	r3, r7, #7
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	b25b      	sxtb	r3, r3
 8002eca:	089b      	lsrs	r3, r3, #2
 8002ecc:	33c0      	adds	r3, #192	; 0xc0
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	589b      	ldr	r3, [r3, r2]
 8002ed2:	1dfa      	adds	r2, r7, #7
 8002ed4:	7812      	ldrb	r2, [r2, #0]
 8002ed6:	0011      	movs	r1, r2
 8002ed8:	2203      	movs	r2, #3
 8002eda:	400a      	ands	r2, r1
 8002edc:	00d2      	lsls	r2, r2, #3
 8002ede:	21ff      	movs	r1, #255	; 0xff
 8002ee0:	4091      	lsls	r1, r2
 8002ee2:	000a      	movs	r2, r1
 8002ee4:	43d2      	mvns	r2, r2
 8002ee6:	401a      	ands	r2, r3
 8002ee8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	019b      	lsls	r3, r3, #6
 8002eee:	22ff      	movs	r2, #255	; 0xff
 8002ef0:	401a      	ands	r2, r3
 8002ef2:	1dfb      	adds	r3, r7, #7
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	2303      	movs	r3, #3
 8002efa:	4003      	ands	r3, r0
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f00:	481f      	ldr	r0, [pc, #124]	; (8002f80 <__NVIC_SetPriority+0xd4>)
 8002f02:	1dfb      	adds	r3, r7, #7
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	b25b      	sxtb	r3, r3
 8002f08:	089b      	lsrs	r3, r3, #2
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	33c0      	adds	r3, #192	; 0xc0
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002f12:	e031      	b.n	8002f78 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f14:	4a1b      	ldr	r2, [pc, #108]	; (8002f84 <__NVIC_SetPriority+0xd8>)
 8002f16:	1dfb      	adds	r3, r7, #7
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	0019      	movs	r1, r3
 8002f1c:	230f      	movs	r3, #15
 8002f1e:	400b      	ands	r3, r1
 8002f20:	3b08      	subs	r3, #8
 8002f22:	089b      	lsrs	r3, r3, #2
 8002f24:	3306      	adds	r3, #6
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	18d3      	adds	r3, r2, r3
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	1dfa      	adds	r2, r7, #7
 8002f30:	7812      	ldrb	r2, [r2, #0]
 8002f32:	0011      	movs	r1, r2
 8002f34:	2203      	movs	r2, #3
 8002f36:	400a      	ands	r2, r1
 8002f38:	00d2      	lsls	r2, r2, #3
 8002f3a:	21ff      	movs	r1, #255	; 0xff
 8002f3c:	4091      	lsls	r1, r2
 8002f3e:	000a      	movs	r2, r1
 8002f40:	43d2      	mvns	r2, r2
 8002f42:	401a      	ands	r2, r3
 8002f44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	019b      	lsls	r3, r3, #6
 8002f4a:	22ff      	movs	r2, #255	; 0xff
 8002f4c:	401a      	ands	r2, r3
 8002f4e:	1dfb      	adds	r3, r7, #7
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	0018      	movs	r0, r3
 8002f54:	2303      	movs	r3, #3
 8002f56:	4003      	ands	r3, r0
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f5c:	4809      	ldr	r0, [pc, #36]	; (8002f84 <__NVIC_SetPriority+0xd8>)
 8002f5e:	1dfb      	adds	r3, r7, #7
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	001c      	movs	r4, r3
 8002f64:	230f      	movs	r3, #15
 8002f66:	4023      	ands	r3, r4
 8002f68:	3b08      	subs	r3, #8
 8002f6a:	089b      	lsrs	r3, r3, #2
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	3306      	adds	r3, #6
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	18c3      	adds	r3, r0, r3
 8002f74:	3304      	adds	r3, #4
 8002f76:	601a      	str	r2, [r3, #0]
}
 8002f78:	46c0      	nop			; (mov r8, r8)
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	b003      	add	sp, #12
 8002f7e:	bd90      	pop	{r4, r7, pc}
 8002f80:	e000e100 	.word	0xe000e100
 8002f84:	e000ed00 	.word	0xe000ed00

08002f88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	4a0c      	ldr	r2, [pc, #48]	; (8002fc8 <SysTick_Config+0x40>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d901      	bls.n	8002f9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e010      	b.n	8002fc0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f9e:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <SysTick_Config+0x44>)
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	3a01      	subs	r2, #1
 8002fa4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	425b      	negs	r3, r3
 8002faa:	2103      	movs	r1, #3
 8002fac:	0018      	movs	r0, r3
 8002fae:	f7ff ff7d 	bl	8002eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fb2:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <SysTick_Config+0x44>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fb8:	4b04      	ldr	r3, [pc, #16]	; (8002fcc <SysTick_Config+0x44>)
 8002fba:	2207      	movs	r2, #7
 8002fbc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	b002      	add	sp, #8
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	00ffffff 	.word	0x00ffffff
 8002fcc:	e000e010 	.word	0xe000e010

08002fd0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	607a      	str	r2, [r7, #4]
 8002fda:	210f      	movs	r1, #15
 8002fdc:	187b      	adds	r3, r7, r1
 8002fde:	1c02      	adds	r2, r0, #0
 8002fe0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	187b      	adds	r3, r7, r1
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	b25b      	sxtb	r3, r3
 8002fea:	0011      	movs	r1, r2
 8002fec:	0018      	movs	r0, r3
 8002fee:	f7ff ff5d 	bl	8002eac <__NVIC_SetPriority>
}
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	b004      	add	sp, #16
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b082      	sub	sp, #8
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	0018      	movs	r0, r3
 8003006:	f7ff ffbf 	bl	8002f88 <SysTick_Config>
 800300a:	0003      	movs	r3, r0
}
 800300c:	0018      	movs	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	b002      	add	sp, #8
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003022:	e14f      	b.n	80032c4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2101      	movs	r1, #1
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	4091      	lsls	r1, r2
 800302e:	000a      	movs	r2, r1
 8003030:	4013      	ands	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d100      	bne.n	800303c <HAL_GPIO_Init+0x28>
 800303a:	e140      	b.n	80032be <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2203      	movs	r2, #3
 8003042:	4013      	ands	r3, r2
 8003044:	2b01      	cmp	r3, #1
 8003046:	d005      	beq.n	8003054 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2203      	movs	r2, #3
 800304e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003050:	2b02      	cmp	r3, #2
 8003052:	d130      	bne.n	80030b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	2203      	movs	r2, #3
 8003060:	409a      	lsls	r2, r3
 8003062:	0013      	movs	r3, r2
 8003064:	43da      	mvns	r2, r3
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	4013      	ands	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	409a      	lsls	r2, r3
 8003076:	0013      	movs	r3, r2
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	4313      	orrs	r3, r2
 800307c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800308a:	2201      	movs	r2, #1
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	409a      	lsls	r2, r3
 8003090:	0013      	movs	r3, r2
 8003092:	43da      	mvns	r2, r3
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	4013      	ands	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	091b      	lsrs	r3, r3, #4
 80030a0:	2201      	movs	r2, #1
 80030a2:	401a      	ands	r2, r3
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	409a      	lsls	r2, r3
 80030a8:	0013      	movs	r3, r2
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2203      	movs	r2, #3
 80030bc:	4013      	ands	r3, r2
 80030be:	2b03      	cmp	r3, #3
 80030c0:	d017      	beq.n	80030f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	2203      	movs	r2, #3
 80030ce:	409a      	lsls	r2, r3
 80030d0:	0013      	movs	r3, r2
 80030d2:	43da      	mvns	r2, r3
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4013      	ands	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	409a      	lsls	r2, r3
 80030e4:	0013      	movs	r3, r2
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2203      	movs	r2, #3
 80030f8:	4013      	ands	r3, r2
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d123      	bne.n	8003146 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	08da      	lsrs	r2, r3, #3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3208      	adds	r2, #8
 8003106:	0092      	lsls	r2, r2, #2
 8003108:	58d3      	ldr	r3, [r2, r3]
 800310a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2207      	movs	r2, #7
 8003110:	4013      	ands	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	220f      	movs	r2, #15
 8003116:	409a      	lsls	r2, r3
 8003118:	0013      	movs	r3, r2
 800311a:	43da      	mvns	r2, r3
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	4013      	ands	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	691a      	ldr	r2, [r3, #16]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	2107      	movs	r1, #7
 800312a:	400b      	ands	r3, r1
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	409a      	lsls	r2, r3
 8003130:	0013      	movs	r3, r2
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	08da      	lsrs	r2, r3, #3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3208      	adds	r2, #8
 8003140:	0092      	lsls	r2, r2, #2
 8003142:	6939      	ldr	r1, [r7, #16]
 8003144:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	2203      	movs	r2, #3
 8003152:	409a      	lsls	r2, r3
 8003154:	0013      	movs	r3, r2
 8003156:	43da      	mvns	r2, r3
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	4013      	ands	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2203      	movs	r2, #3
 8003164:	401a      	ands	r2, r3
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	409a      	lsls	r2, r3
 800316c:	0013      	movs	r3, r2
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	23c0      	movs	r3, #192	; 0xc0
 8003180:	029b      	lsls	r3, r3, #10
 8003182:	4013      	ands	r3, r2
 8003184:	d100      	bne.n	8003188 <HAL_GPIO_Init+0x174>
 8003186:	e09a      	b.n	80032be <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003188:	4b54      	ldr	r3, [pc, #336]	; (80032dc <HAL_GPIO_Init+0x2c8>)
 800318a:	699a      	ldr	r2, [r3, #24]
 800318c:	4b53      	ldr	r3, [pc, #332]	; (80032dc <HAL_GPIO_Init+0x2c8>)
 800318e:	2101      	movs	r1, #1
 8003190:	430a      	orrs	r2, r1
 8003192:	619a      	str	r2, [r3, #24]
 8003194:	4b51      	ldr	r3, [pc, #324]	; (80032dc <HAL_GPIO_Init+0x2c8>)
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	2201      	movs	r2, #1
 800319a:	4013      	ands	r3, r2
 800319c:	60bb      	str	r3, [r7, #8]
 800319e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031a0:	4a4f      	ldr	r2, [pc, #316]	; (80032e0 <HAL_GPIO_Init+0x2cc>)
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	089b      	lsrs	r3, r3, #2
 80031a6:	3302      	adds	r3, #2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	589b      	ldr	r3, [r3, r2]
 80031ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2203      	movs	r2, #3
 80031b2:	4013      	ands	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	220f      	movs	r2, #15
 80031b8:	409a      	lsls	r2, r3
 80031ba:	0013      	movs	r3, r2
 80031bc:	43da      	mvns	r2, r3
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4013      	ands	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	2390      	movs	r3, #144	; 0x90
 80031c8:	05db      	lsls	r3, r3, #23
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d013      	beq.n	80031f6 <HAL_GPIO_Init+0x1e2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a44      	ldr	r2, [pc, #272]	; (80032e4 <HAL_GPIO_Init+0x2d0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d00d      	beq.n	80031f2 <HAL_GPIO_Init+0x1de>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a43      	ldr	r2, [pc, #268]	; (80032e8 <HAL_GPIO_Init+0x2d4>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d007      	beq.n	80031ee <HAL_GPIO_Init+0x1da>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a42      	ldr	r2, [pc, #264]	; (80032ec <HAL_GPIO_Init+0x2d8>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d101      	bne.n	80031ea <HAL_GPIO_Init+0x1d6>
 80031e6:	2303      	movs	r3, #3
 80031e8:	e006      	b.n	80031f8 <HAL_GPIO_Init+0x1e4>
 80031ea:	2305      	movs	r3, #5
 80031ec:	e004      	b.n	80031f8 <HAL_GPIO_Init+0x1e4>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e002      	b.n	80031f8 <HAL_GPIO_Init+0x1e4>
 80031f2:	2301      	movs	r3, #1
 80031f4:	e000      	b.n	80031f8 <HAL_GPIO_Init+0x1e4>
 80031f6:	2300      	movs	r3, #0
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	2103      	movs	r1, #3
 80031fc:	400a      	ands	r2, r1
 80031fe:	0092      	lsls	r2, r2, #2
 8003200:	4093      	lsls	r3, r2
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	4313      	orrs	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003208:	4935      	ldr	r1, [pc, #212]	; (80032e0 <HAL_GPIO_Init+0x2cc>)
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	089b      	lsrs	r3, r3, #2
 800320e:	3302      	adds	r3, #2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003216:	4b36      	ldr	r3, [pc, #216]	; (80032f0 <HAL_GPIO_Init+0x2dc>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	43da      	mvns	r2, r3
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4013      	ands	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	2380      	movs	r3, #128	; 0x80
 800322c:	025b      	lsls	r3, r3, #9
 800322e:	4013      	ands	r3, r2
 8003230:	d003      	beq.n	800323a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4313      	orrs	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800323a:	4b2d      	ldr	r3, [pc, #180]	; (80032f0 <HAL_GPIO_Init+0x2dc>)
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003240:	4b2b      	ldr	r3, [pc, #172]	; (80032f0 <HAL_GPIO_Init+0x2dc>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	43da      	mvns	r2, r3
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	4013      	ands	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	2380      	movs	r3, #128	; 0x80
 8003256:	029b      	lsls	r3, r3, #10
 8003258:	4013      	ands	r3, r2
 800325a:	d003      	beq.n	8003264 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	4313      	orrs	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003264:	4b22      	ldr	r3, [pc, #136]	; (80032f0 <HAL_GPIO_Init+0x2dc>)
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800326a:	4b21      	ldr	r3, [pc, #132]	; (80032f0 <HAL_GPIO_Init+0x2dc>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	43da      	mvns	r2, r3
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	4013      	ands	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	2380      	movs	r3, #128	; 0x80
 8003280:	035b      	lsls	r3, r3, #13
 8003282:	4013      	ands	r3, r2
 8003284:	d003      	beq.n	800328e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4313      	orrs	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800328e:	4b18      	ldr	r3, [pc, #96]	; (80032f0 <HAL_GPIO_Init+0x2dc>)
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003294:	4b16      	ldr	r3, [pc, #88]	; (80032f0 <HAL_GPIO_Init+0x2dc>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	43da      	mvns	r2, r3
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	4013      	ands	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	2380      	movs	r3, #128	; 0x80
 80032aa:	039b      	lsls	r3, r3, #14
 80032ac:	4013      	ands	r3, r2
 80032ae:	d003      	beq.n	80032b8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80032b8:	4b0d      	ldr	r3, [pc, #52]	; (80032f0 <HAL_GPIO_Init+0x2dc>)
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	3301      	adds	r3, #1
 80032c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	40da      	lsrs	r2, r3
 80032cc:	1e13      	subs	r3, r2, #0
 80032ce:	d000      	beq.n	80032d2 <HAL_GPIO_Init+0x2be>
 80032d0:	e6a8      	b.n	8003024 <HAL_GPIO_Init+0x10>
  } 
}
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	46bd      	mov	sp, r7
 80032d6:	b006      	add	sp, #24
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	40021000 	.word	0x40021000
 80032e0:	40010000 	.word	0x40010000
 80032e4:	48000400 	.word	0x48000400
 80032e8:	48000800 	.word	0x48000800
 80032ec:	48000c00 	.word	0x48000c00
 80032f0:	40010400 	.word	0x40010400

080032f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e082      	b.n	800340c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2241      	movs	r2, #65	; 0x41
 800330a:	5c9b      	ldrb	r3, [r3, r2]
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d107      	bne.n	8003322 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2240      	movs	r2, #64	; 0x40
 8003316:	2100      	movs	r1, #0
 8003318:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	0018      	movs	r0, r3
 800331e:	f7ff fbf9 	bl	8002b14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2241      	movs	r2, #65	; 0x41
 8003326:	2124      	movs	r1, #36	; 0x24
 8003328:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2101      	movs	r1, #1
 8003336:	438a      	bics	r2, r1
 8003338:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4934      	ldr	r1, [pc, #208]	; (8003414 <HAL_I2C_Init+0x120>)
 8003344:	400a      	ands	r2, r1
 8003346:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4931      	ldr	r1, [pc, #196]	; (8003418 <HAL_I2C_Init+0x124>)
 8003354:	400a      	ands	r2, r1
 8003356:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d108      	bne.n	8003372 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2180      	movs	r1, #128	; 0x80
 800336a:	0209      	lsls	r1, r1, #8
 800336c:	430a      	orrs	r2, r1
 800336e:	609a      	str	r2, [r3, #8]
 8003370:	e007      	b.n	8003382 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689a      	ldr	r2, [r3, #8]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2184      	movs	r1, #132	; 0x84
 800337c:	0209      	lsls	r1, r1, #8
 800337e:	430a      	orrs	r2, r1
 8003380:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	2b02      	cmp	r3, #2
 8003388:	d104      	bne.n	8003394 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2280      	movs	r2, #128	; 0x80
 8003390:	0112      	lsls	r2, r2, #4
 8003392:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	491f      	ldr	r1, [pc, #124]	; (800341c <HAL_I2C_Init+0x128>)
 80033a0:	430a      	orrs	r2, r1
 80033a2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	491a      	ldr	r1, [pc, #104]	; (8003418 <HAL_I2C_Init+0x124>)
 80033b0:	400a      	ands	r2, r1
 80033b2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691a      	ldr	r2, [r3, #16]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	431a      	orrs	r2, r3
 80033be:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69d9      	ldr	r1, [r3, #28]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a1a      	ldr	r2, [r3, #32]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2101      	movs	r1, #1
 80033ea:	430a      	orrs	r2, r1
 80033ec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2241      	movs	r2, #65	; 0x41
 80033f8:	2120      	movs	r1, #32
 80033fa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2242      	movs	r2, #66	; 0x42
 8003406:	2100      	movs	r1, #0
 8003408:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	0018      	movs	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	b002      	add	sp, #8
 8003412:	bd80      	pop	{r7, pc}
 8003414:	f0ffffff 	.word	0xf0ffffff
 8003418:	ffff7fff 	.word	0xffff7fff
 800341c:	02008000 	.word	0x02008000

08003420 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003420:	b590      	push	{r4, r7, lr}
 8003422:	b089      	sub	sp, #36	; 0x24
 8003424:	af02      	add	r7, sp, #8
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	0008      	movs	r0, r1
 800342a:	607a      	str	r2, [r7, #4]
 800342c:	0019      	movs	r1, r3
 800342e:	230a      	movs	r3, #10
 8003430:	18fb      	adds	r3, r7, r3
 8003432:	1c02      	adds	r2, r0, #0
 8003434:	801a      	strh	r2, [r3, #0]
 8003436:	2308      	movs	r3, #8
 8003438:	18fb      	adds	r3, r7, r3
 800343a:	1c0a      	adds	r2, r1, #0
 800343c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2241      	movs	r2, #65	; 0x41
 8003442:	5c9b      	ldrb	r3, [r3, r2]
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b20      	cmp	r3, #32
 8003448:	d000      	beq.n	800344c <HAL_I2C_Master_Transmit+0x2c>
 800344a:	e0e7      	b.n	800361c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2240      	movs	r2, #64	; 0x40
 8003450:	5c9b      	ldrb	r3, [r3, r2]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d101      	bne.n	800345a <HAL_I2C_Master_Transmit+0x3a>
 8003456:	2302      	movs	r3, #2
 8003458:	e0e1      	b.n	800361e <HAL_I2C_Master_Transmit+0x1fe>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2240      	movs	r2, #64	; 0x40
 800345e:	2101      	movs	r1, #1
 8003460:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003462:	f7ff fcf7 	bl	8002e54 <HAL_GetTick>
 8003466:	0003      	movs	r3, r0
 8003468:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800346a:	2380      	movs	r3, #128	; 0x80
 800346c:	0219      	lsls	r1, r3, #8
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	2319      	movs	r3, #25
 8003476:	2201      	movs	r2, #1
 8003478:	f000 fa04 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 800347c:	1e03      	subs	r3, r0, #0
 800347e:	d001      	beq.n	8003484 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e0cc      	b.n	800361e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2241      	movs	r2, #65	; 0x41
 8003488:	2121      	movs	r1, #33	; 0x21
 800348a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2242      	movs	r2, #66	; 0x42
 8003490:	2110      	movs	r1, #16
 8003492:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2208      	movs	r2, #8
 80034a4:	18ba      	adds	r2, r7, r2
 80034a6:	8812      	ldrh	r2, [r2, #0]
 80034a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2bff      	cmp	r3, #255	; 0xff
 80034b8:	d911      	bls.n	80034de <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	22ff      	movs	r2, #255	; 0xff
 80034be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	2380      	movs	r3, #128	; 0x80
 80034c8:	045c      	lsls	r4, r3, #17
 80034ca:	230a      	movs	r3, #10
 80034cc:	18fb      	adds	r3, r7, r3
 80034ce:	8819      	ldrh	r1, [r3, #0]
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	4b55      	ldr	r3, [pc, #340]	; (8003628 <HAL_I2C_Master_Transmit+0x208>)
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	0023      	movs	r3, r4
 80034d8:	f000 fb74 	bl	8003bc4 <I2C_TransferConfig>
 80034dc:	e075      	b.n	80035ca <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	2380      	movs	r3, #128	; 0x80
 80034f0:	049c      	lsls	r4, r3, #18
 80034f2:	230a      	movs	r3, #10
 80034f4:	18fb      	adds	r3, r7, r3
 80034f6:	8819      	ldrh	r1, [r3, #0]
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	4b4b      	ldr	r3, [pc, #300]	; (8003628 <HAL_I2C_Master_Transmit+0x208>)
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	0023      	movs	r3, r4
 8003500:	f000 fb60 	bl	8003bc4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003504:	e061      	b.n	80035ca <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	0018      	movs	r0, r3
 800350e:	f000 f9f8 	bl	8003902 <I2C_WaitOnTXISFlagUntilTimeout>
 8003512:	1e03      	subs	r3, r0, #0
 8003514:	d001      	beq.n	800351a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e081      	b.n	800361e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	781a      	ldrb	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	1c5a      	adds	r2, r3, #1
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003534:	b29b      	uxth	r3, r3
 8003536:	3b01      	subs	r3, #1
 8003538:	b29a      	uxth	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003542:	3b01      	subs	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354e:	b29b      	uxth	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d03a      	beq.n	80035ca <HAL_I2C_Master_Transmit+0x1aa>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003558:	2b00      	cmp	r3, #0
 800355a:	d136      	bne.n	80035ca <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800355c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	0013      	movs	r3, r2
 8003566:	2200      	movs	r2, #0
 8003568:	2180      	movs	r1, #128	; 0x80
 800356a:	f000 f98b 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 800356e:	1e03      	subs	r3, r0, #0
 8003570:	d001      	beq.n	8003576 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e053      	b.n	800361e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357a:	b29b      	uxth	r3, r3
 800357c:	2bff      	cmp	r3, #255	; 0xff
 800357e:	d911      	bls.n	80035a4 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	22ff      	movs	r2, #255	; 0xff
 8003584:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358a:	b2da      	uxtb	r2, r3
 800358c:	2380      	movs	r3, #128	; 0x80
 800358e:	045c      	lsls	r4, r3, #17
 8003590:	230a      	movs	r3, #10
 8003592:	18fb      	adds	r3, r7, r3
 8003594:	8819      	ldrh	r1, [r3, #0]
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	2300      	movs	r3, #0
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	0023      	movs	r3, r4
 800359e:	f000 fb11 	bl	8003bc4 <I2C_TransferConfig>
 80035a2:	e012      	b.n	80035ca <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	2380      	movs	r3, #128	; 0x80
 80035b6:	049c      	lsls	r4, r3, #18
 80035b8:	230a      	movs	r3, #10
 80035ba:	18fb      	adds	r3, r7, r3
 80035bc:	8819      	ldrh	r1, [r3, #0]
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	2300      	movs	r3, #0
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	0023      	movs	r3, r4
 80035c6:	f000 fafd 	bl	8003bc4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d198      	bne.n	8003506 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	0018      	movs	r0, r3
 80035dc:	f000 f9d0 	bl	8003980 <I2C_WaitOnSTOPFlagUntilTimeout>
 80035e0:	1e03      	subs	r3, r0, #0
 80035e2:	d001      	beq.n	80035e8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e01a      	b.n	800361e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2220      	movs	r2, #32
 80035ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	490c      	ldr	r1, [pc, #48]	; (800362c <HAL_I2C_Master_Transmit+0x20c>)
 80035fc:	400a      	ands	r2, r1
 80035fe:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2241      	movs	r2, #65	; 0x41
 8003604:	2120      	movs	r1, #32
 8003606:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2242      	movs	r2, #66	; 0x42
 800360c:	2100      	movs	r1, #0
 800360e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2240      	movs	r2, #64	; 0x40
 8003614:	2100      	movs	r1, #0
 8003616:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	e000      	b.n	800361e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800361c:	2302      	movs	r3, #2
  }
}
 800361e:	0018      	movs	r0, r3
 8003620:	46bd      	mov	sp, r7
 8003622:	b007      	add	sp, #28
 8003624:	bd90      	pop	{r4, r7, pc}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	80002000 	.word	0x80002000
 800362c:	fe00e800 	.word	0xfe00e800

08003630 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003630:	b590      	push	{r4, r7, lr}
 8003632:	b089      	sub	sp, #36	; 0x24
 8003634:	af02      	add	r7, sp, #8
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	0008      	movs	r0, r1
 800363a:	607a      	str	r2, [r7, #4]
 800363c:	0019      	movs	r1, r3
 800363e:	230a      	movs	r3, #10
 8003640:	18fb      	adds	r3, r7, r3
 8003642:	1c02      	adds	r2, r0, #0
 8003644:	801a      	strh	r2, [r3, #0]
 8003646:	2308      	movs	r3, #8
 8003648:	18fb      	adds	r3, r7, r3
 800364a:	1c0a      	adds	r2, r1, #0
 800364c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2241      	movs	r2, #65	; 0x41
 8003652:	5c9b      	ldrb	r3, [r3, r2]
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b20      	cmp	r3, #32
 8003658:	d000      	beq.n	800365c <HAL_I2C_Master_Receive+0x2c>
 800365a:	e0e8      	b.n	800382e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2240      	movs	r2, #64	; 0x40
 8003660:	5c9b      	ldrb	r3, [r3, r2]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d101      	bne.n	800366a <HAL_I2C_Master_Receive+0x3a>
 8003666:	2302      	movs	r3, #2
 8003668:	e0e2      	b.n	8003830 <HAL_I2C_Master_Receive+0x200>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2240      	movs	r2, #64	; 0x40
 800366e:	2101      	movs	r1, #1
 8003670:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003672:	f7ff fbef 	bl	8002e54 <HAL_GetTick>
 8003676:	0003      	movs	r3, r0
 8003678:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800367a:	2380      	movs	r3, #128	; 0x80
 800367c:	0219      	lsls	r1, r3, #8
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	2319      	movs	r3, #25
 8003686:	2201      	movs	r2, #1
 8003688:	f000 f8fc 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 800368c:	1e03      	subs	r3, r0, #0
 800368e:	d001      	beq.n	8003694 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e0cd      	b.n	8003830 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2241      	movs	r2, #65	; 0x41
 8003698:	2122      	movs	r1, #34	; 0x22
 800369a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2242      	movs	r2, #66	; 0x42
 80036a0:	2110      	movs	r1, #16
 80036a2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2208      	movs	r2, #8
 80036b4:	18ba      	adds	r2, r7, r2
 80036b6:	8812      	ldrh	r2, [r2, #0]
 80036b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	2bff      	cmp	r3, #255	; 0xff
 80036c8:	d911      	bls.n	80036ee <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	22ff      	movs	r2, #255	; 0xff
 80036ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	2380      	movs	r3, #128	; 0x80
 80036d8:	045c      	lsls	r4, r3, #17
 80036da:	230a      	movs	r3, #10
 80036dc:	18fb      	adds	r3, r7, r3
 80036de:	8819      	ldrh	r1, [r3, #0]
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	4b55      	ldr	r3, [pc, #340]	; (8003838 <HAL_I2C_Master_Receive+0x208>)
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	0023      	movs	r3, r4
 80036e8:	f000 fa6c 	bl	8003bc4 <I2C_TransferConfig>
 80036ec:	e076      	b.n	80037dc <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	2380      	movs	r3, #128	; 0x80
 8003700:	049c      	lsls	r4, r3, #18
 8003702:	230a      	movs	r3, #10
 8003704:	18fb      	adds	r3, r7, r3
 8003706:	8819      	ldrh	r1, [r3, #0]
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	4b4b      	ldr	r3, [pc, #300]	; (8003838 <HAL_I2C_Master_Receive+0x208>)
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	0023      	movs	r3, r4
 8003710:	f000 fa58 	bl	8003bc4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003714:	e062      	b.n	80037dc <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	0018      	movs	r0, r3
 800371e:	f000 f96b 	bl	80039f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003722:	1e03      	subs	r3, r0, #0
 8003724:	d001      	beq.n	800372a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e082      	b.n	8003830 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003760:	b29b      	uxth	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d03a      	beq.n	80037dc <HAL_I2C_Master_Receive+0x1ac>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376a:	2b00      	cmp	r3, #0
 800376c:	d136      	bne.n	80037dc <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800376e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	9300      	str	r3, [sp, #0]
 8003776:	0013      	movs	r3, r2
 8003778:	2200      	movs	r2, #0
 800377a:	2180      	movs	r1, #128	; 0x80
 800377c:	f000 f882 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 8003780:	1e03      	subs	r3, r0, #0
 8003782:	d001      	beq.n	8003788 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e053      	b.n	8003830 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378c:	b29b      	uxth	r3, r3
 800378e:	2bff      	cmp	r3, #255	; 0xff
 8003790:	d911      	bls.n	80037b6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	22ff      	movs	r2, #255	; 0xff
 8003796:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379c:	b2da      	uxtb	r2, r3
 800379e:	2380      	movs	r3, #128	; 0x80
 80037a0:	045c      	lsls	r4, r3, #17
 80037a2:	230a      	movs	r3, #10
 80037a4:	18fb      	adds	r3, r7, r3
 80037a6:	8819      	ldrh	r1, [r3, #0]
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	2300      	movs	r3, #0
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	0023      	movs	r3, r4
 80037b0:	f000 fa08 	bl	8003bc4 <I2C_TransferConfig>
 80037b4:	e012      	b.n	80037dc <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	2380      	movs	r3, #128	; 0x80
 80037c8:	049c      	lsls	r4, r3, #18
 80037ca:	230a      	movs	r3, #10
 80037cc:	18fb      	adds	r3, r7, r3
 80037ce:	8819      	ldrh	r1, [r3, #0]
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	2300      	movs	r3, #0
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	0023      	movs	r3, r4
 80037d8:	f000 f9f4 	bl	8003bc4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d197      	bne.n	8003716 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	0018      	movs	r0, r3
 80037ee:	f000 f8c7 	bl	8003980 <I2C_WaitOnSTOPFlagUntilTimeout>
 80037f2:	1e03      	subs	r3, r0, #0
 80037f4:	d001      	beq.n	80037fa <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e01a      	b.n	8003830 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2220      	movs	r2, #32
 8003800:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	490b      	ldr	r1, [pc, #44]	; (800383c <HAL_I2C_Master_Receive+0x20c>)
 800380e:	400a      	ands	r2, r1
 8003810:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2241      	movs	r2, #65	; 0x41
 8003816:	2120      	movs	r1, #32
 8003818:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2242      	movs	r2, #66	; 0x42
 800381e:	2100      	movs	r1, #0
 8003820:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2240      	movs	r2, #64	; 0x40
 8003826:	2100      	movs	r1, #0
 8003828:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800382a:	2300      	movs	r3, #0
 800382c:	e000      	b.n	8003830 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800382e:	2302      	movs	r3, #2
  }
}
 8003830:	0018      	movs	r0, r3
 8003832:	46bd      	mov	sp, r7
 8003834:	b007      	add	sp, #28
 8003836:	bd90      	pop	{r4, r7, pc}
 8003838:	80002400 	.word	0x80002400
 800383c:	fe00e800 	.word	0xfe00e800

08003840 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	2202      	movs	r2, #2
 8003850:	4013      	ands	r3, r2
 8003852:	2b02      	cmp	r3, #2
 8003854:	d103      	bne.n	800385e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2200      	movs	r2, #0
 800385c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	2201      	movs	r2, #1
 8003866:	4013      	ands	r3, r2
 8003868:	2b01      	cmp	r3, #1
 800386a:	d007      	beq.n	800387c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	699a      	ldr	r2, [r3, #24]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2101      	movs	r1, #1
 8003878:	430a      	orrs	r2, r1
 800387a:	619a      	str	r2, [r3, #24]
  }
}
 800387c:	46c0      	nop			; (mov r8, r8)
 800387e:	46bd      	mov	sp, r7
 8003880:	b002      	add	sp, #8
 8003882:	bd80      	pop	{r7, pc}

08003884 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	603b      	str	r3, [r7, #0]
 8003890:	1dfb      	adds	r3, r7, #7
 8003892:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003894:	e021      	b.n	80038da <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	3301      	adds	r3, #1
 800389a:	d01e      	beq.n	80038da <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800389c:	f7ff fada 	bl	8002e54 <HAL_GetTick>
 80038a0:	0002      	movs	r2, r0
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d302      	bcc.n	80038b2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d113      	bne.n	80038da <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b6:	2220      	movs	r2, #32
 80038b8:	431a      	orrs	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2241      	movs	r2, #65	; 0x41
 80038c2:	2120      	movs	r1, #32
 80038c4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2242      	movs	r2, #66	; 0x42
 80038ca:	2100      	movs	r1, #0
 80038cc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2240      	movs	r2, #64	; 0x40
 80038d2:	2100      	movs	r1, #0
 80038d4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e00f      	b.n	80038fa <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	4013      	ands	r3, r2
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	425a      	negs	r2, r3
 80038ea:	4153      	adcs	r3, r2
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	001a      	movs	r2, r3
 80038f0:	1dfb      	adds	r3, r7, #7
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d0ce      	beq.n	8003896 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	0018      	movs	r0, r3
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b004      	add	sp, #16
 8003900:	bd80      	pop	{r7, pc}

08003902 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b084      	sub	sp, #16
 8003906:	af00      	add	r7, sp, #0
 8003908:	60f8      	str	r0, [r7, #12]
 800390a:	60b9      	str	r1, [r7, #8]
 800390c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800390e:	e02b      	b.n	8003968 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	68b9      	ldr	r1, [r7, #8]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	0018      	movs	r0, r3
 8003918:	f000 f8da 	bl	8003ad0 <I2C_IsAcknowledgeFailed>
 800391c:	1e03      	subs	r3, r0, #0
 800391e:	d001      	beq.n	8003924 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e029      	b.n	8003978 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	3301      	adds	r3, #1
 8003928:	d01e      	beq.n	8003968 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800392a:	f7ff fa93 	bl	8002e54 <HAL_GetTick>
 800392e:	0002      	movs	r2, r0
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	429a      	cmp	r2, r3
 8003938:	d302      	bcc.n	8003940 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d113      	bne.n	8003968 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003944:	2220      	movs	r2, #32
 8003946:	431a      	orrs	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2241      	movs	r2, #65	; 0x41
 8003950:	2120      	movs	r1, #32
 8003952:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2242      	movs	r2, #66	; 0x42
 8003958:	2100      	movs	r1, #0
 800395a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2240      	movs	r2, #64	; 0x40
 8003960:	2100      	movs	r1, #0
 8003962:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e007      	b.n	8003978 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	2202      	movs	r2, #2
 8003970:	4013      	ands	r3, r2
 8003972:	2b02      	cmp	r3, #2
 8003974:	d1cc      	bne.n	8003910 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	0018      	movs	r0, r3
 800397a:	46bd      	mov	sp, r7
 800397c:	b004      	add	sp, #16
 800397e:	bd80      	pop	{r7, pc}

08003980 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800398c:	e028      	b.n	80039e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	68b9      	ldr	r1, [r7, #8]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	0018      	movs	r0, r3
 8003996:	f000 f89b 	bl	8003ad0 <I2C_IsAcknowledgeFailed>
 800399a:	1e03      	subs	r3, r0, #0
 800399c:	d001      	beq.n	80039a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e026      	b.n	80039f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a2:	f7ff fa57 	bl	8002e54 <HAL_GetTick>
 80039a6:	0002      	movs	r2, r0
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d302      	bcc.n	80039b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d113      	bne.n	80039e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039bc:	2220      	movs	r2, #32
 80039be:	431a      	orrs	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2241      	movs	r2, #65	; 0x41
 80039c8:	2120      	movs	r1, #32
 80039ca:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2242      	movs	r2, #66	; 0x42
 80039d0:	2100      	movs	r1, #0
 80039d2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2240      	movs	r2, #64	; 0x40
 80039d8:	2100      	movs	r1, #0
 80039da:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e007      	b.n	80039f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	2220      	movs	r2, #32
 80039e8:	4013      	ands	r3, r2
 80039ea:	2b20      	cmp	r3, #32
 80039ec:	d1cf      	bne.n	800398e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	0018      	movs	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b004      	add	sp, #16
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a04:	e055      	b.n	8003ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	68b9      	ldr	r1, [r7, #8]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f000 f85f 	bl	8003ad0 <I2C_IsAcknowledgeFailed>
 8003a12:	1e03      	subs	r3, r0, #0
 8003a14:	d001      	beq.n	8003a1a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e053      	b.n	8003ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	2220      	movs	r2, #32
 8003a22:	4013      	ands	r3, r2
 8003a24:	2b20      	cmp	r3, #32
 8003a26:	d129      	bne.n	8003a7c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	2204      	movs	r2, #4
 8003a30:	4013      	ands	r3, r2
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d105      	bne.n	8003a42 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	e03f      	b.n	8003ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2220      	movs	r2, #32
 8003a48:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	491d      	ldr	r1, [pc, #116]	; (8003acc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003a56:	400a      	ands	r2, r1
 8003a58:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2241      	movs	r2, #65	; 0x41
 8003a64:	2120      	movs	r1, #32
 8003a66:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2242      	movs	r2, #66	; 0x42
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2240      	movs	r2, #64	; 0x40
 8003a74:	2100      	movs	r1, #0
 8003a76:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e022      	b.n	8003ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a7c:	f7ff f9ea 	bl	8002e54 <HAL_GetTick>
 8003a80:	0002      	movs	r2, r0
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d302      	bcc.n	8003a92 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10f      	bne.n	8003ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a96:	2220      	movs	r2, #32
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2241      	movs	r2, #65	; 0x41
 8003aa2:	2120      	movs	r1, #32
 8003aa4:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2240      	movs	r2, #64	; 0x40
 8003aaa:	2100      	movs	r1, #0
 8003aac:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e007      	b.n	8003ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	2204      	movs	r2, #4
 8003aba:	4013      	ands	r3, r2
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d1a2      	bne.n	8003a06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	b004      	add	sp, #16
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	fe00e800 	.word	0xfe00e800

08003ad0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	2210      	movs	r2, #16
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	2b10      	cmp	r3, #16
 8003ae8:	d164      	bne.n	8003bb4 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	2380      	movs	r3, #128	; 0x80
 8003af2:	049b      	lsls	r3, r3, #18
 8003af4:	401a      	ands	r2, r3
 8003af6:	2380      	movs	r3, #128	; 0x80
 8003af8:	049b      	lsls	r3, r3, #18
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d02b      	beq.n	8003b56 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2180      	movs	r1, #128	; 0x80
 8003b0a:	01c9      	lsls	r1, r1, #7
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b10:	e021      	b.n	8003b56 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	3301      	adds	r3, #1
 8003b16:	d01e      	beq.n	8003b56 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b18:	f7ff f99c 	bl	8002e54 <HAL_GetTick>
 8003b1c:	0002      	movs	r2, r0
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d302      	bcc.n	8003b2e <I2C_IsAcknowledgeFailed+0x5e>
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d113      	bne.n	8003b56 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	2220      	movs	r2, #32
 8003b34:	431a      	orrs	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2241      	movs	r2, #65	; 0x41
 8003b3e:	2120      	movs	r1, #32
 8003b40:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2242      	movs	r2, #66	; 0x42
 8003b46:	2100      	movs	r1, #0
 8003b48:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2240      	movs	r2, #64	; 0x40
 8003b4e:	2100      	movs	r1, #0
 8003b50:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e02f      	b.n	8003bb6 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2b20      	cmp	r3, #32
 8003b62:	d1d6      	bne.n	8003b12 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2210      	movs	r2, #16
 8003b6a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2220      	movs	r2, #32
 8003b72:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	0018      	movs	r0, r3
 8003b78:	f7ff fe62 	bl	8003840 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	490e      	ldr	r1, [pc, #56]	; (8003bc0 <I2C_IsAcknowledgeFailed+0xf0>)
 8003b88:	400a      	ands	r2, r1
 8003b8a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b90:	2204      	movs	r2, #4
 8003b92:	431a      	orrs	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2241      	movs	r2, #65	; 0x41
 8003b9c:	2120      	movs	r1, #32
 8003b9e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2242      	movs	r2, #66	; 0x42
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2240      	movs	r2, #64	; 0x40
 8003bac:	2100      	movs	r1, #0
 8003bae:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e000      	b.n	8003bb6 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	b004      	add	sp, #16
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	46c0      	nop			; (mov r8, r8)
 8003bc0:	fe00e800 	.word	0xfe00e800

08003bc4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003bc4:	b590      	push	{r4, r7, lr}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	0008      	movs	r0, r1
 8003bce:	0011      	movs	r1, r2
 8003bd0:	607b      	str	r3, [r7, #4]
 8003bd2:	240a      	movs	r4, #10
 8003bd4:	193b      	adds	r3, r7, r4
 8003bd6:	1c02      	adds	r2, r0, #0
 8003bd8:	801a      	strh	r2, [r3, #0]
 8003bda:	2009      	movs	r0, #9
 8003bdc:	183b      	adds	r3, r7, r0
 8003bde:	1c0a      	adds	r2, r1, #0
 8003be0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	6a3a      	ldr	r2, [r7, #32]
 8003bea:	0d51      	lsrs	r1, r2, #21
 8003bec:	2280      	movs	r2, #128	; 0x80
 8003bee:	00d2      	lsls	r2, r2, #3
 8003bf0:	400a      	ands	r2, r1
 8003bf2:	490e      	ldr	r1, [pc, #56]	; (8003c2c <I2C_TransferConfig+0x68>)
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	43d2      	mvns	r2, r2
 8003bf8:	401a      	ands	r2, r3
 8003bfa:	0011      	movs	r1, r2
 8003bfc:	193b      	adds	r3, r7, r4
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	059b      	lsls	r3, r3, #22
 8003c02:	0d9a      	lsrs	r2, r3, #22
 8003c04:	183b      	adds	r3, r7, r0
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	0418      	lsls	r0, r3, #16
 8003c0a:	23ff      	movs	r3, #255	; 0xff
 8003c0c:	041b      	lsls	r3, r3, #16
 8003c0e:	4003      	ands	r3, r0
 8003c10:	431a      	orrs	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	431a      	orrs	r2, r3
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	46bd      	mov	sp, r7
 8003c26:	b005      	add	sp, #20
 8003c28:	bd90      	pop	{r4, r7, pc}
 8003c2a:	46c0      	nop			; (mov r8, r8)
 8003c2c:	03ff63ff 	.word	0x03ff63ff

08003c30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2241      	movs	r2, #65	; 0x41
 8003c3e:	5c9b      	ldrb	r3, [r3, r2]
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b20      	cmp	r3, #32
 8003c44:	d138      	bne.n	8003cb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2240      	movs	r2, #64	; 0x40
 8003c4a:	5c9b      	ldrb	r3, [r3, r2]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e032      	b.n	8003cba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2240      	movs	r2, #64	; 0x40
 8003c58:	2101      	movs	r1, #1
 8003c5a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2241      	movs	r2, #65	; 0x41
 8003c60:	2124      	movs	r1, #36	; 0x24
 8003c62:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2101      	movs	r1, #1
 8003c70:	438a      	bics	r2, r1
 8003c72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4911      	ldr	r1, [pc, #68]	; (8003cc4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003c80:	400a      	ands	r2, r1
 8003c82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6819      	ldr	r1, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2241      	movs	r2, #65	; 0x41
 8003ca8:	2120      	movs	r1, #32
 8003caa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2240      	movs	r2, #64	; 0x40
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	e000      	b.n	8003cba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003cb8:	2302      	movs	r3, #2
  }
}
 8003cba:	0018      	movs	r0, r3
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	b002      	add	sp, #8
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	46c0      	nop			; (mov r8, r8)
 8003cc4:	ffffefff 	.word	0xffffefff

08003cc8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2241      	movs	r2, #65	; 0x41
 8003cd6:	5c9b      	ldrb	r3, [r3, r2]
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b20      	cmp	r3, #32
 8003cdc:	d139      	bne.n	8003d52 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2240      	movs	r2, #64	; 0x40
 8003ce2:	5c9b      	ldrb	r3, [r3, r2]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d101      	bne.n	8003cec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	e033      	b.n	8003d54 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2240      	movs	r2, #64	; 0x40
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2241      	movs	r2, #65	; 0x41
 8003cf8:	2124      	movs	r1, #36	; 0x24
 8003cfa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2101      	movs	r1, #1
 8003d08:	438a      	bics	r2, r1
 8003d0a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4a11      	ldr	r2, [pc, #68]	; (8003d5c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003d18:	4013      	ands	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	021b      	lsls	r3, r3, #8
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2101      	movs	r1, #1
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2241      	movs	r2, #65	; 0x41
 8003d42:	2120      	movs	r1, #32
 8003d44:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2240      	movs	r2, #64	; 0x40
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	e000      	b.n	8003d54 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d52:	2302      	movs	r3, #2
  }
}
 8003d54:	0018      	movs	r0, r3
 8003d56:	46bd      	mov	sp, r7
 8003d58:	b004      	add	sp, #16
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	fffff0ff 	.word	0xfffff0ff

08003d60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b088      	sub	sp, #32
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e305      	b.n	800437e <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2201      	movs	r2, #1
 8003d78:	4013      	ands	r3, r2
 8003d7a:	d100      	bne.n	8003d7e <HAL_RCC_OscConfig+0x1e>
 8003d7c:	e08d      	b.n	8003e9a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003d7e:	4bc5      	ldr	r3, [pc, #788]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	220c      	movs	r2, #12
 8003d84:	4013      	ands	r3, r2
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d00e      	beq.n	8003da8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d8a:	4bc2      	ldr	r3, [pc, #776]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	220c      	movs	r2, #12
 8003d90:	4013      	ands	r3, r2
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	d116      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x64>
 8003d96:	4bbf      	ldr	r3, [pc, #764]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	23c0      	movs	r3, #192	; 0xc0
 8003d9c:	025b      	lsls	r3, r3, #9
 8003d9e:	401a      	ands	r2, r3
 8003da0:	2380      	movs	r3, #128	; 0x80
 8003da2:	025b      	lsls	r3, r3, #9
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d10d      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003da8:	4bba      	ldr	r3, [pc, #744]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	2380      	movs	r3, #128	; 0x80
 8003dae:	029b      	lsls	r3, r3, #10
 8003db0:	4013      	ands	r3, r2
 8003db2:	d100      	bne.n	8003db6 <HAL_RCC_OscConfig+0x56>
 8003db4:	e070      	b.n	8003e98 <HAL_RCC_OscConfig+0x138>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d000      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x60>
 8003dbe:	e06b      	b.n	8003e98 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e2dc      	b.n	800437e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d107      	bne.n	8003ddc <HAL_RCC_OscConfig+0x7c>
 8003dcc:	4bb1      	ldr	r3, [pc, #708]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	4bb0      	ldr	r3, [pc, #704]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003dd2:	2180      	movs	r1, #128	; 0x80
 8003dd4:	0249      	lsls	r1, r1, #9
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	e02f      	b.n	8003e3c <HAL_RCC_OscConfig+0xdc>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10c      	bne.n	8003dfe <HAL_RCC_OscConfig+0x9e>
 8003de4:	4bab      	ldr	r3, [pc, #684]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	4baa      	ldr	r3, [pc, #680]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003dea:	49ab      	ldr	r1, [pc, #684]	; (8004098 <HAL_RCC_OscConfig+0x338>)
 8003dec:	400a      	ands	r2, r1
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	4ba8      	ldr	r3, [pc, #672]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	4ba7      	ldr	r3, [pc, #668]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003df6:	49a9      	ldr	r1, [pc, #676]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003df8:	400a      	ands	r2, r1
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	e01e      	b.n	8003e3c <HAL_RCC_OscConfig+0xdc>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b05      	cmp	r3, #5
 8003e04:	d10e      	bne.n	8003e24 <HAL_RCC_OscConfig+0xc4>
 8003e06:	4ba3      	ldr	r3, [pc, #652]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	4ba2      	ldr	r3, [pc, #648]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003e0c:	2180      	movs	r1, #128	; 0x80
 8003e0e:	02c9      	lsls	r1, r1, #11
 8003e10:	430a      	orrs	r2, r1
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	4b9f      	ldr	r3, [pc, #636]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	4b9e      	ldr	r3, [pc, #632]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003e1a:	2180      	movs	r1, #128	; 0x80
 8003e1c:	0249      	lsls	r1, r1, #9
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	e00b      	b.n	8003e3c <HAL_RCC_OscConfig+0xdc>
 8003e24:	4b9b      	ldr	r3, [pc, #620]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	4b9a      	ldr	r3, [pc, #616]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003e2a:	499b      	ldr	r1, [pc, #620]	; (8004098 <HAL_RCC_OscConfig+0x338>)
 8003e2c:	400a      	ands	r2, r1
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	4b98      	ldr	r3, [pc, #608]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	4b97      	ldr	r3, [pc, #604]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003e36:	4999      	ldr	r1, [pc, #612]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003e38:	400a      	ands	r2, r1
 8003e3a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d014      	beq.n	8003e6e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e44:	f7ff f806 	bl	8002e54 <HAL_GetTick>
 8003e48:	0003      	movs	r3, r0
 8003e4a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e4c:	e008      	b.n	8003e60 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e4e:	f7ff f801 	bl	8002e54 <HAL_GetTick>
 8003e52:	0002      	movs	r2, r0
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b64      	cmp	r3, #100	; 0x64
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e28e      	b.n	800437e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e60:	4b8c      	ldr	r3, [pc, #560]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	2380      	movs	r3, #128	; 0x80
 8003e66:	029b      	lsls	r3, r3, #10
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d0f0      	beq.n	8003e4e <HAL_RCC_OscConfig+0xee>
 8003e6c:	e015      	b.n	8003e9a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6e:	f7fe fff1 	bl	8002e54 <HAL_GetTick>
 8003e72:	0003      	movs	r3, r0
 8003e74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e78:	f7fe ffec 	bl	8002e54 <HAL_GetTick>
 8003e7c:	0002      	movs	r2, r0
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b64      	cmp	r3, #100	; 0x64
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e279      	b.n	800437e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e8a:	4b82      	ldr	r3, [pc, #520]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	2380      	movs	r3, #128	; 0x80
 8003e90:	029b      	lsls	r3, r3, #10
 8003e92:	4013      	ands	r3, r2
 8003e94:	d1f0      	bne.n	8003e78 <HAL_RCC_OscConfig+0x118>
 8003e96:	e000      	b.n	8003e9a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e98:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	d100      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x146>
 8003ea4:	e06c      	b.n	8003f80 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003ea6:	4b7b      	ldr	r3, [pc, #492]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	220c      	movs	r2, #12
 8003eac:	4013      	ands	r3, r2
 8003eae:	d00e      	beq.n	8003ece <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003eb0:	4b78      	ldr	r3, [pc, #480]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	220c      	movs	r2, #12
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	d11f      	bne.n	8003efc <HAL_RCC_OscConfig+0x19c>
 8003ebc:	4b75      	ldr	r3, [pc, #468]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	23c0      	movs	r3, #192	; 0xc0
 8003ec2:	025b      	lsls	r3, r3, #9
 8003ec4:	401a      	ands	r2, r3
 8003ec6:	2380      	movs	r3, #128	; 0x80
 8003ec8:	021b      	lsls	r3, r3, #8
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d116      	bne.n	8003efc <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ece:	4b71      	ldr	r3, [pc, #452]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	d005      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x184>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d001      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e24c      	b.n	800437e <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee4:	4b6b      	ldr	r3, [pc, #428]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	22f8      	movs	r2, #248	; 0xf8
 8003eea:	4393      	bics	r3, r2
 8003eec:	0019      	movs	r1, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	00da      	lsls	r2, r3, #3
 8003ef4:	4b67      	ldr	r3, [pc, #412]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003efa:	e041      	b.n	8003f80 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d024      	beq.n	8003f4e <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f04:	4b63      	ldr	r3, [pc, #396]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	4b62      	ldr	r3, [pc, #392]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f10:	f7fe ffa0 	bl	8002e54 <HAL_GetTick>
 8003f14:	0003      	movs	r3, r0
 8003f16:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f1a:	f7fe ff9b 	bl	8002e54 <HAL_GetTick>
 8003f1e:	0002      	movs	r2, r0
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e228      	b.n	800437e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2c:	4b59      	ldr	r3, [pc, #356]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2202      	movs	r2, #2
 8003f32:	4013      	ands	r3, r2
 8003f34:	d0f1      	beq.n	8003f1a <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f36:	4b57      	ldr	r3, [pc, #348]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	22f8      	movs	r2, #248	; 0xf8
 8003f3c:	4393      	bics	r3, r2
 8003f3e:	0019      	movs	r1, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	00da      	lsls	r2, r3, #3
 8003f46:	4b53      	ldr	r3, [pc, #332]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	e018      	b.n	8003f80 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f4e:	4b51      	ldr	r3, [pc, #324]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	4b50      	ldr	r3, [pc, #320]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003f54:	2101      	movs	r1, #1
 8003f56:	438a      	bics	r2, r1
 8003f58:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5a:	f7fe ff7b 	bl	8002e54 <HAL_GetTick>
 8003f5e:	0003      	movs	r3, r0
 8003f60:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f64:	f7fe ff76 	bl	8002e54 <HAL_GetTick>
 8003f68:	0002      	movs	r2, r0
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e203      	b.n	800437e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f76:	4b47      	ldr	r3, [pc, #284]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	d1f1      	bne.n	8003f64 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2208      	movs	r2, #8
 8003f86:	4013      	ands	r3, r2
 8003f88:	d036      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d019      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f92:	4b40      	ldr	r3, [pc, #256]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003f94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f96:	4b3f      	ldr	r3, [pc, #252]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003f98:	2101      	movs	r1, #1
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f9e:	f7fe ff59 	bl	8002e54 <HAL_GetTick>
 8003fa2:	0003      	movs	r3, r0
 8003fa4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fa8:	f7fe ff54 	bl	8002e54 <HAL_GetTick>
 8003fac:	0002      	movs	r2, r0
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e1e1      	b.n	800437e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fba:	4b36      	ldr	r3, [pc, #216]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	d0f1      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x248>
 8003fc4:	e018      	b.n	8003ff8 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fc6:	4b33      	ldr	r3, [pc, #204]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003fc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fca:	4b32      	ldr	r3, [pc, #200]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003fcc:	2101      	movs	r1, #1
 8003fce:	438a      	bics	r2, r1
 8003fd0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd2:	f7fe ff3f 	bl	8002e54 <HAL_GetTick>
 8003fd6:	0003      	movs	r3, r0
 8003fd8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fdc:	f7fe ff3a 	bl	8002e54 <HAL_GetTick>
 8003fe0:	0002      	movs	r2, r0
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e1c7      	b.n	800437e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fee:	4b29      	ldr	r3, [pc, #164]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	d1f1      	bne.n	8003fdc <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2204      	movs	r2, #4
 8003ffe:	4013      	ands	r3, r2
 8004000:	d100      	bne.n	8004004 <HAL_RCC_OscConfig+0x2a4>
 8004002:	e0b5      	b.n	8004170 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004004:	231f      	movs	r3, #31
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	2200      	movs	r2, #0
 800400a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800400c:	4b21      	ldr	r3, [pc, #132]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 800400e:	69da      	ldr	r2, [r3, #28]
 8004010:	2380      	movs	r3, #128	; 0x80
 8004012:	055b      	lsls	r3, r3, #21
 8004014:	4013      	ands	r3, r2
 8004016:	d111      	bne.n	800403c <HAL_RCC_OscConfig+0x2dc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004018:	4b1e      	ldr	r3, [pc, #120]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 800401a:	69da      	ldr	r2, [r3, #28]
 800401c:	4b1d      	ldr	r3, [pc, #116]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 800401e:	2180      	movs	r1, #128	; 0x80
 8004020:	0549      	lsls	r1, r1, #21
 8004022:	430a      	orrs	r2, r1
 8004024:	61da      	str	r2, [r3, #28]
 8004026:	4b1b      	ldr	r3, [pc, #108]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8004028:	69da      	ldr	r2, [r3, #28]
 800402a:	2380      	movs	r3, #128	; 0x80
 800402c:	055b      	lsls	r3, r3, #21
 800402e:	4013      	ands	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004034:	231f      	movs	r3, #31
 8004036:	18fb      	adds	r3, r7, r3
 8004038:	2201      	movs	r2, #1
 800403a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800403c:	4b18      	ldr	r3, [pc, #96]	; (80040a0 <HAL_RCC_OscConfig+0x340>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	2380      	movs	r3, #128	; 0x80
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	4013      	ands	r3, r2
 8004046:	d11a      	bne.n	800407e <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004048:	4b15      	ldr	r3, [pc, #84]	; (80040a0 <HAL_RCC_OscConfig+0x340>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	4b14      	ldr	r3, [pc, #80]	; (80040a0 <HAL_RCC_OscConfig+0x340>)
 800404e:	2180      	movs	r1, #128	; 0x80
 8004050:	0049      	lsls	r1, r1, #1
 8004052:	430a      	orrs	r2, r1
 8004054:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004056:	f7fe fefd 	bl	8002e54 <HAL_GetTick>
 800405a:	0003      	movs	r3, r0
 800405c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x312>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004060:	f7fe fef8 	bl	8002e54 <HAL_GetTick>
 8004064:	0002      	movs	r2, r0
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b64      	cmp	r3, #100	; 0x64
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x312>
        {
          return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e185      	b.n	800437e <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004072:	4b0b      	ldr	r3, [pc, #44]	; (80040a0 <HAL_RCC_OscConfig+0x340>)
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	2380      	movs	r3, #128	; 0x80
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	4013      	ands	r3, r2
 800407c:	d0f0      	beq.n	8004060 <HAL_RCC_OscConfig+0x300>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d10e      	bne.n	80040a4 <HAL_RCC_OscConfig+0x344>
 8004086:	4b03      	ldr	r3, [pc, #12]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 8004088:	6a1a      	ldr	r2, [r3, #32]
 800408a:	4b02      	ldr	r3, [pc, #8]	; (8004094 <HAL_RCC_OscConfig+0x334>)
 800408c:	2101      	movs	r1, #1
 800408e:	430a      	orrs	r2, r1
 8004090:	621a      	str	r2, [r3, #32]
 8004092:	e035      	b.n	8004100 <HAL_RCC_OscConfig+0x3a0>
 8004094:	40021000 	.word	0x40021000
 8004098:	fffeffff 	.word	0xfffeffff
 800409c:	fffbffff 	.word	0xfffbffff
 80040a0:	40007000 	.word	0x40007000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10c      	bne.n	80040c6 <HAL_RCC_OscConfig+0x366>
 80040ac:	4bb6      	ldr	r3, [pc, #728]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 80040ae:	6a1a      	ldr	r2, [r3, #32]
 80040b0:	4bb5      	ldr	r3, [pc, #724]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 80040b2:	2101      	movs	r1, #1
 80040b4:	438a      	bics	r2, r1
 80040b6:	621a      	str	r2, [r3, #32]
 80040b8:	4bb3      	ldr	r3, [pc, #716]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 80040ba:	6a1a      	ldr	r2, [r3, #32]
 80040bc:	4bb2      	ldr	r3, [pc, #712]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 80040be:	2104      	movs	r1, #4
 80040c0:	438a      	bics	r2, r1
 80040c2:	621a      	str	r2, [r3, #32]
 80040c4:	e01c      	b.n	8004100 <HAL_RCC_OscConfig+0x3a0>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	2b05      	cmp	r3, #5
 80040cc:	d10c      	bne.n	80040e8 <HAL_RCC_OscConfig+0x388>
 80040ce:	4bae      	ldr	r3, [pc, #696]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 80040d0:	6a1a      	ldr	r2, [r3, #32]
 80040d2:	4bad      	ldr	r3, [pc, #692]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 80040d4:	2104      	movs	r1, #4
 80040d6:	430a      	orrs	r2, r1
 80040d8:	621a      	str	r2, [r3, #32]
 80040da:	4bab      	ldr	r3, [pc, #684]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 80040dc:	6a1a      	ldr	r2, [r3, #32]
 80040de:	4baa      	ldr	r3, [pc, #680]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 80040e0:	2101      	movs	r1, #1
 80040e2:	430a      	orrs	r2, r1
 80040e4:	621a      	str	r2, [r3, #32]
 80040e6:	e00b      	b.n	8004100 <HAL_RCC_OscConfig+0x3a0>
 80040e8:	4ba7      	ldr	r3, [pc, #668]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 80040ea:	6a1a      	ldr	r2, [r3, #32]
 80040ec:	4ba6      	ldr	r3, [pc, #664]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 80040ee:	2101      	movs	r1, #1
 80040f0:	438a      	bics	r2, r1
 80040f2:	621a      	str	r2, [r3, #32]
 80040f4:	4ba4      	ldr	r3, [pc, #656]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 80040f6:	6a1a      	ldr	r2, [r3, #32]
 80040f8:	4ba3      	ldr	r3, [pc, #652]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 80040fa:	2104      	movs	r1, #4
 80040fc:	438a      	bics	r2, r1
 80040fe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d014      	beq.n	8004132 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004108:	f7fe fea4 	bl	8002e54 <HAL_GetTick>
 800410c:	0003      	movs	r3, r0
 800410e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004110:	e009      	b.n	8004126 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004112:	f7fe fe9f 	bl	8002e54 <HAL_GetTick>
 8004116:	0002      	movs	r2, r0
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	4a9b      	ldr	r2, [pc, #620]	; (800438c <HAL_RCC_OscConfig+0x62c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e12b      	b.n	800437e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004126:	4b98      	ldr	r3, [pc, #608]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	2202      	movs	r2, #2
 800412c:	4013      	ands	r3, r2
 800412e:	d0f0      	beq.n	8004112 <HAL_RCC_OscConfig+0x3b2>
 8004130:	e013      	b.n	800415a <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004132:	f7fe fe8f 	bl	8002e54 <HAL_GetTick>
 8004136:	0003      	movs	r3, r0
 8004138:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800413a:	e009      	b.n	8004150 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800413c:	f7fe fe8a 	bl	8002e54 <HAL_GetTick>
 8004140:	0002      	movs	r2, r0
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	4a91      	ldr	r2, [pc, #580]	; (800438c <HAL_RCC_OscConfig+0x62c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e116      	b.n	800437e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004150:	4b8d      	ldr	r3, [pc, #564]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	2202      	movs	r2, #2
 8004156:	4013      	ands	r3, r2
 8004158:	d1f0      	bne.n	800413c <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800415a:	231f      	movs	r3, #31
 800415c:	18fb      	adds	r3, r7, r3
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d105      	bne.n	8004170 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004164:	4b88      	ldr	r3, [pc, #544]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 8004166:	69da      	ldr	r2, [r3, #28]
 8004168:	4b87      	ldr	r3, [pc, #540]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 800416a:	4989      	ldr	r1, [pc, #548]	; (8004390 <HAL_RCC_OscConfig+0x630>)
 800416c:	400a      	ands	r2, r1
 800416e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2210      	movs	r2, #16
 8004176:	4013      	ands	r3, r2
 8004178:	d063      	beq.n	8004242 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d12a      	bne.n	80041d8 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004182:	4b81      	ldr	r3, [pc, #516]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 8004184:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004186:	4b80      	ldr	r3, [pc, #512]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 8004188:	2104      	movs	r1, #4
 800418a:	430a      	orrs	r2, r1
 800418c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800418e:	4b7e      	ldr	r3, [pc, #504]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 8004190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004192:	4b7d      	ldr	r3, [pc, #500]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 8004194:	2101      	movs	r1, #1
 8004196:	430a      	orrs	r2, r1
 8004198:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800419a:	f7fe fe5b 	bl	8002e54 <HAL_GetTick>
 800419e:	0003      	movs	r3, r0
 80041a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80041a4:	f7fe fe56 	bl	8002e54 <HAL_GetTick>
 80041a8:	0002      	movs	r2, r0
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e0e3      	b.n	800437e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80041b6:	4b74      	ldr	r3, [pc, #464]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 80041b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ba:	2202      	movs	r2, #2
 80041bc:	4013      	ands	r3, r2
 80041be:	d0f1      	beq.n	80041a4 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80041c0:	4b71      	ldr	r3, [pc, #452]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 80041c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c4:	22f8      	movs	r2, #248	; 0xf8
 80041c6:	4393      	bics	r3, r2
 80041c8:	0019      	movs	r1, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	00da      	lsls	r2, r3, #3
 80041d0:	4b6d      	ldr	r3, [pc, #436]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 80041d2:	430a      	orrs	r2, r1
 80041d4:	635a      	str	r2, [r3, #52]	; 0x34
 80041d6:	e034      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	3305      	adds	r3, #5
 80041de:	d111      	bne.n	8004204 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80041e0:	4b69      	ldr	r3, [pc, #420]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 80041e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041e4:	4b68      	ldr	r3, [pc, #416]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 80041e6:	2104      	movs	r1, #4
 80041e8:	438a      	bics	r2, r1
 80041ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80041ec:	4b66      	ldr	r3, [pc, #408]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 80041ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f0:	22f8      	movs	r2, #248	; 0xf8
 80041f2:	4393      	bics	r3, r2
 80041f4:	0019      	movs	r1, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	00da      	lsls	r2, r3, #3
 80041fc:	4b62      	ldr	r3, [pc, #392]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 80041fe:	430a      	orrs	r2, r1
 8004200:	635a      	str	r2, [r3, #52]	; 0x34
 8004202:	e01e      	b.n	8004242 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004204:	4b60      	ldr	r3, [pc, #384]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 8004206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004208:	4b5f      	ldr	r3, [pc, #380]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 800420a:	2104      	movs	r1, #4
 800420c:	430a      	orrs	r2, r1
 800420e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004210:	4b5d      	ldr	r3, [pc, #372]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 8004212:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004214:	4b5c      	ldr	r3, [pc, #368]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 8004216:	2101      	movs	r1, #1
 8004218:	438a      	bics	r2, r1
 800421a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800421c:	f7fe fe1a 	bl	8002e54 <HAL_GetTick>
 8004220:	0003      	movs	r3, r0
 8004222:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004224:	e008      	b.n	8004238 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004226:	f7fe fe15 	bl	8002e54 <HAL_GetTick>
 800422a:	0002      	movs	r2, r0
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e0a2      	b.n	800437e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004238:	4b53      	ldr	r3, [pc, #332]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 800423a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800423c:	2202      	movs	r2, #2
 800423e:	4013      	ands	r3, r2
 8004240:	d1f1      	bne.n	8004226 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d100      	bne.n	800424c <HAL_RCC_OscConfig+0x4ec>
 800424a:	e097      	b.n	800437c <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800424c:	4b4e      	ldr	r3, [pc, #312]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	220c      	movs	r2, #12
 8004252:	4013      	ands	r3, r2
 8004254:	2b08      	cmp	r3, #8
 8004256:	d100      	bne.n	800425a <HAL_RCC_OscConfig+0x4fa>
 8004258:	e06b      	b.n	8004332 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	2b02      	cmp	r3, #2
 8004260:	d14c      	bne.n	80042fc <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004262:	4b49      	ldr	r3, [pc, #292]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	4b48      	ldr	r3, [pc, #288]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 8004268:	494a      	ldr	r1, [pc, #296]	; (8004394 <HAL_RCC_OscConfig+0x634>)
 800426a:	400a      	ands	r2, r1
 800426c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800426e:	f7fe fdf1 	bl	8002e54 <HAL_GetTick>
 8004272:	0003      	movs	r3, r0
 8004274:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004278:	f7fe fdec 	bl	8002e54 <HAL_GetTick>
 800427c:	0002      	movs	r2, r0
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e079      	b.n	800437e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800428a:	4b3f      	ldr	r3, [pc, #252]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	2380      	movs	r3, #128	; 0x80
 8004290:	049b      	lsls	r3, r3, #18
 8004292:	4013      	ands	r3, r2
 8004294:	d1f0      	bne.n	8004278 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004296:	4b3c      	ldr	r3, [pc, #240]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 8004298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429a:	220f      	movs	r2, #15
 800429c:	4393      	bics	r3, r2
 800429e:	0019      	movs	r1, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a4:	4b38      	ldr	r3, [pc, #224]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 80042a6:	430a      	orrs	r2, r1
 80042a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80042aa:	4b37      	ldr	r3, [pc, #220]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	4a3a      	ldr	r2, [pc, #232]	; (8004398 <HAL_RCC_OscConfig+0x638>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	0019      	movs	r1, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	431a      	orrs	r2, r3
 80042be:	4b32      	ldr	r3, [pc, #200]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 80042c0:	430a      	orrs	r2, r1
 80042c2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042c4:	4b30      	ldr	r3, [pc, #192]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	4b2f      	ldr	r3, [pc, #188]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 80042ca:	2180      	movs	r1, #128	; 0x80
 80042cc:	0449      	lsls	r1, r1, #17
 80042ce:	430a      	orrs	r2, r1
 80042d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d2:	f7fe fdbf 	bl	8002e54 <HAL_GetTick>
 80042d6:	0003      	movs	r3, r0
 80042d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042dc:	f7fe fdba 	bl	8002e54 <HAL_GetTick>
 80042e0:	0002      	movs	r2, r0
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e047      	b.n	800437e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042ee:	4b26      	ldr	r3, [pc, #152]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	2380      	movs	r3, #128	; 0x80
 80042f4:	049b      	lsls	r3, r3, #18
 80042f6:	4013      	ands	r3, r2
 80042f8:	d0f0      	beq.n	80042dc <HAL_RCC_OscConfig+0x57c>
 80042fa:	e03f      	b.n	800437c <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042fc:	4b22      	ldr	r3, [pc, #136]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	4b21      	ldr	r3, [pc, #132]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 8004302:	4924      	ldr	r1, [pc, #144]	; (8004394 <HAL_RCC_OscConfig+0x634>)
 8004304:	400a      	ands	r2, r1
 8004306:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004308:	f7fe fda4 	bl	8002e54 <HAL_GetTick>
 800430c:	0003      	movs	r3, r0
 800430e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004312:	f7fe fd9f 	bl	8002e54 <HAL_GetTick>
 8004316:	0002      	movs	r2, r0
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e02c      	b.n	800437e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004324:	4b18      	ldr	r3, [pc, #96]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	2380      	movs	r3, #128	; 0x80
 800432a:	049b      	lsls	r3, r3, #18
 800432c:	4013      	ands	r3, r2
 800432e:	d1f0      	bne.n	8004312 <HAL_RCC_OscConfig+0x5b2>
 8004330:	e024      	b.n	800437c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d101      	bne.n	800433e <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e01f      	b.n	800437e <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800433e:	4b12      	ldr	r3, [pc, #72]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004344:	4b10      	ldr	r3, [pc, #64]	; (8004388 <HAL_RCC_OscConfig+0x628>)
 8004346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004348:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	23c0      	movs	r3, #192	; 0xc0
 800434e:	025b      	lsls	r3, r3, #9
 8004350:	401a      	ands	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	429a      	cmp	r2, r3
 8004358:	d10e      	bne.n	8004378 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	220f      	movs	r2, #15
 800435e:	401a      	ands	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004364:	429a      	cmp	r2, r3
 8004366:	d107      	bne.n	8004378 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	23f0      	movs	r3, #240	; 0xf0
 800436c:	039b      	lsls	r3, r3, #14
 800436e:	401a      	ands	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004374:	429a      	cmp	r2, r3
 8004376:	d001      	beq.n	800437c <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e000      	b.n	800437e <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	0018      	movs	r0, r3
 8004380:	46bd      	mov	sp, r7
 8004382:	b008      	add	sp, #32
 8004384:	bd80      	pop	{r7, pc}
 8004386:	46c0      	nop			; (mov r8, r8)
 8004388:	40021000 	.word	0x40021000
 800438c:	00001388 	.word	0x00001388
 8004390:	efffffff 	.word	0xefffffff
 8004394:	feffffff 	.word	0xfeffffff
 8004398:	ffc27fff 	.word	0xffc27fff

0800439c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e0b3      	b.n	8004518 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043b0:	4b5b      	ldr	r3, [pc, #364]	; (8004520 <HAL_RCC_ClockConfig+0x184>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2201      	movs	r2, #1
 80043b6:	4013      	ands	r3, r2
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d911      	bls.n	80043e2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043be:	4b58      	ldr	r3, [pc, #352]	; (8004520 <HAL_RCC_ClockConfig+0x184>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2201      	movs	r2, #1
 80043c4:	4393      	bics	r3, r2
 80043c6:	0019      	movs	r1, r3
 80043c8:	4b55      	ldr	r3, [pc, #340]	; (8004520 <HAL_RCC_ClockConfig+0x184>)
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043d0:	4b53      	ldr	r3, [pc, #332]	; (8004520 <HAL_RCC_ClockConfig+0x184>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2201      	movs	r2, #1
 80043d6:	4013      	ands	r3, r2
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d001      	beq.n	80043e2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e09a      	b.n	8004518 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2202      	movs	r2, #2
 80043e8:	4013      	ands	r3, r2
 80043ea:	d015      	beq.n	8004418 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2204      	movs	r2, #4
 80043f2:	4013      	ands	r3, r2
 80043f4:	d006      	beq.n	8004404 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80043f6:	4b4b      	ldr	r3, [pc, #300]	; (8004524 <HAL_RCC_ClockConfig+0x188>)
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	4b4a      	ldr	r3, [pc, #296]	; (8004524 <HAL_RCC_ClockConfig+0x188>)
 80043fc:	21e0      	movs	r1, #224	; 0xe0
 80043fe:	00c9      	lsls	r1, r1, #3
 8004400:	430a      	orrs	r2, r1
 8004402:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004404:	4b47      	ldr	r3, [pc, #284]	; (8004524 <HAL_RCC_ClockConfig+0x188>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	22f0      	movs	r2, #240	; 0xf0
 800440a:	4393      	bics	r3, r2
 800440c:	0019      	movs	r1, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	689a      	ldr	r2, [r3, #8]
 8004412:	4b44      	ldr	r3, [pc, #272]	; (8004524 <HAL_RCC_ClockConfig+0x188>)
 8004414:	430a      	orrs	r2, r1
 8004416:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2201      	movs	r2, #1
 800441e:	4013      	ands	r3, r2
 8004420:	d040      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d107      	bne.n	800443a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442a:	4b3e      	ldr	r3, [pc, #248]	; (8004524 <HAL_RCC_ClockConfig+0x188>)
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	2380      	movs	r3, #128	; 0x80
 8004430:	029b      	lsls	r3, r3, #10
 8004432:	4013      	ands	r3, r2
 8004434:	d114      	bne.n	8004460 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e06e      	b.n	8004518 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	2b02      	cmp	r3, #2
 8004440:	d107      	bne.n	8004452 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004442:	4b38      	ldr	r3, [pc, #224]	; (8004524 <HAL_RCC_ClockConfig+0x188>)
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	2380      	movs	r3, #128	; 0x80
 8004448:	049b      	lsls	r3, r3, #18
 800444a:	4013      	ands	r3, r2
 800444c:	d108      	bne.n	8004460 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e062      	b.n	8004518 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004452:	4b34      	ldr	r3, [pc, #208]	; (8004524 <HAL_RCC_ClockConfig+0x188>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2202      	movs	r2, #2
 8004458:	4013      	ands	r3, r2
 800445a:	d101      	bne.n	8004460 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e05b      	b.n	8004518 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004460:	4b30      	ldr	r3, [pc, #192]	; (8004524 <HAL_RCC_ClockConfig+0x188>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	2203      	movs	r2, #3
 8004466:	4393      	bics	r3, r2
 8004468:	0019      	movs	r1, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	4b2d      	ldr	r3, [pc, #180]	; (8004524 <HAL_RCC_ClockConfig+0x188>)
 8004470:	430a      	orrs	r2, r1
 8004472:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004474:	f7fe fcee 	bl	8002e54 <HAL_GetTick>
 8004478:	0003      	movs	r3, r0
 800447a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800447c:	e009      	b.n	8004492 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800447e:	f7fe fce9 	bl	8002e54 <HAL_GetTick>
 8004482:	0002      	movs	r2, r0
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	4a27      	ldr	r2, [pc, #156]	; (8004528 <HAL_RCC_ClockConfig+0x18c>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e042      	b.n	8004518 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004492:	4b24      	ldr	r3, [pc, #144]	; (8004524 <HAL_RCC_ClockConfig+0x188>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	220c      	movs	r2, #12
 8004498:	401a      	ands	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d1ec      	bne.n	800447e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044a4:	4b1e      	ldr	r3, [pc, #120]	; (8004520 <HAL_RCC_ClockConfig+0x184>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2201      	movs	r2, #1
 80044aa:	4013      	ands	r3, r2
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d211      	bcs.n	80044d6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b2:	4b1b      	ldr	r3, [pc, #108]	; (8004520 <HAL_RCC_ClockConfig+0x184>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2201      	movs	r2, #1
 80044b8:	4393      	bics	r3, r2
 80044ba:	0019      	movs	r1, r3
 80044bc:	4b18      	ldr	r3, [pc, #96]	; (8004520 <HAL_RCC_ClockConfig+0x184>)
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c4:	4b16      	ldr	r3, [pc, #88]	; (8004520 <HAL_RCC_ClockConfig+0x184>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2201      	movs	r2, #1
 80044ca:	4013      	ands	r3, r2
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d001      	beq.n	80044d6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e020      	b.n	8004518 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2204      	movs	r2, #4
 80044dc:	4013      	ands	r3, r2
 80044de:	d009      	beq.n	80044f4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80044e0:	4b10      	ldr	r3, [pc, #64]	; (8004524 <HAL_RCC_ClockConfig+0x188>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	4a11      	ldr	r2, [pc, #68]	; (800452c <HAL_RCC_ClockConfig+0x190>)
 80044e6:	4013      	ands	r3, r2
 80044e8:	0019      	movs	r1, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	4b0d      	ldr	r3, [pc, #52]	; (8004524 <HAL_RCC_ClockConfig+0x188>)
 80044f0:	430a      	orrs	r2, r1
 80044f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80044f4:	f000 f820 	bl	8004538 <HAL_RCC_GetSysClockFreq>
 80044f8:	0001      	movs	r1, r0
 80044fa:	4b0a      	ldr	r3, [pc, #40]	; (8004524 <HAL_RCC_ClockConfig+0x188>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	091b      	lsrs	r3, r3, #4
 8004500:	220f      	movs	r2, #15
 8004502:	4013      	ands	r3, r2
 8004504:	4a0a      	ldr	r2, [pc, #40]	; (8004530 <HAL_RCC_ClockConfig+0x194>)
 8004506:	5cd3      	ldrb	r3, [r2, r3]
 8004508:	000a      	movs	r2, r1
 800450a:	40da      	lsrs	r2, r3
 800450c:	4b09      	ldr	r3, [pc, #36]	; (8004534 <HAL_RCC_ClockConfig+0x198>)
 800450e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004510:	2000      	movs	r0, #0
 8004512:	f7fe fc59 	bl	8002dc8 <HAL_InitTick>
  
  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	0018      	movs	r0, r3
 800451a:	46bd      	mov	sp, r7
 800451c:	b004      	add	sp, #16
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40022000 	.word	0x40022000
 8004524:	40021000 	.word	0x40021000
 8004528:	00001388 	.word	0x00001388
 800452c:	fffff8ff 	.word	0xfffff8ff
 8004530:	080048d0 	.word	0x080048d0
 8004534:	20000000 	.word	0x20000000

08004538 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004538:	b590      	push	{r4, r7, lr}
 800453a:	b08f      	sub	sp, #60	; 0x3c
 800453c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800453e:	2314      	movs	r3, #20
 8004540:	18fb      	adds	r3, r7, r3
 8004542:	4a2c      	ldr	r2, [pc, #176]	; (80045f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004544:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004546:	c313      	stmia	r3!, {r0, r1, r4}
 8004548:	6812      	ldr	r2, [r2, #0]
 800454a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800454c:	1d3b      	adds	r3, r7, #4
 800454e:	4a2a      	ldr	r2, [pc, #168]	; (80045f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004550:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004552:	c313      	stmia	r3!, {r0, r1, r4}
 8004554:	6812      	ldr	r2, [r2, #0]
 8004556:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800455c:	2300      	movs	r3, #0
 800455e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004560:	2300      	movs	r3, #0
 8004562:	637b      	str	r3, [r7, #52]	; 0x34
 8004564:	2300      	movs	r3, #0
 8004566:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800456c:	4b23      	ldr	r3, [pc, #140]	; (80045fc <HAL_RCC_GetSysClockFreq+0xc4>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004574:	220c      	movs	r2, #12
 8004576:	4013      	ands	r3, r2
 8004578:	2b04      	cmp	r3, #4
 800457a:	d002      	beq.n	8004582 <HAL_RCC_GetSysClockFreq+0x4a>
 800457c:	2b08      	cmp	r3, #8
 800457e:	d003      	beq.n	8004588 <HAL_RCC_GetSysClockFreq+0x50>
 8004580:	e02f      	b.n	80045e2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004582:	4b1f      	ldr	r3, [pc, #124]	; (8004600 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004584:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004586:	e02f      	b.n	80045e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458a:	0c9b      	lsrs	r3, r3, #18
 800458c:	220f      	movs	r2, #15
 800458e:	4013      	ands	r3, r2
 8004590:	2214      	movs	r2, #20
 8004592:	18ba      	adds	r2, r7, r2
 8004594:	5cd3      	ldrb	r3, [r2, r3]
 8004596:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004598:	4b18      	ldr	r3, [pc, #96]	; (80045fc <HAL_RCC_GetSysClockFreq+0xc4>)
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	220f      	movs	r2, #15
 800459e:	4013      	ands	r3, r2
 80045a0:	1d3a      	adds	r2, r7, #4
 80045a2:	5cd3      	ldrb	r3, [r2, r3]
 80045a4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80045a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045a8:	23c0      	movs	r3, #192	; 0xc0
 80045aa:	025b      	lsls	r3, r3, #9
 80045ac:	401a      	ands	r2, r3
 80045ae:	2380      	movs	r3, #128	; 0x80
 80045b0:	025b      	lsls	r3, r3, #9
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d109      	bne.n	80045ca <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80045b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045b8:	4811      	ldr	r0, [pc, #68]	; (8004600 <HAL_RCC_GetSysClockFreq+0xc8>)
 80045ba:	f7fb fda5 	bl	8000108 <__udivsi3>
 80045be:	0003      	movs	r3, r0
 80045c0:	001a      	movs	r2, r3
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c4:	4353      	muls	r3, r2
 80045c6:	637b      	str	r3, [r7, #52]	; 0x34
 80045c8:	e008      	b.n	80045dc <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80045ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045cc:	480c      	ldr	r0, [pc, #48]	; (8004600 <HAL_RCC_GetSysClockFreq+0xc8>)
 80045ce:	f7fb fd9b 	bl	8000108 <__udivsi3>
 80045d2:	0003      	movs	r3, r0
 80045d4:	001a      	movs	r2, r3
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	4353      	muls	r3, r2
 80045da:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80045dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80045e0:	e002      	b.n	80045e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045e2:	4b07      	ldr	r3, [pc, #28]	; (8004600 <HAL_RCC_GetSysClockFreq+0xc8>)
 80045e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80045e6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80045e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80045ea:	0018      	movs	r0, r3
 80045ec:	46bd      	mov	sp, r7
 80045ee:	b00f      	add	sp, #60	; 0x3c
 80045f0:	bd90      	pop	{r4, r7, pc}
 80045f2:	46c0      	nop			; (mov r8, r8)
 80045f4:	08004830 	.word	0x08004830
 80045f8:	08004840 	.word	0x08004840
 80045fc:	40021000 	.word	0x40021000
 8004600:	007a1200 	.word	0x007a1200

08004604 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	2380      	movs	r3, #128	; 0x80
 800461a:	025b      	lsls	r3, r3, #9
 800461c:	4013      	ands	r3, r2
 800461e:	d100      	bne.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004620:	e08f      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004622:	2317      	movs	r3, #23
 8004624:	18fb      	adds	r3, r7, r3
 8004626:	2200      	movs	r2, #0
 8004628:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800462a:	4b5f      	ldr	r3, [pc, #380]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800462c:	69da      	ldr	r2, [r3, #28]
 800462e:	2380      	movs	r3, #128	; 0x80
 8004630:	055b      	lsls	r3, r3, #21
 8004632:	4013      	ands	r3, r2
 8004634:	d111      	bne.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004636:	4b5c      	ldr	r3, [pc, #368]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004638:	69da      	ldr	r2, [r3, #28]
 800463a:	4b5b      	ldr	r3, [pc, #364]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800463c:	2180      	movs	r1, #128	; 0x80
 800463e:	0549      	lsls	r1, r1, #21
 8004640:	430a      	orrs	r2, r1
 8004642:	61da      	str	r2, [r3, #28]
 8004644:	4b58      	ldr	r3, [pc, #352]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004646:	69da      	ldr	r2, [r3, #28]
 8004648:	2380      	movs	r3, #128	; 0x80
 800464a:	055b      	lsls	r3, r3, #21
 800464c:	4013      	ands	r3, r2
 800464e:	60bb      	str	r3, [r7, #8]
 8004650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004652:	2317      	movs	r3, #23
 8004654:	18fb      	adds	r3, r7, r3
 8004656:	2201      	movs	r2, #1
 8004658:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800465a:	4b54      	ldr	r3, [pc, #336]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	2380      	movs	r3, #128	; 0x80
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	4013      	ands	r3, r2
 8004664:	d11a      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004666:	4b51      	ldr	r3, [pc, #324]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	4b50      	ldr	r3, [pc, #320]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800466c:	2180      	movs	r1, #128	; 0x80
 800466e:	0049      	lsls	r1, r1, #1
 8004670:	430a      	orrs	r2, r1
 8004672:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004674:	f7fe fbee 	bl	8002e54 <HAL_GetTick>
 8004678:	0003      	movs	r3, r0
 800467a:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800467c:	e008      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800467e:	f7fe fbe9 	bl	8002e54 <HAL_GetTick>
 8004682:	0002      	movs	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b64      	cmp	r3, #100	; 0x64
 800468a:	d901      	bls.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e087      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004690:	4b46      	ldr	r3, [pc, #280]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	2380      	movs	r3, #128	; 0x80
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	4013      	ands	r3, r2
 800469a:	d0f0      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800469c:	4b42      	ldr	r3, [pc, #264]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800469e:	6a1a      	ldr	r2, [r3, #32]
 80046a0:	23c0      	movs	r3, #192	; 0xc0
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4013      	ands	r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d034      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	23c0      	movs	r3, #192	; 0xc0
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4013      	ands	r3, r2
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d02c      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046be:	4b3a      	ldr	r3, [pc, #232]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	4a3b      	ldr	r2, [pc, #236]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046c4:	4013      	ands	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046c8:	4b37      	ldr	r3, [pc, #220]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80046ca:	6a1a      	ldr	r2, [r3, #32]
 80046cc:	4b36      	ldr	r3, [pc, #216]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80046ce:	2180      	movs	r1, #128	; 0x80
 80046d0:	0249      	lsls	r1, r1, #9
 80046d2:	430a      	orrs	r2, r1
 80046d4:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046d6:	4b34      	ldr	r3, [pc, #208]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80046d8:	6a1a      	ldr	r2, [r3, #32]
 80046da:	4b33      	ldr	r3, [pc, #204]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80046dc:	4935      	ldr	r1, [pc, #212]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80046de:	400a      	ands	r2, r1
 80046e0:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046e2:	4b31      	ldr	r3, [pc, #196]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2201      	movs	r2, #1
 80046ec:	4013      	ands	r3, r2
 80046ee:	d013      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f0:	f7fe fbb0 	bl	8002e54 <HAL_GetTick>
 80046f4:	0003      	movs	r3, r0
 80046f6:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f8:	e009      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046fa:	f7fe fbab 	bl	8002e54 <HAL_GetTick>
 80046fe:	0002      	movs	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	4a2c      	ldr	r2, [pc, #176]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d901      	bls.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e048      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800470e:	4b26      	ldr	r3, [pc, #152]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	2202      	movs	r2, #2
 8004714:	4013      	ands	r3, r2
 8004716:	d0f0      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004718:	4b23      	ldr	r3, [pc, #140]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	4a24      	ldr	r2, [pc, #144]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800471e:	4013      	ands	r3, r2
 8004720:	0019      	movs	r1, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	4b20      	ldr	r3, [pc, #128]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004728:	430a      	orrs	r2, r1
 800472a:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800472c:	2317      	movs	r3, #23
 800472e:	18fb      	adds	r3, r7, r3
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d105      	bne.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004736:	4b1c      	ldr	r3, [pc, #112]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004738:	69da      	ldr	r2, [r3, #28]
 800473a:	4b1b      	ldr	r3, [pc, #108]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800473c:	491f      	ldr	r1, [pc, #124]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800473e:	400a      	ands	r2, r1
 8004740:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2201      	movs	r2, #1
 8004748:	4013      	ands	r3, r2
 800474a:	d009      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800474c:	4b16      	ldr	r3, [pc, #88]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800474e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004750:	2203      	movs	r2, #3
 8004752:	4393      	bics	r3, r2
 8004754:	0019      	movs	r1, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	4b13      	ldr	r3, [pc, #76]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800475c:	430a      	orrs	r2, r1
 800475e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2220      	movs	r2, #32
 8004766:	4013      	ands	r3, r2
 8004768:	d009      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800476a:	4b0f      	ldr	r3, [pc, #60]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476e:	2210      	movs	r2, #16
 8004770:	4393      	bics	r3, r2
 8004772:	0019      	movs	r1, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68da      	ldr	r2, [r3, #12]
 8004778:	4b0b      	ldr	r3, [pc, #44]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800477a:	430a      	orrs	r2, r1
 800477c:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	2380      	movs	r3, #128	; 0x80
 8004784:	029b      	lsls	r3, r3, #10
 8004786:	4013      	ands	r3, r2
 8004788:	d009      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800478a:	4b07      	ldr	r3, [pc, #28]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800478c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478e:	2280      	movs	r2, #128	; 0x80
 8004790:	4393      	bics	r3, r2
 8004792:	0019      	movs	r1, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691a      	ldr	r2, [r3, #16]
 8004798:	4b03      	ldr	r3, [pc, #12]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800479a:	430a      	orrs	r2, r1
 800479c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	0018      	movs	r0, r3
 80047a2:	46bd      	mov	sp, r7
 80047a4:	b006      	add	sp, #24
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40021000 	.word	0x40021000
 80047ac:	40007000 	.word	0x40007000
 80047b0:	fffffcff 	.word	0xfffffcff
 80047b4:	fffeffff 	.word	0xfffeffff
 80047b8:	00001388 	.word	0x00001388
 80047bc:	efffffff 	.word	0xefffffff

080047c0 <__libc_init_array>:
 80047c0:	b570      	push	{r4, r5, r6, lr}
 80047c2:	2600      	movs	r6, #0
 80047c4:	4d0c      	ldr	r5, [pc, #48]	; (80047f8 <__libc_init_array+0x38>)
 80047c6:	4c0d      	ldr	r4, [pc, #52]	; (80047fc <__libc_init_array+0x3c>)
 80047c8:	1b64      	subs	r4, r4, r5
 80047ca:	10a4      	asrs	r4, r4, #2
 80047cc:	42a6      	cmp	r6, r4
 80047ce:	d109      	bne.n	80047e4 <__libc_init_array+0x24>
 80047d0:	2600      	movs	r6, #0
 80047d2:	f000 f821 	bl	8004818 <_init>
 80047d6:	4d0a      	ldr	r5, [pc, #40]	; (8004800 <__libc_init_array+0x40>)
 80047d8:	4c0a      	ldr	r4, [pc, #40]	; (8004804 <__libc_init_array+0x44>)
 80047da:	1b64      	subs	r4, r4, r5
 80047dc:	10a4      	asrs	r4, r4, #2
 80047de:	42a6      	cmp	r6, r4
 80047e0:	d105      	bne.n	80047ee <__libc_init_array+0x2e>
 80047e2:	bd70      	pop	{r4, r5, r6, pc}
 80047e4:	00b3      	lsls	r3, r6, #2
 80047e6:	58eb      	ldr	r3, [r5, r3]
 80047e8:	4798      	blx	r3
 80047ea:	3601      	adds	r6, #1
 80047ec:	e7ee      	b.n	80047cc <__libc_init_array+0xc>
 80047ee:	00b3      	lsls	r3, r6, #2
 80047f0:	58eb      	ldr	r3, [r5, r3]
 80047f2:	4798      	blx	r3
 80047f4:	3601      	adds	r6, #1
 80047f6:	e7f2      	b.n	80047de <__libc_init_array+0x1e>
 80047f8:	080048e0 	.word	0x080048e0
 80047fc:	080048e0 	.word	0x080048e0
 8004800:	080048e0 	.word	0x080048e0
 8004804:	080048e4 	.word	0x080048e4

08004808 <memset>:
 8004808:	0003      	movs	r3, r0
 800480a:	1812      	adds	r2, r2, r0
 800480c:	4293      	cmp	r3, r2
 800480e:	d100      	bne.n	8004812 <memset+0xa>
 8004810:	4770      	bx	lr
 8004812:	7019      	strb	r1, [r3, #0]
 8004814:	3301      	adds	r3, #1
 8004816:	e7f9      	b.n	800480c <memset+0x4>

08004818 <_init>:
 8004818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481a:	46c0      	nop			; (mov r8, r8)
 800481c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800481e:	bc08      	pop	{r3}
 8004820:	469e      	mov	lr, r3
 8004822:	4770      	bx	lr

08004824 <_fini>:
 8004824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004826:	46c0      	nop			; (mov r8, r8)
 8004828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800482a:	bc08      	pop	{r3}
 800482c:	469e      	mov	lr, r3
 800482e:	4770      	bx	lr
